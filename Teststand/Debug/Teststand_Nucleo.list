
Teststand_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007920  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080079e0  080079e0  000089e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00009018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a18  08007a18  00008a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00008a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007a28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000018  08007a40  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08007a40  00009700  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cb5  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035aa  00000000  00000000  0001dcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000212a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea0  00000000  00000000  00022508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128f6  00000000  00000000  000233a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019888  00000000  00000000  00035c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b20e  00000000  00000000  0004f526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004208  00000000  00000000  000ba778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000be980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080079c8 	.word	0x080079c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080079c8 	.word	0x080079c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d113      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000228:	2900      	cmp	r1, #0
 800022a:	db06      	blt.n	800023a <__aeabi_ldivmod+0x1a>
 800022c:	dc01      	bgt.n	8000232 <__aeabi_ldivmod+0x12>
 800022e:	2800      	cmp	r0, #0
 8000230:	d006      	beq.n	8000240 <__aeabi_ldivmod+0x20>
 8000232:	2000      	movs	r0, #0
 8000234:	43c0      	mvns	r0, r0
 8000236:	0841      	lsrs	r1, r0, #1
 8000238:	e002      	b.n	8000240 <__aeabi_ldivmod+0x20>
 800023a:	2180      	movs	r1, #128	@ 0x80
 800023c:	0609      	lsls	r1, r1, #24
 800023e:	2000      	movs	r0, #0
 8000240:	b407      	push	{r0, r1, r2}
 8000242:	4802      	ldr	r0, [pc, #8]	@ (800024c <__aeabi_ldivmod+0x2c>)
 8000244:	a101      	add	r1, pc, #4	@ (adr r1, 800024c <__aeabi_ldivmod+0x2c>)
 8000246:	1840      	adds	r0, r0, r1
 8000248:	9002      	str	r0, [sp, #8]
 800024a:	bd03      	pop	{r0, r1, pc}
 800024c:	ffffffd1 	.word	0xffffffd1
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f920 	bl	800049c <__gnu_ldivmod_helper>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_uldivmod>:
 8000268:	2b00      	cmp	r3, #0
 800026a:	d111      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 800026c:	2a00      	cmp	r2, #0
 800026e:	d10f      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 8000270:	2900      	cmp	r1, #0
 8000272:	d100      	bne.n	8000276 <__aeabi_uldivmod+0xe>
 8000274:	2800      	cmp	r0, #0
 8000276:	d002      	beq.n	800027e <__aeabi_uldivmod+0x16>
 8000278:	2100      	movs	r1, #0
 800027a:	43c9      	mvns	r1, r1
 800027c:	0008      	movs	r0, r1
 800027e:	b407      	push	{r0, r1, r2}
 8000280:	4802      	ldr	r0, [pc, #8]	@ (800028c <__aeabi_uldivmod+0x24>)
 8000282:	a102      	add	r1, pc, #8	@ (adr r1, 800028c <__aeabi_uldivmod+0x24>)
 8000284:	1840      	adds	r0, r0, r1
 8000286:	9002      	str	r0, [sp, #8]
 8000288:	bd03      	pop	{r0, r1, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	ffffff91 	.word	0xffffff91
 8000290:	b403      	push	{r0, r1}
 8000292:	4668      	mov	r0, sp
 8000294:	b501      	push	{r0, lr}
 8000296:	9802      	ldr	r0, [sp, #8]
 8000298:	f000 f834 	bl	8000304 <__udivmoddi4>
 800029c:	9b01      	ldr	r3, [sp, #4]
 800029e:	469e      	mov	lr, r3
 80002a0:	b002      	add	sp, #8
 80002a2:	bc0c      	pop	{r2, r3}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			@ (mov r8, r8)

080002a8 <__aeabi_lmul>:
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	46ce      	mov	lr, r9
 80002ac:	4699      	mov	r9, r3
 80002ae:	0c03      	lsrs	r3, r0, #16
 80002b0:	469c      	mov	ip, r3
 80002b2:	0413      	lsls	r3, r2, #16
 80002b4:	4647      	mov	r7, r8
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	001d      	movs	r5, r3
 80002ba:	000e      	movs	r6, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	0404      	lsls	r4, r0, #16
 80002c0:	0c24      	lsrs	r4, r4, #16
 80002c2:	b580      	push	{r7, lr}
 80002c4:	0007      	movs	r7, r0
 80002c6:	0c10      	lsrs	r0, r2, #16
 80002c8:	434b      	muls	r3, r1
 80002ca:	4365      	muls	r5, r4
 80002cc:	4341      	muls	r1, r0
 80002ce:	4360      	muls	r0, r4
 80002d0:	0c2c      	lsrs	r4, r5, #16
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	1824      	adds	r4, r4, r0
 80002d6:	468c      	mov	ip, r1
 80002d8:	42a3      	cmp	r3, r4
 80002da:	d903      	bls.n	80002e4 <__aeabi_lmul+0x3c>
 80002dc:	2380      	movs	r3, #128	@ 0x80
 80002de:	025b      	lsls	r3, r3, #9
 80002e0:	4698      	mov	r8, r3
 80002e2:	44c4      	add	ip, r8
 80002e4:	4649      	mov	r1, r9
 80002e6:	4379      	muls	r1, r7
 80002e8:	4356      	muls	r6, r2
 80002ea:	0c23      	lsrs	r3, r4, #16
 80002ec:	042d      	lsls	r5, r5, #16
 80002ee:	0c2d      	lsrs	r5, r5, #16
 80002f0:	1989      	adds	r1, r1, r6
 80002f2:	4463      	add	r3, ip
 80002f4:	0424      	lsls	r4, r4, #16
 80002f6:	1960      	adds	r0, r4, r5
 80002f8:	18c9      	adds	r1, r1, r3
 80002fa:	bcc0      	pop	{r6, r7}
 80002fc:	46b9      	mov	r9, r7
 80002fe:	46b0      	mov	r8, r6
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	46c0      	nop			@ (mov r8, r8)

08000304 <__udivmoddi4>:
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	4657      	mov	r7, sl
 8000308:	464e      	mov	r6, r9
 800030a:	4645      	mov	r5, r8
 800030c:	46de      	mov	lr, fp
 800030e:	b5e0      	push	{r5, r6, r7, lr}
 8000310:	0004      	movs	r4, r0
 8000312:	000d      	movs	r5, r1
 8000314:	4692      	mov	sl, r2
 8000316:	4699      	mov	r9, r3
 8000318:	b083      	sub	sp, #12
 800031a:	428b      	cmp	r3, r1
 800031c:	d830      	bhi.n	8000380 <__udivmoddi4+0x7c>
 800031e:	d02d      	beq.n	800037c <__udivmoddi4+0x78>
 8000320:	4649      	mov	r1, r9
 8000322:	4650      	mov	r0, sl
 8000324:	f000 f8d8 	bl	80004d8 <__clzdi2>
 8000328:	0029      	movs	r1, r5
 800032a:	0006      	movs	r6, r0
 800032c:	0020      	movs	r0, r4
 800032e:	f000 f8d3 	bl	80004d8 <__clzdi2>
 8000332:	1a33      	subs	r3, r6, r0
 8000334:	4698      	mov	r8, r3
 8000336:	3b20      	subs	r3, #32
 8000338:	d434      	bmi.n	80003a4 <__udivmoddi4+0xa0>
 800033a:	469b      	mov	fp, r3
 800033c:	4653      	mov	r3, sl
 800033e:	465a      	mov	r2, fp
 8000340:	4093      	lsls	r3, r2
 8000342:	4642      	mov	r2, r8
 8000344:	001f      	movs	r7, r3
 8000346:	4653      	mov	r3, sl
 8000348:	4093      	lsls	r3, r2
 800034a:	001e      	movs	r6, r3
 800034c:	42af      	cmp	r7, r5
 800034e:	d83b      	bhi.n	80003c8 <__udivmoddi4+0xc4>
 8000350:	42af      	cmp	r7, r5
 8000352:	d100      	bne.n	8000356 <__udivmoddi4+0x52>
 8000354:	e079      	b.n	800044a <__udivmoddi4+0x146>
 8000356:	465b      	mov	r3, fp
 8000358:	1ba4      	subs	r4, r4, r6
 800035a:	41bd      	sbcs	r5, r7
 800035c:	2b00      	cmp	r3, #0
 800035e:	da00      	bge.n	8000362 <__udivmoddi4+0x5e>
 8000360:	e076      	b.n	8000450 <__udivmoddi4+0x14c>
 8000362:	2200      	movs	r2, #0
 8000364:	2300      	movs	r3, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	2301      	movs	r3, #1
 800036c:	465a      	mov	r2, fp
 800036e:	4093      	lsls	r3, r2
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	4642      	mov	r2, r8
 8000376:	4093      	lsls	r3, r2
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	e029      	b.n	80003d0 <__udivmoddi4+0xcc>
 800037c:	4282      	cmp	r2, r0
 800037e:	d9cf      	bls.n	8000320 <__udivmoddi4+0x1c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <__udivmoddi4+0x8e>
 800038e:	601c      	str	r4, [r3, #0]
 8000390:	605d      	str	r5, [r3, #4]
 8000392:	9800      	ldr	r0, [sp, #0]
 8000394:	9901      	ldr	r1, [sp, #4]
 8000396:	b003      	add	sp, #12
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	46bb      	mov	fp, r7
 800039c:	46b2      	mov	sl, r6
 800039e:	46a9      	mov	r9, r5
 80003a0:	46a0      	mov	r8, r4
 80003a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a4:	4642      	mov	r2, r8
 80003a6:	469b      	mov	fp, r3
 80003a8:	2320      	movs	r3, #32
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	4652      	mov	r2, sl
 80003ae:	40da      	lsrs	r2, r3
 80003b0:	4641      	mov	r1, r8
 80003b2:	0013      	movs	r3, r2
 80003b4:	464a      	mov	r2, r9
 80003b6:	408a      	lsls	r2, r1
 80003b8:	0017      	movs	r7, r2
 80003ba:	4642      	mov	r2, r8
 80003bc:	431f      	orrs	r7, r3
 80003be:	4653      	mov	r3, sl
 80003c0:	4093      	lsls	r3, r2
 80003c2:	001e      	movs	r6, r3
 80003c4:	42af      	cmp	r7, r5
 80003c6:	d9c3      	bls.n	8000350 <__udivmoddi4+0x4c>
 80003c8:	2200      	movs	r2, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0d8      	beq.n	8000388 <__udivmoddi4+0x84>
 80003d6:	07fb      	lsls	r3, r7, #31
 80003d8:	0872      	lsrs	r2, r6, #1
 80003da:	431a      	orrs	r2, r3
 80003dc:	4646      	mov	r6, r8
 80003de:	087b      	lsrs	r3, r7, #1
 80003e0:	e00e      	b.n	8000400 <__udivmoddi4+0xfc>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d101      	bne.n	80003ea <__udivmoddi4+0xe6>
 80003e6:	42a2      	cmp	r2, r4
 80003e8:	d80c      	bhi.n	8000404 <__udivmoddi4+0x100>
 80003ea:	1aa4      	subs	r4, r4, r2
 80003ec:	419d      	sbcs	r5, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	1924      	adds	r4, r4, r4
 80003f2:	416d      	adcs	r5, r5
 80003f4:	2100      	movs	r1, #0
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1824      	adds	r4, r4, r0
 80003fa:	414d      	adcs	r5, r1
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d006      	beq.n	800040e <__udivmoddi4+0x10a>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d9ee      	bls.n	80003e2 <__udivmoddi4+0xde>
 8000404:	3e01      	subs	r6, #1
 8000406:	1924      	adds	r4, r4, r4
 8000408:	416d      	adcs	r5, r5
 800040a:	2e00      	cmp	r6, #0
 800040c:	d1f8      	bne.n	8000400 <__udivmoddi4+0xfc>
 800040e:	9800      	ldr	r0, [sp, #0]
 8000410:	9901      	ldr	r1, [sp, #4]
 8000412:	465b      	mov	r3, fp
 8000414:	1900      	adds	r0, r0, r4
 8000416:	4169      	adcs	r1, r5
 8000418:	2b00      	cmp	r3, #0
 800041a:	db24      	blt.n	8000466 <__udivmoddi4+0x162>
 800041c:	002b      	movs	r3, r5
 800041e:	465a      	mov	r2, fp
 8000420:	4644      	mov	r4, r8
 8000422:	40d3      	lsrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	db2a      	blt.n	8000488 <__udivmoddi4+0x184>
 8000432:	0026      	movs	r6, r4
 8000434:	409e      	lsls	r6, r3
 8000436:	0033      	movs	r3, r6
 8000438:	0026      	movs	r6, r4
 800043a:	4647      	mov	r7, r8
 800043c:	40be      	lsls	r6, r7
 800043e:	0032      	movs	r2, r6
 8000440:	1a80      	subs	r0, r0, r2
 8000442:	4199      	sbcs	r1, r3
 8000444:	9000      	str	r0, [sp, #0]
 8000446:	9101      	str	r1, [sp, #4]
 8000448:	e79e      	b.n	8000388 <__udivmoddi4+0x84>
 800044a:	42a3      	cmp	r3, r4
 800044c:	d8bc      	bhi.n	80003c8 <__udivmoddi4+0xc4>
 800044e:	e782      	b.n	8000356 <__udivmoddi4+0x52>
 8000450:	4642      	mov	r2, r8
 8000452:	2320      	movs	r3, #32
 8000454:	2100      	movs	r1, #0
 8000456:	1a9b      	subs	r3, r3, r2
 8000458:	2200      	movs	r2, #0
 800045a:	9100      	str	r1, [sp, #0]
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	2201      	movs	r2, #1
 8000460:	40da      	lsrs	r2, r3
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	e785      	b.n	8000372 <__udivmoddi4+0x6e>
 8000466:	4642      	mov	r2, r8
 8000468:	2320      	movs	r3, #32
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	4646      	mov	r6, r8
 8000470:	409a      	lsls	r2, r3
 8000472:	0023      	movs	r3, r4
 8000474:	40f3      	lsrs	r3, r6
 8000476:	4644      	mov	r4, r8
 8000478:	4313      	orrs	r3, r2
 800047a:	002a      	movs	r2, r5
 800047c:	40e2      	lsrs	r2, r4
 800047e:	001c      	movs	r4, r3
 8000480:	465b      	mov	r3, fp
 8000482:	0015      	movs	r5, r2
 8000484:	2b00      	cmp	r3, #0
 8000486:	dad4      	bge.n	8000432 <__udivmoddi4+0x12e>
 8000488:	4642      	mov	r2, r8
 800048a:	002f      	movs	r7, r5
 800048c:	2320      	movs	r3, #32
 800048e:	0026      	movs	r6, r4
 8000490:	4097      	lsls	r7, r2
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	40de      	lsrs	r6, r3
 8000496:	003b      	movs	r3, r7
 8000498:	4333      	orrs	r3, r6
 800049a:	e7cd      	b.n	8000438 <__udivmoddi4+0x134>

0800049c <__gnu_ldivmod_helper>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	b580      	push	{r7, lr}
 80004a4:	4691      	mov	r9, r2
 80004a6:	4698      	mov	r8, r3
 80004a8:	0004      	movs	r4, r0
 80004aa:	000d      	movs	r5, r1
 80004ac:	f000 f820 	bl	80004f0 <__divdi3>
 80004b0:	0007      	movs	r7, r0
 80004b2:	000e      	movs	r6, r1
 80004b4:	0002      	movs	r2, r0
 80004b6:	000b      	movs	r3, r1
 80004b8:	4648      	mov	r0, r9
 80004ba:	4641      	mov	r1, r8
 80004bc:	f7ff fef4 	bl	80002a8 <__aeabi_lmul>
 80004c0:	1a24      	subs	r4, r4, r0
 80004c2:	418d      	sbcs	r5, r1
 80004c4:	9b08      	ldr	r3, [sp, #32]
 80004c6:	0038      	movs	r0, r7
 80004c8:	0031      	movs	r1, r6
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	bcc0      	pop	{r6, r7}
 80004d0:	46b9      	mov	r9, r7
 80004d2:	46b0      	mov	r8, r6
 80004d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__clzdi2>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	2900      	cmp	r1, #0
 80004dc:	d103      	bne.n	80004e6 <__clzdi2+0xe>
 80004de:	f000 f8f3 	bl	80006c8 <__clzsi2>
 80004e2:	3020      	adds	r0, #32
 80004e4:	e002      	b.n	80004ec <__clzdi2+0x14>
 80004e6:	0008      	movs	r0, r1
 80004e8:	f000 f8ee 	bl	80006c8 <__clzsi2>
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__divdi3>:
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	464f      	mov	r7, r9
 80004f4:	4646      	mov	r6, r8
 80004f6:	46d6      	mov	lr, sl
 80004f8:	b5c0      	push	{r6, r7, lr}
 80004fa:	0006      	movs	r6, r0
 80004fc:	000f      	movs	r7, r1
 80004fe:	0010      	movs	r0, r2
 8000500:	0019      	movs	r1, r3
 8000502:	b082      	sub	sp, #8
 8000504:	2f00      	cmp	r7, #0
 8000506:	db5d      	blt.n	80005c4 <__divdi3+0xd4>
 8000508:	0034      	movs	r4, r6
 800050a:	003d      	movs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	db0b      	blt.n	8000528 <__divdi3+0x38>
 8000510:	0016      	movs	r6, r2
 8000512:	001f      	movs	r7, r3
 8000514:	42ab      	cmp	r3, r5
 8000516:	d917      	bls.n	8000548 <__divdi3+0x58>
 8000518:	2000      	movs	r0, #0
 800051a:	2100      	movs	r1, #0
 800051c:	b002      	add	sp, #8
 800051e:	bce0      	pop	{r5, r6, r7}
 8000520:	46ba      	mov	sl, r7
 8000522:	46b1      	mov	r9, r6
 8000524:	46a8      	mov	r8, r5
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	2700      	movs	r7, #0
 800052a:	4246      	negs	r6, r0
 800052c:	418f      	sbcs	r7, r1
 800052e:	42af      	cmp	r7, r5
 8000530:	d8f2      	bhi.n	8000518 <__divdi3+0x28>
 8000532:	d100      	bne.n	8000536 <__divdi3+0x46>
 8000534:	e0a0      	b.n	8000678 <__divdi3+0x188>
 8000536:	2301      	movs	r3, #1
 8000538:	425b      	negs	r3, r3
 800053a:	4699      	mov	r9, r3
 800053c:	e009      	b.n	8000552 <__divdi3+0x62>
 800053e:	2700      	movs	r7, #0
 8000540:	4246      	negs	r6, r0
 8000542:	418f      	sbcs	r7, r1
 8000544:	42af      	cmp	r7, r5
 8000546:	d8e7      	bhi.n	8000518 <__divdi3+0x28>
 8000548:	42af      	cmp	r7, r5
 800054a:	d100      	bne.n	800054e <__divdi3+0x5e>
 800054c:	e090      	b.n	8000670 <__divdi3+0x180>
 800054e:	2300      	movs	r3, #0
 8000550:	4699      	mov	r9, r3
 8000552:	0039      	movs	r1, r7
 8000554:	0030      	movs	r0, r6
 8000556:	f7ff ffbf 	bl	80004d8 <__clzdi2>
 800055a:	4680      	mov	r8, r0
 800055c:	0029      	movs	r1, r5
 800055e:	0020      	movs	r0, r4
 8000560:	f7ff ffba 	bl	80004d8 <__clzdi2>
 8000564:	4643      	mov	r3, r8
 8000566:	1a1b      	subs	r3, r3, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d475      	bmi.n	800065a <__divdi3+0x16a>
 800056e:	0031      	movs	r1, r6
 8000570:	4099      	lsls	r1, r3
 8000572:	469a      	mov	sl, r3
 8000574:	000b      	movs	r3, r1
 8000576:	0031      	movs	r1, r6
 8000578:	4640      	mov	r0, r8
 800057a:	4081      	lsls	r1, r0
 800057c:	000a      	movs	r2, r1
 800057e:	42ab      	cmp	r3, r5
 8000580:	d82e      	bhi.n	80005e0 <__divdi3+0xf0>
 8000582:	d02b      	beq.n	80005dc <__divdi3+0xec>
 8000584:	4651      	mov	r1, sl
 8000586:	1aa4      	subs	r4, r4, r2
 8000588:	419d      	sbcs	r5, r3
 800058a:	2900      	cmp	r1, #0
 800058c:	da00      	bge.n	8000590 <__divdi3+0xa0>
 800058e:	e090      	b.n	80006b2 <__divdi3+0x1c2>
 8000590:	2100      	movs	r1, #0
 8000592:	2000      	movs	r0, #0
 8000594:	2601      	movs	r6, #1
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	4651      	mov	r1, sl
 800059c:	408e      	lsls	r6, r1
 800059e:	9601      	str	r6, [sp, #4]
 80005a0:	4641      	mov	r1, r8
 80005a2:	2601      	movs	r6, #1
 80005a4:	408e      	lsls	r6, r1
 80005a6:	4641      	mov	r1, r8
 80005a8:	9600      	str	r6, [sp, #0]
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d11f      	bne.n	80005ee <__divdi3+0xfe>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	464b      	mov	r3, r9
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0b1      	beq.n	800051c <__divdi3+0x2c>
 80005b8:	0003      	movs	r3, r0
 80005ba:	000c      	movs	r4, r1
 80005bc:	2100      	movs	r1, #0
 80005be:	4258      	negs	r0, r3
 80005c0:	41a1      	sbcs	r1, r4
 80005c2:	e7ab      	b.n	800051c <__divdi3+0x2c>
 80005c4:	2500      	movs	r5, #0
 80005c6:	4274      	negs	r4, r6
 80005c8:	41bd      	sbcs	r5, r7
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dbb7      	blt.n	800053e <__divdi3+0x4e>
 80005ce:	0016      	movs	r6, r2
 80005d0:	001f      	movs	r7, r3
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d8a0      	bhi.n	8000518 <__divdi3+0x28>
 80005d6:	42af      	cmp	r7, r5
 80005d8:	d1ad      	bne.n	8000536 <__divdi3+0x46>
 80005da:	e04d      	b.n	8000678 <__divdi3+0x188>
 80005dc:	42a1      	cmp	r1, r4
 80005de:	d9d1      	bls.n	8000584 <__divdi3+0x94>
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	4641      	mov	r1, r8
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d0df      	beq.n	80005ae <__divdi3+0xbe>
 80005ee:	07d9      	lsls	r1, r3, #31
 80005f0:	0856      	lsrs	r6, r2, #1
 80005f2:	085f      	lsrs	r7, r3, #1
 80005f4:	430e      	orrs	r6, r1
 80005f6:	4643      	mov	r3, r8
 80005f8:	e00e      	b.n	8000618 <__divdi3+0x128>
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d101      	bne.n	8000602 <__divdi3+0x112>
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d80c      	bhi.n	800061c <__divdi3+0x12c>
 8000602:	1ba4      	subs	r4, r4, r6
 8000604:	41bd      	sbcs	r5, r7
 8000606:	2101      	movs	r1, #1
 8000608:	1924      	adds	r4, r4, r4
 800060a:	416d      	adcs	r5, r5
 800060c:	2200      	movs	r2, #0
 800060e:	3b01      	subs	r3, #1
 8000610:	1864      	adds	r4, r4, r1
 8000612:	4155      	adcs	r5, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d006      	beq.n	8000626 <__divdi3+0x136>
 8000618:	42af      	cmp	r7, r5
 800061a:	d9ee      	bls.n	80005fa <__divdi3+0x10a>
 800061c:	3b01      	subs	r3, #1
 800061e:	1924      	adds	r4, r4, r4
 8000620:	416d      	adcs	r5, r5
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f8      	bne.n	8000618 <__divdi3+0x128>
 8000626:	9a00      	ldr	r2, [sp, #0]
 8000628:	9b01      	ldr	r3, [sp, #4]
 800062a:	4651      	mov	r1, sl
 800062c:	1912      	adds	r2, r2, r4
 800062e:	416b      	adcs	r3, r5
 8000630:	2900      	cmp	r1, #0
 8000632:	db25      	blt.n	8000680 <__divdi3+0x190>
 8000634:	002e      	movs	r6, r5
 8000636:	002c      	movs	r4, r5
 8000638:	40ce      	lsrs	r6, r1
 800063a:	4641      	mov	r1, r8
 800063c:	40cc      	lsrs	r4, r1
 800063e:	4651      	mov	r1, sl
 8000640:	2900      	cmp	r1, #0
 8000642:	db2d      	blt.n	80006a0 <__divdi3+0x1b0>
 8000644:	0034      	movs	r4, r6
 8000646:	408c      	lsls	r4, r1
 8000648:	0021      	movs	r1, r4
 800064a:	4644      	mov	r4, r8
 800064c:	40a6      	lsls	r6, r4
 800064e:	0030      	movs	r0, r6
 8000650:	1a12      	subs	r2, r2, r0
 8000652:	418b      	sbcs	r3, r1
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	e7a9      	b.n	80005ae <__divdi3+0xbe>
 800065a:	4642      	mov	r2, r8
 800065c:	0038      	movs	r0, r7
 800065e:	469a      	mov	sl, r3
 8000660:	2320      	movs	r3, #32
 8000662:	0031      	movs	r1, r6
 8000664:	4090      	lsls	r0, r2
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	40d9      	lsrs	r1, r3
 800066a:	0003      	movs	r3, r0
 800066c:	430b      	orrs	r3, r1
 800066e:	e782      	b.n	8000576 <__divdi3+0x86>
 8000670:	42a6      	cmp	r6, r4
 8000672:	d900      	bls.n	8000676 <__divdi3+0x186>
 8000674:	e750      	b.n	8000518 <__divdi3+0x28>
 8000676:	e76a      	b.n	800054e <__divdi3+0x5e>
 8000678:	42a6      	cmp	r6, r4
 800067a:	d800      	bhi.n	800067e <__divdi3+0x18e>
 800067c:	e75b      	b.n	8000536 <__divdi3+0x46>
 800067e:	e74b      	b.n	8000518 <__divdi3+0x28>
 8000680:	4640      	mov	r0, r8
 8000682:	2120      	movs	r1, #32
 8000684:	1a09      	subs	r1, r1, r0
 8000686:	0028      	movs	r0, r5
 8000688:	4088      	lsls	r0, r1
 800068a:	0026      	movs	r6, r4
 800068c:	0001      	movs	r1, r0
 800068e:	4640      	mov	r0, r8
 8000690:	40c6      	lsrs	r6, r0
 8000692:	002c      	movs	r4, r5
 8000694:	430e      	orrs	r6, r1
 8000696:	4641      	mov	r1, r8
 8000698:	40cc      	lsrs	r4, r1
 800069a:	4651      	mov	r1, sl
 800069c:	2900      	cmp	r1, #0
 800069e:	dad1      	bge.n	8000644 <__divdi3+0x154>
 80006a0:	4640      	mov	r0, r8
 80006a2:	2120      	movs	r1, #32
 80006a4:	0035      	movs	r5, r6
 80006a6:	4084      	lsls	r4, r0
 80006a8:	1a09      	subs	r1, r1, r0
 80006aa:	40cd      	lsrs	r5, r1
 80006ac:	0021      	movs	r1, r4
 80006ae:	4329      	orrs	r1, r5
 80006b0:	e7cb      	b.n	800064a <__divdi3+0x15a>
 80006b2:	4641      	mov	r1, r8
 80006b4:	2620      	movs	r6, #32
 80006b6:	2701      	movs	r7, #1
 80006b8:	1a76      	subs	r6, r6, r1
 80006ba:	2000      	movs	r0, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	40f7      	lsrs	r7, r6
 80006c0:	9000      	str	r0, [sp, #0]
 80006c2:	9101      	str	r1, [sp, #4]
 80006c4:	9701      	str	r7, [sp, #4]
 80006c6:	e76b      	b.n	80005a0 <__divdi3+0xb0>

080006c8 <__clzsi2>:
 80006c8:	211c      	movs	r1, #28
 80006ca:	2301      	movs	r3, #1
 80006cc:	041b      	lsls	r3, r3, #16
 80006ce:	4298      	cmp	r0, r3
 80006d0:	d301      	bcc.n	80006d6 <__clzsi2+0xe>
 80006d2:	0c00      	lsrs	r0, r0, #16
 80006d4:	3910      	subs	r1, #16
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	4298      	cmp	r0, r3
 80006da:	d301      	bcc.n	80006e0 <__clzsi2+0x18>
 80006dc:	0a00      	lsrs	r0, r0, #8
 80006de:	3908      	subs	r1, #8
 80006e0:	091b      	lsrs	r3, r3, #4
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d301      	bcc.n	80006ea <__clzsi2+0x22>
 80006e6:	0900      	lsrs	r0, r0, #4
 80006e8:	3904      	subs	r1, #4
 80006ea:	a202      	add	r2, pc, #8	@ (adr r2, 80006f4 <__clzsi2+0x2c>)
 80006ec:	5c10      	ldrb	r0, [r2, r0]
 80006ee:	1840      	adds	r0, r0, r1
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	02020304 	.word	0x02020304
 80006f8:	01010101 	.word	0x01010101
	...

08000704 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0018      	movs	r0, r3
 800070e:	230c      	movs	r3, #12
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f007 f921 	bl	800795a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000718:	4b3f      	ldr	r3, [pc, #252]	@ (8000818 <MX_ADC_Init+0x114>)
 800071a:	4a40      	ldr	r2, [pc, #256]	@ (800081c <MX_ADC_Init+0x118>)
 800071c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800071e:	4b3e      	ldr	r3, [pc, #248]	@ (8000818 <MX_ADC_Init+0x114>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <MX_ADC_Init+0x114>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <MX_ADC_Init+0x114>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000730:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <MX_ADC_Init+0x114>)
 8000732:	2201      	movs	r2, #1
 8000734:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <MX_ADC_Init+0x114>)
 8000738:	2204      	movs	r2, #4
 800073a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800073c:	4b36      	ldr	r3, [pc, #216]	@ (8000818 <MX_ADC_Init+0x114>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_ADC_Init+0x114>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000748:	4b33      	ldr	r3, [pc, #204]	@ (8000818 <MX_ADC_Init+0x114>)
 800074a:	2201      	movs	r2, #1
 800074c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_ADC_Init+0x114>)
 8000750:	2200      	movs	r2, #0
 8000752:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <MX_ADC_Init+0x114>)
 8000756:	22c2      	movs	r2, #194	@ 0xc2
 8000758:	32ff      	adds	r2, #255	@ 0xff
 800075a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075c:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_ADC_Init+0x114>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_ADC_Init+0x114>)
 8000764:	2224      	movs	r2, #36	@ 0x24
 8000766:	2101      	movs	r1, #1
 8000768:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_ADC_Init+0x114>)
 800076c:	2201      	movs	r2, #1
 800076e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000770:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <MX_ADC_Init+0x114>)
 8000772:	0018      	movs	r0, r3
 8000774:	f002 faf2 	bl	8002d5c <HAL_ADC_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800077c:	f001 ff0c 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0152      	lsls	r2, r2, #5
 800078c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2207      	movs	r2, #7
 8000792:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000794:	1d3a      	adds	r2, r7, #4
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_ADC_Init+0x114>)
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fd2e 	bl	80031fc <HAL_ADC_ConfigChannel>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80007a4:	f001 fef8 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_ADC_Init+0x114>)
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 fd21 	bl	80031fc <HAL_ADC_ConfigChannel>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80007be:	f001 feeb 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2203      	movs	r2, #3
 80007c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c8:	1d3a      	adds	r2, r7, #4
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_ADC_Init+0x114>)
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fd14 	bl	80031fc <HAL_ADC_ConfigChannel>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80007d8:	f001 fede 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2204      	movs	r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_ADC_Init+0x114>)
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fd07 	bl	80031fc <HAL_ADC_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80007f2:	f001 fed1 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2211      	movs	r2, #17
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_ADC_Init+0x114>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f002 fcfa 	bl	80031fc <HAL_ADC_ConfigChannel>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800080c:	f001 fec4 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b004      	add	sp, #16
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000034 	.word	0x20000034
 800081c:	40012400 	.word	0x40012400

08000820 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08b      	sub	sp, #44	@ 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	2414      	movs	r4, #20
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f007 f891 	bl	800795a <memset>
  if(adcHandle->Instance==ADC1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a2d      	ldr	r2, [pc, #180]	@ (80008f4 <HAL_ADC_MspInit+0xd4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d153      	bne.n	80008ea <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	0089      	lsls	r1, r1, #2
 800084c:	430a      	orrs	r2, r1
 800084e:	619a      	str	r2, [r3, #24]
 8000850:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	221b      	movs	r2, #27
 800087e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2203      	movs	r2, #3
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	193a      	adds	r2, r7, r4
 800088e:	2390      	movs	r3, #144	@ 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f003 fb21 	bl	8003edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 800089c:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <HAL_ADC_MspInit+0xe0>)
 800089e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008bc:	2280      	movs	r2, #128	@ 0x80
 80008be:	00d2      	lsls	r2, r2, #3
 80008c0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f003 f8ed 	bl	8003ab0 <HAL_DMA_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80008da:	f001 fe5d 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b00b      	add	sp, #44	@ 0x2c
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	40012400 	.word	0x40012400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	20000074 	.word	0x20000074
 8000900:	40020008 	.word	0x40020008

08000904 <on_tx_done>:
volatile uint32_t g_frame_count = 0;  // <-- add this line here (global, not static)

//TX Buffer and State
static uint8_t tx_buf[TX_MAX_SIZE];
static volatile uint8_t tx_busy = 0;
static void on_tx_done(void){ tx_busy = 0; }
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <on_tx_done+0x10>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200003c8 	.word	0x200003c8

08000918 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){ if (huart==g_huart) on_tx_done(); }
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_UART_TxCpltCallback+0x20>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d101      	bne.n	800092e <HAL_UART_TxCpltCallback+0x16>
 800092a:	f7ff ffeb 	bl	8000904 <on_tx_done>
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	200000b8 	.word	0x200000b8

0800093c <put_u16le>:


/*** tiny helpers ***/

// --- little-endian writers ---
static void put_u16le(uint8_t *p, uint16_t v){ p[0]=(uint8_t)v; p[1]=(uint8_t)(v>>8); }
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	000a      	movs	r2, r1
 8000946:	1cbb      	adds	r3, r7, #2
 8000948:	801a      	strh	r2, [r3, #0]
 800094a:	1cbb      	adds	r3, r7, #2
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	1cbb      	adds	r3, r7, #2
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b29a      	uxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}

0800096c <put_u32le>:
static void put_u32le(uint8_t *p, uint32_t v){ p[0]=v; p[1]=v>>8; p[2]=v>>16; p[3]=v>>24; }
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	0a1a      	lsrs	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	0c1a      	lsrs	r2, r3, #16
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3302      	adds	r3, #2
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	0e1a      	lsrs	r2, r3, #24
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3303      	adds	r3, #3
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}

080009aa <tlv_put_u32>:

// --- tiny TLV writer, used for ping payload ---
uint8_t* tlv_put_u32(uint8_t *w, uint8_t type, uint32_t v){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	200b      	movs	r0, #11
 80009b6:	183b      	adds	r3, r7, r0
 80009b8:	1c0a      	adds	r2, r1, #0
 80009ba:	701a      	strb	r2, [r3, #0]
    *w++ = type; *w++ = 4; *w++ = 0;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60fa      	str	r2, [r7, #12]
 80009c2:	183a      	adds	r2, r7, r0
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60fa      	str	r2, [r7, #12]
 80009ce:	2204      	movs	r2, #4
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	60fa      	str	r2, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)v; *w++ = (uint8_t)(v>>8); *w++ = (uint8_t)(v>>16); *w++ = (uint8_t)(v>>24);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60fa      	str	r2, [r7, #12]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0a19      	lsrs	r1, r3, #8
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60fa      	str	r2, [r7, #12]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0c19      	lsrs	r1, r3, #16
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	60fa      	str	r2, [r7, #12]
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0e19      	lsrs	r1, r3, #24
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60fa      	str	r2, [r7, #12]
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
    return w;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b004      	add	sp, #16
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <tlv_put_i32>:

uint8_t* tlv_put_i32(uint8_t *w, uint8_t type, int32_t v){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	200b      	movs	r0, #11
 8000a28:	183b      	adds	r3, r7, r0
 8000a2a:	1c0a      	adds	r2, r1, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
    *w++ = type; *w++ = 4; *w++ = 0;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60fa      	str	r2, [r7, #12]
 8000a34:	183a      	adds	r2, r7, r0
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60fa      	str	r2, [r7, #12]
 8000a40:	2204      	movs	r2, #4
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60fa      	str	r2, [r7, #12]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v      );
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	60fa      	str	r2, [r7, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >>  8);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	1219      	asrs	r1, r3, #8
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	60fa      	str	r2, [r7, #12]
 8000a64:	b2ca      	uxtb	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 16);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	1419      	asrs	r1, r3, #16
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 24);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1619      	asrs	r1, r3, #24
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	60fa      	str	r2, [r7, #12]
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
    return w;
 8000a84:	68fb      	ldr	r3, [r7, #12]
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <crc32c>:

// --- CRC-32C (Castagnoli), small bitwise version ---
static uint32_t crc32c(const uint8_t *p, size_t n){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFFu;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	60fb      	str	r3, [r7, #12]
    while(n--){
 8000a9e:	e028      	b.n	8000af2 <crc32c+0x64>
        crc ^= *p++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4053      	eors	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
        for(int k=0;k<8;k++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	e01a      	b.n	8000aec <crc32c+0x5e>
            crc = (crc>>1) ^ (0x82F63B78u & (-(int)(crc & 1)));
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0858      	lsrs	r0, r3, #1
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	000b      	movs	r3, r1
 8000ac4:	025b      	lsls	r3, r3, #9
 8000ac6:	1a5b      	subs	r3, r3, r1
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	1a5b      	subs	r3, r3, r1
 8000acc:	009a      	lsls	r2, r3, #2
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	00da      	lsls	r2, r3, #3
 8000ad2:	1ad2      	subs	r2, r2, r3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	1852      	adds	r2, r2, r1
 8000ad8:	0152      	lsls	r2, r2, #5
 8000ada:	1852      	adds	r2, r2, r1
 8000adc:	0113      	lsls	r3, r2, #4
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4043      	eors	r3, r0
 8000ae4:	60fb      	str	r3, [r7, #12]
        for(int k=0;k<8;k++)
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b07      	cmp	r3, #7
 8000af0:	dde1      	ble.n	8000ab6 <crc32c+0x28>
    while(n--){
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	1e5a      	subs	r2, r3, #1
 8000af6:	603a      	str	r2, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1d1      	bne.n	8000aa0 <crc32c+0x12>
    }
    return ~crc;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43db      	mvns	r3, r3
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b004      	add	sp, #16
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <dma_head_now>:

// 1) ask the DMA "head" position (where it has written up to)
//    NDTR = remaining transfers; head = (size - NDTR) modulo size
static inline uint16_t dma_head_now(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
    uint16_t remaining = __HAL_DMA_GET_COUNTER(g_huart->hdmarx);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <dma_head_now+0x30>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	801a      	strh	r2, [r3, #0]
    return (uint16_t)((RX_DMA_SIZE - remaining) & (RX_DMA_SIZE - 1));
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	0ddb      	lsrs	r3, r3, #23
 8000b2c:	b29b      	uxth	r3, r3
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	200000b8 	.word	0x200000b8

08000b3c <circ_peek>:

// 2) read one byte from the circular buffer at index 'idx' (no consume)
static inline uint8_t circ_peek(uint16_t idx){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	801a      	strh	r2, [r3, #0]
    return rx_dma_buf[idx % RX_DMA_SIZE];
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0ddb      	lsrs	r3, r3, #23
 8000b50:	4a02      	ldr	r2, [pc, #8]	@ (8000b5c <circ_peek+0x20>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000bc 	.word	0x200000bc

08000b60 <circ_read>:

// copy N bytes from circular buffer at idx into linear dst
static void circ_read(uint16_t idx, uint8_t *dst, uint16_t n){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6039      	str	r1, [r7, #0]
 8000b68:	0011      	movs	r1, r2
 8000b6a:	1dbb      	adds	r3, r7, #6
 8000b6c:	1c02      	adds	r2, r0, #0
 8000b6e:	801a      	strh	r2, [r3, #0]
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	1c0a      	adds	r2, r1, #0
 8000b74:	801a      	strh	r2, [r3, #0]
    while (n--) { *dst++ = rx_dma_buf[idx++ % RX_DMA_SIZE]; }
 8000b76:	e00c      	b.n	8000b92 <circ_read+0x32>
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	1dba      	adds	r2, r7, #6
 8000b7e:	1c59      	adds	r1, r3, #1
 8000b80:	8011      	strh	r1, [r2, #0]
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	0dda      	lsrs	r2, r3, #23
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	1c59      	adds	r1, r3, #1
 8000b8a:	6039      	str	r1, [r7, #0]
 8000b8c:	4907      	ldr	r1, [pc, #28]	@ (8000bac <circ_read+0x4c>)
 8000b8e:	5c8a      	ldrb	r2, [r1, r2]
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	1d3a      	adds	r2, r7, #4
 8000b98:	1e59      	subs	r1, r3, #1
 8000b9a:	8011      	strh	r1, [r2, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1eb      	bne.n	8000b78 <circ_read+0x18>
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	200000bc 	.word	0x200000bc

08000bb0 <have_bytes>:

// how many bytes are available from 'from' to current head (modulo)
static int have_bytes(uint16_t from, uint16_t need){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	801a      	strh	r2, [r3, #0]
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	1c0a      	adds	r2, r1, #0
 8000bc0:	801a      	strh	r2, [r3, #0]
    int32_t avail = (int32_t)((rx_dma_head - from + RX_DMA_SIZE) % RX_DMA_SIZE);
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <have_bytes+0x54>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	001a      	movs	r2, r3
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <have_bytes+0x58>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d503      	bpl.n	8000be6 <have_bytes+0x36>
 8000bde:	3b01      	subs	r3, #1
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <have_bytes+0x5c>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
    return (avail >= (int32_t)need);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	17d0      	asrs	r0, r2, #31
 8000bf0:	0fd9      	lsrs	r1, r3, #31
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	4148      	adcs	r0, r1
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	b2db      	uxtb	r3, r3
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	200002bc 	.word	0x200002bc
 8000c08:	800001ff 	.word	0x800001ff
 8000c0c:	fffffe00 	.word	0xfffffe00

08000c10 <read_u16le_circ>:

// read little-endian u16 at circular position
static uint16_t read_u16le_circ(uint16_t idx){
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	801a      	strh	r2, [r3, #0]
    uint8_t b0 = circ_peek(idx);
 8000c1c:	250f      	movs	r5, #15
 8000c1e:	197c      	adds	r4, r7, r5
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff89 	bl	8000b3c <circ_peek>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	7023      	strb	r3, [r4, #0]
    uint8_t b1 = circ_peek((uint16_t)(idx+1));
 8000c2e:	1dbb      	adds	r3, r7, #6
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	260e      	movs	r6, #14
 8000c38:	19bc      	adds	r4, r7, r6
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff7e 	bl	8000b3c <circ_peek>
 8000c40:	0003      	movs	r3, r0
 8000c42:	7023      	strb	r3, [r4, #0]
    return (uint16_t)(b0 | ((uint16_t)b1<<8));
 8000c44:	197b      	adds	r3, r7, r5
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	19bb      	adds	r3, r7, r6
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	b29b      	uxth	r3, r3
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b005      	add	sp, #20
 8000c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c62 <tlv_find_u32>:
    }
    return 0;
}

int tlv_find_u32(const uint8_t *p, uint16_t len, uint8_t want_type, uint32_t *out)
{
 8000c62:	b5b0      	push	{r4, r5, r7, lr}
 8000c64:	b088      	sub	sp, #32
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	0008      	movs	r0, r1
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	230a      	movs	r3, #10
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	1c02      	adds	r2, r0, #0
 8000c76:	801a      	strh	r2, [r3, #0]
 8000c78:	2309      	movs	r3, #9
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	1c0a      	adds	r2, r1, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
    uint16_t i = 0;
 8000c80:	231e      	movs	r3, #30
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	801a      	strh	r2, [r3, #0]
    while (i + 3 <= len) {
 8000c88:	e05c      	b.n	8000d44 <tlv_find_u32+0xe2>
        uint8_t t = p[i];
 8000c8a:	201e      	movs	r0, #30
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	251d      	movs	r5, #29
 8000c96:	197b      	adds	r3, r7, r5
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
        uint16_t L = (uint16_t)(p[i+1] | (p[i+2] << 8));
 8000c9c:	183b      	adds	r3, r7, r0
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	183b      	adds	r3, r7, r0
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	18cb      	adds	r3, r1, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	241a      	movs	r4, #26
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	801a      	strh	r2, [r3, #0]
        i += 3;
 8000cc6:	0001      	movs	r1, r0
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	187a      	adds	r2, r7, r1
 8000ccc:	8812      	ldrh	r2, [r2, #0]
 8000cce:	3203      	adds	r2, #3
 8000cd0:	801a      	strh	r2, [r3, #0]
        if (i + L > len) break;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	881a      	ldrh	r2, [r3, #0]
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	18d2      	adds	r2, r2, r3
 8000cdc:	230a      	movs	r3, #10
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dc38      	bgt.n	8000d58 <tlv_find_u32+0xf6>
        if (t == want_type && L == 4) {
 8000ce6:	197a      	adds	r2, r7, r5
 8000ce8:	2309      	movs	r3, #9
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d11e      	bne.n	8000d32 <tlv_find_u32+0xd0>
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d11a      	bne.n	8000d32 <tlv_find_u32+0xd0>
            const uint8_t *v = &p[i];
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
            *out = (uint32_t)v[0] | ((uint32_t)v[1] << 8) | ((uint32_t)v[2] << 16) | ((uint32_t)v[3] << 24);
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	431a      	orrs	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3303      	adds	r3, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	061b      	lsls	r3, r3, #24
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
            return 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e014      	b.n	8000d5c <tlv_find_u32+0xfa>
        }
        i += L;
 8000d32:	221e      	movs	r2, #30
 8000d34:	18bb      	adds	r3, r7, r2
 8000d36:	18b9      	adds	r1, r7, r2
 8000d38:	221a      	movs	r2, #26
 8000d3a:	18ba      	adds	r2, r7, r2
 8000d3c:	8809      	ldrh	r1, [r1, #0]
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	188a      	adds	r2, r1, r2
 8000d42:	801a      	strh	r2, [r3, #0]
    while (i + 3 <= len) {
 8000d44:	231e      	movs	r3, #30
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	1c9a      	adds	r2, r3, #2
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	db99      	blt.n	8000c8a <tlv_find_u32+0x28>
 8000d56:	e000      	b.n	8000d5a <tlv_find_u32+0xf8>
        if (i + L > len) break;
 8000d58:	46c0      	nop			@ (mov r8, r8)
    }
    return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b008      	add	sp, #32
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}

08000d64 <tlv_put_u64>:

uint8_t* tlv_put_u64(uint8_t *w, uint8_t type, uint64_t v){
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b091      	sub	sp, #68	@ 0x44
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d70:	200b      	movs	r0, #11
 8000d72:	2630      	movs	r6, #48	@ 0x30
 8000d74:	1983      	adds	r3, r0, r6
 8000d76:	19da      	adds	r2, r3, r7
 8000d78:	1c0b      	adds	r3, r1, #0
 8000d7a:	7013      	strb	r3, [r2, #0]
    *w++ = type; *w++ = 8; *w++ = 0;
 8000d7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d7e:	1c53      	adds	r3, r2, #1
 8000d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d82:	1983      	adds	r3, r0, r6
 8000d84:	19db      	adds	r3, r3, r7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	7013      	strb	r3, [r2, #0]
 8000d8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d8c:	1c53      	adds	r3, r2, #1
 8000d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d90:	2308      	movs	r3, #8
 8000d92:	7013      	strb	r3, [r2, #0]
 8000d94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d96:	1c53      	adds	r3, r2, #1
 8000d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	7013      	strb	r3, [r2, #0]
    // little-endian
    *w++ = (uint8_t)(v      );
 8000d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000da0:	1c4b      	adds	r3, r1, #1
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da8:	1c13      	adds	r3, r2, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	700b      	strb	r3, [r1, #0]
    *w++ = (uint8_t)(v >>  8);
 8000dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db0:	061a      	lsls	r2, r3, #24
 8000db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000db4:	0a1c      	lsrs	r4, r3, #8
 8000db6:	4314      	orrs	r4, r2
 8000db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dba:	0a1d      	lsrs	r5, r3, #8
 8000dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dbe:	1c53      	adds	r3, r2, #1
 8000dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dc2:	b2e3      	uxtb	r3, r4
 8000dc4:	7013      	strb	r3, [r2, #0]
    *w++ = (uint8_t)(v >> 16);
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000de2:	2228      	movs	r2, #40	@ 0x28
 8000de4:	18ba      	adds	r2, r7, r2
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 24);
 8000dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000df0:	0e12      	lsrs	r2, r2, #24
 8000df2:	623a      	str	r2, [r7, #32]
 8000df4:	6a3a      	ldr	r2, [r7, #32]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	623a      	str	r2, [r7, #32]
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfc:	0e1b      	lsrs	r3, r3, #24
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e06:	2220      	movs	r2, #32
 8000e08:	18ba      	adds	r2, r7, r2
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 32);
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e10:	001b      	movs	r3, r3
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e1e:	7e3a      	ldrb	r2, [r7, #24]
 8000e20:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 40);
 8000e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e32:	7c3a      	ldrb	r2, [r7, #16]
 8000e34:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 48);
 8000e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e46:	7a3a      	ldrb	r2, [r7, #8]
 8000e48:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 56);
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4c:	0e1b      	lsrs	r3, r3, #24
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e5a:	783a      	ldrb	r2, [r7, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
    return w;
 8000e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b011      	add	sp, #68	@ 0x44
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e68 <tlv_find_u64>:

int tlv_find_u64(const uint8_t *p, uint16_t len, uint8_t want_type, uint64_t *out)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b0b3      	sub	sp, #204	@ 0xcc
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	26ac      	movs	r6, #172	@ 0xac
 8000e70:	19be      	adds	r6, r7, r6
 8000e72:	6030      	str	r0, [r6, #0]
 8000e74:	0010      	movs	r0, r2
 8000e76:	22a4      	movs	r2, #164	@ 0xa4
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	26a0      	movs	r6, #160	@ 0xa0
 8000e80:	199b      	adds	r3, r3, r6
 8000e82:	19da      	adds	r2, r3, r7
 8000e84:	1c0b      	adds	r3, r1, #0
 8000e86:	8013      	strh	r3, [r2, #0]
 8000e88:	2309      	movs	r3, #9
 8000e8a:	0031      	movs	r1, r6
 8000e8c:	185b      	adds	r3, r3, r1
 8000e8e:	19da      	adds	r2, r3, r7
 8000e90:	1c03      	adds	r3, r0, #0
 8000e92:	7013      	strb	r3, [r2, #0]
    uint16_t i = 0;
 8000e94:	2326      	movs	r3, #38	@ 0x26
 8000e96:	185b      	adds	r3, r3, r1
 8000e98:	19da      	adds	r2, r3, r7
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	8013      	strh	r3, [r2, #0]
    while (i + 3 <= len) {
 8000e9e:	e141      	b.n	8001124 <tlv_find_u64+0x2bc>
        uint8_t t = p[i];
 8000ea0:	2026      	movs	r0, #38	@ 0x26
 8000ea2:	26a0      	movs	r6, #160	@ 0xa0
 8000ea4:	1983      	adds	r3, r0, r6
 8000ea6:	19db      	adds	r3, r3, r7
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	21ac      	movs	r1, #172	@ 0xac
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	189b      	adds	r3, r3, r2
 8000eb2:	2225      	movs	r2, #37	@ 0x25
 8000eb4:	1992      	adds	r2, r2, r6
 8000eb6:	19d2      	adds	r2, r2, r7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	7013      	strb	r3, [r2, #0]
        uint16_t L = (uint16_t)(p[i+1] | (p[i+2] << 8));
 8000ebc:	1983      	adds	r3, r0, r6
 8000ebe:	19db      	adds	r3, r3, r7
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	189b      	adds	r3, r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b219      	sxth	r1, r3
 8000ece:	1983      	adds	r3, r0, r6
 8000ed0:	19db      	adds	r3, r3, r7
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	1c9a      	adds	r2, r3, #2
 8000ed6:	23ac      	movs	r3, #172	@ 0xac
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	189b      	adds	r3, r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	2622      	movs	r6, #34	@ 0x22
 8000eec:	22a0      	movs	r2, #160	@ 0xa0
 8000eee:	18b2      	adds	r2, r6, r2
 8000ef0:	19d2      	adds	r2, r2, r7
 8000ef2:	8013      	strh	r3, [r2, #0]
        i += 3;
 8000ef4:	0001      	movs	r1, r0
 8000ef6:	20a0      	movs	r0, #160	@ 0xa0
 8000ef8:	180a      	adds	r2, r1, r0
 8000efa:	19d2      	adds	r2, r2, r7
 8000efc:	180b      	adds	r3, r1, r0
 8000efe:	19db      	adds	r3, r3, r7
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	3303      	adds	r3, #3
 8000f04:	8013      	strh	r3, [r2, #0]
        if (i + L > len) break;
 8000f06:	180a      	adds	r2, r1, r0
 8000f08:	19d3      	adds	r3, r2, r7
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	1833      	adds	r3, r6, r0
 8000f0e:	19db      	adds	r3, r3, r7
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	18d2      	adds	r2, r2, r3
 8000f14:	230a      	movs	r3, #10
 8000f16:	181b      	adds	r3, r3, r0
 8000f18:	19db      	adds	r3, r3, r7
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dd00      	ble.n	8000f22 <tlv_find_u64+0xba>
 8000f20:	e10e      	b.n	8001140 <tlv_find_u64+0x2d8>
        if (t == want_type && L == 8) {
 8000f22:	2225      	movs	r2, #37	@ 0x25
 8000f24:	1812      	adds	r2, r2, r0
 8000f26:	19d2      	adds	r2, r2, r7
 8000f28:	2309      	movs	r3, #9
 8000f2a:	181b      	adds	r3, r3, r0
 8000f2c:	19db      	adds	r3, r3, r7
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d000      	beq.n	8000f38 <tlv_find_u64+0xd0>
 8000f36:	e0e7      	b.n	8001108 <tlv_find_u64+0x2a0>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	18b0      	adds	r0, r6, r2
 8000f3c:	19c3      	adds	r3, r0, r7
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d000      	beq.n	8000f46 <tlv_find_u64+0xde>
 8000f44:	e0e0      	b.n	8001108 <tlv_find_u64+0x2a0>
            const uint8_t *v = &p[i];
 8000f46:	188a      	adds	r2, r1, r2
 8000f48:	19d3      	adds	r3, r2, r7
 8000f4a:	881a      	ldrh	r2, [r3, #0]
 8000f4c:	21ac      	movs	r1, #172	@ 0xac
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	26bc      	movs	r6, #188	@ 0xbc
 8000f56:	19ba      	adds	r2, r7, r6
 8000f58:	6013      	str	r3, [r2, #0]
            uint64_t x =  ((uint64_t)v[0])        |
 8000f5a:	19bb      	adds	r3, r7, r6
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2290      	movs	r2, #144	@ 0x90
 8000f62:	18b9      	adds	r1, r7, r2
 8000f64:	600b      	str	r3, [r1, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	2194      	movs	r1, #148	@ 0x94
 8000f6a:	1879      	adds	r1, r7, r1
 8000f6c:	600b      	str	r3, [r1, #0]
                         (((uint64_t)v[1]) <<  8) |
 8000f6e:	19b9      	adds	r1, r7, r6
 8000f70:	680b      	ldr	r3, [r1, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2288      	movs	r2, #136	@ 0x88
 8000f78:	18b9      	adds	r1, r7, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	218c      	movs	r1, #140	@ 0x8c
 8000f80:	1879      	adds	r1, r7, r1
 8000f82:	600b      	str	r3, [r1, #0]
 8000f84:	18b9      	adds	r1, r7, r2
 8000f86:	684a      	ldr	r2, [r1, #4]
 8000f88:	6809      	ldr	r1, [r1, #0]
 8000f8a:	000b      	movs	r3, r1
 8000f8c:	0e1b      	lsrs	r3, r3, #24
 8000f8e:	0010      	movs	r0, r2
 8000f90:	0205      	lsls	r5, r0, #8
 8000f92:	431d      	orrs	r5, r3
 8000f94:	000b      	movs	r3, r1
 8000f96:	021c      	lsls	r4, r3, #8
            uint64_t x =  ((uint64_t)v[0])        |
 8000f98:	2390      	movs	r3, #144	@ 0x90
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	4321      	orrs	r1, r4
 8000fa4:	2080      	movs	r0, #128	@ 0x80
 8000fa6:	1838      	adds	r0, r7, r0
 8000fa8:	6001      	str	r1, [r0, #0]
 8000faa:	432b      	orrs	r3, r5
 8000fac:	2284      	movs	r2, #132	@ 0x84
 8000fae:	18ba      	adds	r2, r7, r2
 8000fb0:	6013      	str	r3, [r2, #0]
                         (((uint64_t)v[2]) << 16) |
 8000fb2:	19ba      	adds	r2, r7, r6
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000fc0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000fc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	0010      	movs	r0, r2
 8000fca:	0400      	lsls	r0, r0, #16
 8000fcc:	249c      	movs	r4, #156	@ 0x9c
 8000fce:	193d      	adds	r5, r7, r4
 8000fd0:	6028      	str	r0, [r5, #0]
 8000fd2:	193d      	adds	r5, r7, r4
 8000fd4:	6828      	ldr	r0, [r5, #0]
 8000fd6:	4318      	orrs	r0, r3
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	6020      	str	r0, [r4, #0]
 8000fdc:	000b      	movs	r3, r1
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	2498      	movs	r4, #152	@ 0x98
 8000fe2:	193a      	adds	r2, r7, r4
 8000fe4:	6013      	str	r3, [r2, #0]
                         (((uint64_t)v[1]) <<  8) |
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	0008      	movs	r0, r1
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	685c      	ldr	r4, [r3, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	001d      	movs	r5, r3
 8000ff8:	4328      	orrs	r0, r5
 8000ffa:	6738      	str	r0, [r7, #112]	@ 0x70
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	431a      	orrs	r2, r3
 8001000:	677a      	str	r2, [r7, #116]	@ 0x74
                         (((uint64_t)v[3]) << 24) |
 8001002:	19bb      	adds	r3, r7, r6
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3303      	adds	r3, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800100c:	2300      	movs	r3, #0
 800100e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001012:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8001014:	001a      	movs	r2, r3
 8001016:	0a12      	lsrs	r2, r2, #8
 8001018:	667a      	str	r2, [r7, #100]	@ 0x64
 800101a:	061b      	lsls	r3, r3, #24
 800101c:	663b      	str	r3, [r7, #96]	@ 0x60
                         (((uint64_t)v[2]) << 16) |
 800101e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001020:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001022:	0008      	movs	r0, r1
 8001024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001026:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8001028:	001d      	movs	r5, r3
 800102a:	4328      	orrs	r0, r5
 800102c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800102e:	0023      	movs	r3, r4
 8001030:	431a      	orrs	r2, r3
 8001032:	65fa      	str	r2, [r7, #92]	@ 0x5c
                         (((uint64_t)v[4]) << 32) |
 8001034:	19bb      	adds	r3, r7, r6
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	653b      	str	r3, [r7, #80]	@ 0x50
 800103e:	2300      	movs	r3, #0
 8001040:	657b      	str	r3, [r7, #84]	@ 0x54
 8001042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001044:	001b      	movs	r3, r3
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001048:	2300      	movs	r3, #0
 800104a:	64bb      	str	r3, [r7, #72]	@ 0x48
                         (((uint64_t)v[3]) << 24) |
 800104c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800104e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001050:	0008      	movs	r0, r1
 8001052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001054:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001056:	001d      	movs	r5, r3
 8001058:	4328      	orrs	r0, r5
 800105a:	6438      	str	r0, [r7, #64]	@ 0x40
 800105c:	0023      	movs	r3, r4
 800105e:	431a      	orrs	r2, r3
 8001060:	647a      	str	r2, [r7, #68]	@ 0x44
                         (((uint64_t)v[5]) << 40) |
 8001062:	19bb      	adds	r3, r7, r6
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3305      	adds	r3, #5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
                         (((uint64_t)v[4]) << 32) |
 800107a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800107c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800107e:	0008      	movs	r0, r1
 8001080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001082:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001084:	001d      	movs	r5, r3
 8001086:	4328      	orrs	r0, r5
 8001088:	62b8      	str	r0, [r7, #40]	@ 0x28
 800108a:	0023      	movs	r3, r4
 800108c:	431a      	orrs	r2, r3
 800108e:	62fa      	str	r2, [r7, #44]	@ 0x2c
                         (((uint64_t)v[6]) << 48) |
 8001090:	19bb      	adds	r3, r7, r6
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3306      	adds	r3, #6
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
                         (((uint64_t)v[5]) << 40) |
 80010a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010ac:	0008      	movs	r0, r1
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	69fc      	ldr	r4, [r7, #28]
 80010b2:	001d      	movs	r5, r3
 80010b4:	4328      	orrs	r0, r5
 80010b6:	6138      	str	r0, [r7, #16]
 80010b8:	0023      	movs	r3, r4
 80010ba:	431a      	orrs	r2, r3
 80010bc:	617a      	str	r2, [r7, #20]
                         (((uint64_t)v[7]) << 56);
 80010be:	19bb      	adds	r3, r7, r6
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3307      	adds	r3, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	061b      	lsls	r3, r3, #24
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
            uint64_t x =  ((uint64_t)v[0])        |
 80010d6:	693c      	ldr	r4, [r7, #16]
 80010d8:	697d      	ldr	r5, [r7, #20]
 80010da:	0023      	movs	r3, r4
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	0008      	movs	r0, r1
 80010e2:	4303      	orrs	r3, r0
 80010e4:	20b0      	movs	r0, #176	@ 0xb0
 80010e6:	183e      	adds	r6, r7, r0
 80010e8:	6033      	str	r3, [r6, #0]
 80010ea:	002b      	movs	r3, r5
 80010ec:	4313      	orrs	r3, r2
 80010ee:	22b4      	movs	r2, #180	@ 0xb4
 80010f0:	18ba      	adds	r2, r7, r2
 80010f2:	6013      	str	r3, [r2, #0]
            *out = x;
 80010f4:	23a4      	movs	r3, #164	@ 0xa4
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	183b      	adds	r3, r7, r0
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	600a      	str	r2, [r1, #0]
 8001102:	604b      	str	r3, [r1, #4]
            return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e01d      	b.n	8001144 <tlv_find_u64+0x2dc>
        }
        i += L;
 8001108:	2326      	movs	r3, #38	@ 0x26
 800110a:	22a0      	movs	r2, #160	@ 0xa0
 800110c:	1899      	adds	r1, r3, r2
 800110e:	19c9      	adds	r1, r1, r7
 8001110:	0010      	movs	r0, r2
 8001112:	189b      	adds	r3, r3, r2
 8001114:	19da      	adds	r2, r3, r7
 8001116:	2322      	movs	r3, #34	@ 0x22
 8001118:	181b      	adds	r3, r3, r0
 800111a:	19db      	adds	r3, r3, r7
 800111c:	8812      	ldrh	r2, [r2, #0]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	800b      	strh	r3, [r1, #0]
    while (i + 3 <= len) {
 8001124:	2326      	movs	r3, #38	@ 0x26
 8001126:	21a0      	movs	r1, #160	@ 0xa0
 8001128:	185b      	adds	r3, r3, r1
 800112a:	19db      	adds	r3, r3, r7
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	230a      	movs	r3, #10
 8001132:	185b      	adds	r3, r3, r1
 8001134:	19db      	adds	r3, r3, r7
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	da00      	bge.n	800113e <tlv_find_u64+0x2d6>
 800113c:	e6b0      	b.n	8000ea0 <tlv_find_u64+0x38>
 800113e:	e000      	b.n	8001142 <tlv_find_u64+0x2da>
        if (i + L > len) break;
 8001140:	46c0      	nop			@ (mov r8, r8)
    }
    return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b033      	add	sp, #204	@ 0xcc
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800114c <next_seq>:


/*** public API ***/

static uint8_t next_seq(void){ static uint8_t s=0; return ++s; }
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <next_seq+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <next_seq+0x1c>)
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <next_seq+0x1c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	200003c9 	.word	0x200003c9

0800116c <comm_send>:
enum { COMM_START_BYTE = 0x45, COMM_HDR_SIZE = 8, COMM_VER = 0x01 };

int comm_send(uint8_t rx_id, uint8_t tx_id, uint8_t msg_type,
              uint8_t flags, uint8_t reqid,
              const uint8_t *payload, uint16_t payload_len)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	0005      	movs	r5, r0
 8001174:	000c      	movs	r4, r1
 8001176:	0010      	movs	r0, r2
 8001178:	0019      	movs	r1, r3
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	1c2a      	adds	r2, r5, #0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	1c22      	adds	r2, r4, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	1d7b      	adds	r3, r7, #5
 8001188:	1c02      	adds	r2, r0, #0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	1c0a      	adds	r2, r1, #0
 8001190:	701a      	strb	r2, [r3, #0]
    const uint16_t total = 1 + 2 + COMM_HDR_SIZE + payload_len + 4;
 8001192:	2116      	movs	r1, #22
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2230      	movs	r2, #48	@ 0x30
 8001198:	18ba      	adds	r2, r7, r2
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	320f      	adds	r2, #15
 800119e:	801a      	strh	r2, [r3, #0]
    if (total > TX_MAX_SIZE) return -1;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d902      	bls.n	80011b2 <comm_send+0x46>
 80011ac:	2301      	movs	r3, #1
 80011ae:	425b      	negs	r3, r3
 80011b0:	e086      	b.n	80012c0 <comm_send+0x154>

    // ---> reserve the TX buffer BEFORE writing into it
	while (tx_busy) { /* spin or yield */ }
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <comm_send+0x15c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1fa      	bne.n	80011b4 <comm_send+0x48>
	tx_busy = 1;
 80011be:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <comm_send+0x15c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]

    uint8_t *w = tx_buf;
 80011c4:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <comm_send+0x160>)
 80011c6:	613b      	str	r3, [r7, #16]
    *w++ = COMM_START_BYTE;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	613a      	str	r2, [r7, #16]
 80011ce:	2245      	movs	r2, #69	@ 0x45
 80011d0:	701a      	strb	r2, [r3, #0]
    put_u16le(w, total); w += 2;
 80011d2:	2316      	movs	r3, #22
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fbad 	bl	800093c <put_u16le>
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3302      	adds	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

    const uint8_t seq = next_seq();
 80011e8:	250f      	movs	r5, #15
 80011ea:	197c      	adds	r4, r7, r5
 80011ec:	f7ff ffae 	bl	800114c <next_seq>
 80011f0:	0003      	movs	r3, r0
 80011f2:	7023      	strb	r3, [r4, #0]
    *w++ = rx_id; *w++ = tx_id; *w++ = msg_type; *w++ = COMM_VER;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	613a      	str	r2, [r7, #16]
 80011fa:	1dfa      	adds	r2, r7, #7
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	613a      	str	r2, [r7, #16]
 8001206:	1dba      	adds	r2, r7, #6
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	613a      	str	r2, [r7, #16]
 8001212:	1d7a      	adds	r2, r7, #5
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	613a      	str	r2, [r7, #16]
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    *w++ = 0x01;  /* flags: FINAL bit set */
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	613a      	str	r2, [r7, #16]
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
    *w++ = seq;
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	613a      	str	r2, [r7, #16]
 8001232:	197a      	adds	r2, r7, r5
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	701a      	strb	r2, [r3, #0]
    *w++ = reqid;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	613a      	str	r2, [r7, #16]
 800123e:	2228      	movs	r2, #40	@ 0x28
 8001240:	18ba      	adds	r2, r7, r2
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
    *w++ = 0;     /* reserved */
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	613a      	str	r2, [r7, #16]
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

    if (payload_len && payload) memcpy(w, payload, payload_len);
 8001250:	2230      	movs	r2, #48	@ 0x30
 8001252:	18bb      	adds	r3, r7, r2
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <comm_send+0x102>
 800125a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <comm_send+0x102>
 8001260:	18bb      	adds	r3, r7, r2
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	0018      	movs	r0, r3
 800126a:	f006 fba3 	bl	80079b4 <memcpy>

    uint32_t crc = crc32c(tx_buf, 1+2+COMM_HDR_SIZE+payload_len);
 800126e:	2430      	movs	r4, #48	@ 0x30
 8001270:	193b      	adds	r3, r7, r4
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	330b      	adds	r3, #11
 8001276:	001a      	movs	r2, r3
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <comm_send+0x160>)
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff fc06 	bl	8000a8e <crc32c>
 8001282:	0003      	movs	r3, r0
 8001284:	60bb      	str	r3, [r7, #8]
    put_u32le(tx_buf + (1+2+COMM_HDR_SIZE+payload_len), crc);
 8001286:	193b      	adds	r3, r7, r4
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	330b      	adds	r3, #11
 800128c:	001a      	movs	r2, r3
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <comm_send+0x160>)
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff fb68 	bl	800096c <put_u32le>

    if (HAL_UART_Transmit_DMA(g_huart, tx_buf, total) != HAL_OK){
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <comm_send+0x164>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	2316      	movs	r3, #22
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <comm_send+0x160>)
 80012a8:	0019      	movs	r1, r3
 80012aa:	f005 f9a9 	bl	8006600 <HAL_UART_Transmit_DMA>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d005      	beq.n	80012be <comm_send+0x152>
        tx_busy = 0; return -2;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <comm_send+0x15c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	425b      	negs	r3, r3
 80012bc:	e000      	b.n	80012c0 <comm_send+0x154>
    }
    return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b006      	add	sp, #24
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	200003c8 	.word	0x200003c8
 80012cc:	200002c8 	.word	0x200002c8
 80012d0:	200000b8 	.word	0x200000b8

080012d4 <comm_init>:

void comm_init(UART_HandleTypeDef *huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <comm_init+0x48>)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
    rx_dma_head = 0;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <comm_init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]
    rx_cons = 0;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <comm_init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]

    // start continuous RX into our circular buffer
    HAL_UART_Receive_DMA(g_huart, rx_dma_buf, RX_DMA_SIZE);
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <comm_init+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	490c      	ldr	r1, [pc, #48]	@ (8001328 <comm_init+0x54>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f005 fa11 	bl	8006720 <HAL_UART_Receive_DMA>

    // enable IDLE-line interrupt so we get poked when a burst of bytes ends
    __HAL_UART_ENABLE_IT(g_huart, UART_IT_IDLE);
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <comm_init+0x48>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <comm_init+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2110      	movs	r1, #16
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	200000b8 	.word	0x200000b8
 8001320:	200002bc 	.word	0x200002bc
 8001324:	200002be 	.word	0x200002be
 8001328:	200000bc 	.word	0x200000bc

0800132c <comm_on_uart_idle_irq>:

void comm_on_uart_idle_irq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    // acknowledge the IDLE event and snapshot the new DMA head
    __HAL_UART_CLEAR_IDLEFLAG(g_huart);
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <comm_on_uart_idle_irq+0x20>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2210      	movs	r2, #16
 8001338:	621a      	str	r2, [r3, #32]
    rx_dma_head = dma_head_now();
 800133a:	f7ff fbe5 	bl	8000b08 <dma_head_now>
 800133e:	0003      	movs	r3, r0
 8001340:	001a      	movs	r2, r3
 8001342:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <comm_on_uart_idle_irq+0x24>)
 8001344:	801a      	strh	r2, [r3, #0]

    // (nothing else yet — we’ll parse in comm_poll() in a later step)
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000b8 	.word	0x200000b8
 8001350:	200002bc 	.word	0x200002bc

08001354 <deliver_checked>:

static void deliver_checked(const uint8_t *frame, uint16_t len){
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	000a      	movs	r2, r1
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	801a      	strh	r2, [r3, #0]
    if (len < (1+2+COMM_HDR_SIZE+4)) return;            // min size check
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b0e      	cmp	r3, #14
 8001368:	d800      	bhi.n	800136c <deliver_checked+0x18>
 800136a:	e082      	b.n	8001472 <deliver_checked+0x11e>
    if (frame[0] != COMM_START_BYTE) return;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b45      	cmp	r3, #69	@ 0x45
 8001372:	d000      	beq.n	8001376 <deliver_checked+0x22>
 8001374:	e07f      	b.n	8001476 <deliver_checked+0x122>

    uint16_t L = (uint16_t)(frame[1] | (frame[2]<<8));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b21a      	sxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3302      	adds	r3, #2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b21b      	sxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	2126      	movs	r1, #38	@ 0x26
 8001390:	187b      	adds	r3, r7, r1
 8001392:	801a      	strh	r2, [r3, #0]
    if (L != len) return;
 8001394:	187a      	adds	r2, r7, r1
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d16c      	bne.n	800147a <deliver_checked+0x126>

    // CRC check: over Start..end-of-payload
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 80013a0:	1cbb      	adds	r3, r7, #2
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	3b04      	subs	r3, #4
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	0019      	movs	r1, r3
 80013ae:	1cbb      	adds	r3, r7, #2
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	3b03      	subs	r3, #3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	18d3      	adds	r3, r2, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	000a      	movs	r2, r1
 80013be:	431a      	orrs	r2, r3
                      ((uint32_t)frame[len-2]<<16) | ((uint32_t)frame[len-1]<<24);
 80013c0:	1cbb      	adds	r3, r7, #2
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	18cb      	adds	r3, r1, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	041b      	lsls	r3, r3, #16
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 80013ce:	431a      	orrs	r2, r3
                      ((uint32_t)frame[len-2]<<16) | ((uint32_t)frame[len-1]<<24);
 80013d0:	1cbb      	adds	r3, r7, #2
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	18cb      	adds	r3, r1, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	061b      	lsls	r3, r3, #24
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 80013de:	4313      	orrs	r3, r2
 80013e0:	623b      	str	r3, [r7, #32]
    uint32_t crc = crc32c(frame, len-4);
 80013e2:	1cbb      	adds	r3, r7, #2
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	3b04      	subs	r3, #4
 80013e8:	001a      	movs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0011      	movs	r1, r2
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fb4d 	bl	8000a8e <crc32c>
 80013f4:	0003      	movs	r3, r0
 80013f6:	61fb      	str	r3, [r7, #28]
    if (crc != crc_rx) return;
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d13e      	bne.n	800147e <deliver_checked+0x12a>

    // Build parsed view
    comm_frame_t f;
    f.rx_id = frame[3]; f.tx_id = frame[4]; f.msg_type = frame[5]; f.ver = frame[6];
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3303      	adds	r3, #3
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	210c      	movs	r1, #12
 8001408:	187b      	adds	r3, r7, r1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3304      	adds	r3, #4
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	187b      	adds	r3, r7, r1
 8001414:	705a      	strb	r2, [r3, #1]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3305      	adds	r3, #5
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	709a      	strb	r2, [r3, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3306      	adds	r3, #6
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	187b      	adds	r3, r7, r1
 8001428:	70da      	strb	r2, [r3, #3]
    f.flags = frame[7]; f.seq = frame[8]; f.reqid = frame[9]; f.rsv = frame[10];
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3307      	adds	r3, #7
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	187b      	adds	r3, r7, r1
 8001432:	711a      	strb	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3308      	adds	r3, #8
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	187b      	adds	r3, r7, r1
 800143c:	715a      	strb	r2, [r3, #5]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3309      	adds	r3, #9
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	187b      	adds	r3, r7, r1
 8001446:	719a      	strb	r2, [r3, #6]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	330a      	adds	r3, #10
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	187b      	adds	r3, r7, r1
 8001450:	71da      	strb	r2, [r3, #7]
    f.payload = &frame[11];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	330b      	adds	r3, #11
 8001456:	001a      	movs	r2, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	609a      	str	r2, [r3, #8]
    f.payload_len = (uint16_t)(len - (1+2+COMM_HDR_SIZE) - 4);
 800145c:	1cbb      	adds	r3, r7, #2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	3b0f      	subs	r3, #15
 8001462:	b29a      	uxth	r2, r3
 8001464:	187b      	adds	r3, r7, r1
 8001466:	819a      	strh	r2, [r3, #12]

    comm_on_frame(&f);
 8001468:	187b      	adds	r3, r7, r1
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fcd8 	bl	8001e20 <comm_on_frame>
 8001470:	e006      	b.n	8001480 <deliver_checked+0x12c>
    if (len < (1+2+COMM_HDR_SIZE+4)) return;            // min size check
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	e004      	b.n	8001480 <deliver_checked+0x12c>
    if (frame[0] != COMM_START_BYTE) return;
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	e002      	b.n	8001480 <deliver_checked+0x12c>
    if (L != len) return;
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	e000      	b.n	8001480 <deliver_checked+0x12c>
    if (crc != crc_rx) return;
 800147e:	46c0      	nop			@ (mov r8, r8)
}
 8001480:	46bd      	mov	sp, r7
 8001482:	b00a      	add	sp, #40	@ 0x28
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <comm_poll>:

void comm_poll(void)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
	while (rx_cons != rx_dma_head){
 800148e:	e09d      	b.n	80015cc <comm_poll+0x144>
	        switch (pstate){
 8001490:	4b56      	ldr	r3, [pc, #344]	@ (80015ec <comm_poll+0x164>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d100      	bne.n	800149a <comm_poll+0x12>
 8001498:	e069      	b.n	800156e <comm_poll+0xe6>
 800149a:	dd00      	ble.n	800149e <comm_poll+0x16>
 800149c:	e096      	b.n	80015cc <comm_poll+0x144>
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <comm_poll+0x20>
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d02d      	beq.n	8001502 <comm_poll+0x7a>
 80014a6:	e091      	b.n	80015cc <comm_poll+0x144>

	        case S_FIND_START: {
	            uint8_t b = circ_peek(rx_cons);
 80014a8:	4b51      	ldr	r3, [pc, #324]	@ (80015f0 <comm_poll+0x168>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	1d7c      	adds	r4, r7, #5
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff fb44 	bl	8000b3c <circ_peek>
 80014b4:	0003      	movs	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]
	            rx_cons = (uint16_t)((rx_cons + 1) % RX_DMA_SIZE);
 80014b8:	4b4d      	ldr	r3, [pc, #308]	@ (80015f0 <comm_poll+0x168>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a4d      	ldr	r2, [pc, #308]	@ (80015f4 <comm_poll+0x16c>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	d503      	bpl.n	80014cc <comm_poll+0x44>
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4a4c      	ldr	r2, [pc, #304]	@ (80015f8 <comm_poll+0x170>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <comm_poll+0x168>)
 80014d0:	801a      	strh	r2, [r3, #0]
	            if (b == 0x45) {  // COMM_START_BYTE later
 80014d2:	1d7b      	adds	r3, r7, #5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b45      	cmp	r3, #69	@ 0x45
 80014d8:	d000      	beq.n	80014dc <comm_poll+0x54>
 80014da:	e076      	b.n	80015ca <comm_poll+0x142>
	                start_pos = (uint16_t)((rx_cons - 1 + RX_DMA_SIZE) % RX_DMA_SIZE);
 80014dc:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <comm_poll+0x168>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4a46      	ldr	r2, [pc, #280]	@ (80015fc <comm_poll+0x174>)
 80014e2:	4694      	mov	ip, r2
 80014e4:	4463      	add	r3, ip
 80014e6:	4a43      	ldr	r2, [pc, #268]	@ (80015f4 <comm_poll+0x16c>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	d503      	bpl.n	80014f4 <comm_poll+0x6c>
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a42      	ldr	r2, [pc, #264]	@ (80015f8 <comm_poll+0x170>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	3301      	adds	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <comm_poll+0x178>)
 80014f8:	801a      	strh	r2, [r3, #0]
	                pstate = S_READ_LEN;
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <comm_poll+0x164>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
	            }
	        } break;
 8001500:	e063      	b.n	80015ca <comm_poll+0x142>

	        case S_READ_LEN: {
	            // need Start + 2 bytes of length available
	            if (!have_bytes(start_pos, 3)) return;  // wait for more
 8001502:	4b3f      	ldr	r3, [pc, #252]	@ (8001600 <comm_poll+0x178>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2103      	movs	r1, #3
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fb51 	bl	8000bb0 <have_bytes>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d100      	bne.n	8001514 <comm_poll+0x8c>
 8001512:	e064      	b.n	80015de <comm_poll+0x156>
	            uint16_t L = read_u16le_circ((uint16_t)(start_pos + 1));
 8001514:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <comm_poll+0x178>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	b29b      	uxth	r3, r3
 800151c:	1dbc      	adds	r4, r7, #6
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff fb76 	bl	8000c10 <read_u16le_circ>
 8001524:	0003      	movs	r3, r0
 8001526:	8023      	strh	r3, [r4, #0]

	            // sanity window: min 15 bytes (Start+Len+8B header+4B CRC), max 512 for now
	            if (L < 15 || L > 512){
 8001528:	1dbb      	adds	r3, r7, #6
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	2b0e      	cmp	r3, #14
 800152e:	d905      	bls.n	800153c <comm_poll+0xb4>
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d910      	bls.n	800155e <comm_poll+0xd6>
	                // bad length -> resync by shifting one byte
	                start_pos = (uint16_t)((start_pos + 1) % RX_DMA_SIZE);
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <comm_poll+0x178>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a2c      	ldr	r2, [pc, #176]	@ (80015f4 <comm_poll+0x16c>)
 8001544:	4013      	ands	r3, r2
 8001546:	d503      	bpl.n	8001550 <comm_poll+0xc8>
 8001548:	3b01      	subs	r3, #1
 800154a:	4a2b      	ldr	r2, [pc, #172]	@ (80015f8 <comm_poll+0x170>)
 800154c:	4313      	orrs	r3, r2
 800154e:	3301      	adds	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <comm_poll+0x178>)
 8001554:	801a      	strh	r2, [r3, #0]
	                pstate = S_FIND_START;
 8001556:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <comm_poll+0x164>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
	                break;
 800155c:	e036      	b.n	80015cc <comm_poll+0x144>
	            }
	            want_len = L;
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <comm_poll+0x17c>)
 8001560:	1dba      	adds	r2, r7, #6
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	801a      	strh	r2, [r3, #0]
	            pstate = S_READ_FRAME;
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <comm_poll+0x164>)
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
	        } break;
 800156c:	e02e      	b.n	80015cc <comm_poll+0x144>

	        case S_READ_FRAME: {
	            if (!have_bytes(start_pos, want_len)) return;  // not all bytes here yet
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <comm_poll+0x178>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <comm_poll+0x17c>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	0019      	movs	r1, r3
 8001578:	0010      	movs	r0, r2
 800157a:	f7ff fb19 	bl	8000bb0 <have_bytes>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d02f      	beq.n	80015e2 <comm_poll+0x15a>

	            static uint8_t scratch[TX_MAX_SIZE];
	            if (want_len <= sizeof(scratch)){
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <comm_poll+0x17c>)
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	429a      	cmp	r2, r3
 800158c:	d80e      	bhi.n	80015ac <comm_poll+0x124>
	                circ_read(start_pos, scratch, want_len);
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <comm_poll+0x178>)
 8001590:	8818      	ldrh	r0, [r3, #0]
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <comm_poll+0x17c>)
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <comm_poll+0x180>)
 8001598:	0019      	movs	r1, r3
 800159a:	f7ff fae1 	bl	8000b60 <circ_read>
	                deliver_checked(scratch, want_len);
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <comm_poll+0x17c>)
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <comm_poll+0x180>)
 80015a4:	0011      	movs	r1, r2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fed4 	bl	8001354 <deliver_checked>
	            }

	            // advance past the frame and search again
	            rx_cons = (uint16_t)((start_pos + want_len) % RX_DMA_SIZE);
 80015ac:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <comm_poll+0x178>)
 80015ae:	881a      	ldrh	r2, [r3, #0]
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <comm_poll+0x17c>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	0ddb      	lsrs	r3, r3, #23
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <comm_poll+0x168>)
 80015c0:	801a      	strh	r2, [r3, #0]
	            pstate = S_FIND_START;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <comm_poll+0x164>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	        } break;
 80015c8:	e000      	b.n	80015cc <comm_poll+0x144>
	        } break;
 80015ca:	46c0      	nop			@ (mov r8, r8)
	while (rx_cons != rx_dma_head){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <comm_poll+0x168>)
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <comm_poll+0x184>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d000      	beq.n	80015dc <comm_poll+0x154>
 80015da:	e759      	b.n	8001490 <comm_poll+0x8>
 80015dc:	e002      	b.n	80015e4 <comm_poll+0x15c>
	            if (!have_bytes(start_pos, 3)) return;  // wait for more
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	e000      	b.n	80015e4 <comm_poll+0x15c>
	            if (!have_bytes(start_pos, want_len)) return;  // not all bytes here yet
 80015e2:	46c0      	nop			@ (mov r8, r8)

	        } // switch
	    }
}
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b003      	add	sp, #12
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	200002c0 	.word	0x200002c0
 80015f0:	200002be 	.word	0x200002be
 80015f4:	800001ff 	.word	0x800001ff
 80015f8:	fffffe00 	.word	0xfffffe00
 80015fc:	000001ff 	.word	0x000001ff
 8001600:	200002c2 	.word	0x200002c2
 8001604:	200002c4 	.word	0x200002c4
 8001608:	200003cc 	.word	0x200003cc
 800160c:	200002bc 	.word	0x200002bc

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_DMA_Init+0x48>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_DMA_Init+0x48>)
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <MX_DMA_Init+0x48>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2201      	movs	r2, #1
 8001628:	4013      	ands	r3, r2
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2009      	movs	r0, #9
 8001634:	f002 fa0a 	bl	8003a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001638:	2009      	movs	r0, #9
 800163a:	f002 fa1c 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	200a      	movs	r0, #10
 8001644:	f002 fa02 	bl	8003a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001648:	200a      	movs	r0, #10
 800164a:	f002 fa14 	bl	8003a76 <HAL_NVIC_EnableIRQ>

}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	40021000 	.word	0x40021000

0800165c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	240c      	movs	r4, #12
 8001664:	193b      	adds	r3, r7, r4
 8001666:	0018      	movs	r0, r3
 8001668:	2314      	movs	r3, #20
 800166a:	001a      	movs	r2, r3
 800166c:	2100      	movs	r1, #0
 800166e:	f006 f974 	bl	800795a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <MX_GPIO_Init+0xe0>)
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <MX_GPIO_Init+0xe0>)
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	03c9      	lsls	r1, r1, #15
 800167c:	430a      	orrs	r2, r1
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <MX_GPIO_Init+0xe0>)
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	03db      	lsls	r3, r3, #15
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <MX_GPIO_Init+0xe0>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <MX_GPIO_Init+0xe0>)
 8001694:	2180      	movs	r1, #128	@ 0x80
 8001696:	0289      	lsls	r1, r1, #10
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <MX_GPIO_Init+0xe0>)
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	029b      	lsls	r3, r3, #10
 80016a4:	4013      	ands	r3, r2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b24      	ldr	r3, [pc, #144]	@ (800173c <MX_GPIO_Init+0xe0>)
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <MX_GPIO_Init+0xe0>)
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	02c9      	lsls	r1, r1, #11
 80016b4:	430a      	orrs	r2, r1
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <MX_GPIO_Init+0xe0>)
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	02db      	lsls	r3, r3, #11
 80016c0:	4013      	ands	r3, r2
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <MX_GPIO_Init+0xe4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	2101      	movs	r1, #1
 80016cc:	0018      	movs	r0, r3
 80016ce:	f002 fd8a 	bl	80041e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	2203      	movs	r2, #3
 80016dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <MX_GPIO_Init+0xe8>)
 80016e8:	0019      	movs	r1, r3
 80016ea:	0010      	movs	r0, r2
 80016ec:	f002 fbf6 	bl	8003edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	2201      	movs	r2, #1
 80016fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	193b      	adds	r3, r7, r4
 800170a:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <MX_GPIO_Init+0xe4>)
 800170c:	0019      	movs	r1, r3
 800170e:	0010      	movs	r0, r2
 8001710:	f002 fbe4 	bl	8003edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001714:	0021      	movs	r1, r4
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2201      	movs	r2, #1
 8001726:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	187b      	adds	r3, r7, r1
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <MX_GPIO_Init+0xe4>)
 800172c:	0019      	movs	r1, r3
 800172e:	0010      	movs	r0, r2
 8001730:	f002 fbd4 	bl	8003edc <HAL_GPIO_Init>

}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b009      	add	sp, #36	@ 0x24
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400
 8001744:	48001400 	.word	0x48001400

08001748 <hx711_udelay_ticks>:

#include "hx711.h"

// small ~sub-microsecond delay; exact value not critical.
// We only need to ensure SCK high time is short (<60us).
static inline void hx711_udelay_ticks(int n){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  for (volatile int i = 0; i < n; i++) __NOP();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e003      	b.n	800175e <hx711_udelay_ticks+0x16>
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	dcf7      	bgt.n	8001756 <hx711_udelay_ticks+0xe>
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}

08001770 <hx711_sck_high>:
static inline void hx711_sck_high(void){ HAL_GPIO_WritePin(HX711_SCK_GPIO, HX711_SCK_PIN, GPIO_PIN_SET); }
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <hx711_sck_high+0x18>)
 8001776:	2201      	movs	r2, #1
 8001778:	2101      	movs	r1, #1
 800177a:	0018      	movs	r0, r3
 800177c:	f002 fd33 	bl	80041e6 <HAL_GPIO_WritePin>
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	48000400 	.word	0x48000400

0800178c <hx711_sck_low>:
static inline void hx711_sck_low (void){ HAL_GPIO_WritePin(HX711_SCK_GPIO, HX711_SCK_PIN, GPIO_PIN_RESET); }
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <hx711_sck_low+0x18>)
 8001792:	2200      	movs	r2, #0
 8001794:	2101      	movs	r1, #1
 8001796:	0018      	movs	r0, r3
 8001798:	f002 fd25 	bl	80041e6 <HAL_GPIO_WritePin>
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	48000400 	.word	0x48000400

080017a8 <hx711_dout>:
static inline int  hx711_dout(void){ return HAL_GPIO_ReadPin(HX711_DOUT_GPIO, HX711_DOUT_PIN) ? 1 : 0; }
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <hx711_dout+0x1c>)
 80017ae:	2102      	movs	r1, #2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f002 fcfb 	bl	80041ac <HAL_GPIO_ReadPin>
 80017b6:	0003      	movs	r3, r0
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	4193      	sbcs	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	48000400 	.word	0x48000400

080017c8 <hx711_dout_level>:

// public: simple pin read (used by telemetry_service)
int hx711_dout_level(void){ return hx711_dout(); }
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	f7ff ffec 	bl	80017a8 <hx711_dout>
 80017d0:	0003      	movs	r3, r0
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <hx711_init>:

static inline void short_pulse(void){
  for (volatile int i=0;i<30;i++) __NOP();
}

void hx711_init(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  // Ensure SCK is low at idle; high >60us would power down the HX711.
  hx711_sck_low();
 80017dc:	f7ff ffd6 	bl	800178c <hx711_sck_low>
}
 80017e0:	46c0      	nop			@ (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <hx711_read_raw>:

int hx711_read_raw(int32_t *out, uint32_t timeout_ms)
{
 80017e6:	b590      	push	{r4, r7, lr}
 80017e8:	b087      	sub	sp, #28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  uint32_t t0 = HAL_GetTick();
 80017f0:	f001 faaa 	bl	8002d48 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]

  // 1) wait for data ready (DOUT low) or timeout
  while (hx711_dout()){
 80017f8:	e009      	b.n	800180e <hx711_read_raw+0x28>
    if ((HAL_GetTick() - t0) >= timeout_ms) return 0;
 80017fa:	f001 faa5 	bl	8002d48 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d801      	bhi.n	800180e <hx711_read_raw+0x28>
 800180a:	2300      	movs	r3, #0
 800180c:	e03b      	b.n	8001886 <hx711_read_raw+0xa0>
  while (hx711_dout()){
 800180e:	f7ff ffcb 	bl	80017a8 <hx711_dout>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d1f1      	bne.n	80017fa <hx711_read_raw+0x14>
  }

  // 2) clock out 24 bits, MSB first
  uint32_t v = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 24; i++){
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	e017      	b.n	8001850 <hx711_read_raw+0x6a>
    hx711_sck_high();
 8001820:	f7ff ffa6 	bl	8001770 <hx711_sck_high>
    hx711_udelay_ticks(30);            // short high pulse
 8001824:	201e      	movs	r0, #30
 8001826:	f7ff ff8f 	bl	8001748 <hx711_udelay_ticks>
    v = (v << 1) | (hx711_dout() ? 1u : 0u);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005c      	lsls	r4, r3, #1
 800182e:	f7ff ffbb 	bl	80017a8 <hx711_dout>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <hx711_read_raw+0x54>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <hx711_read_raw+0x56>
 800183a:	2300      	movs	r3, #0
 800183c:	4323      	orrs	r3, r4
 800183e:	617b      	str	r3, [r7, #20]
    hx711_sck_low();
 8001840:	f7ff ffa4 	bl	800178c <hx711_sck_low>
    hx711_udelay_ticks(30);
 8001844:	201e      	movs	r0, #30
 8001846:	f7ff ff7f 	bl	8001748 <hx711_udelay_ticks>
  for (int i = 0; i < 24; i++){
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3301      	adds	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b17      	cmp	r3, #23
 8001854:	dde4      	ble.n	8001820 <hx711_read_raw+0x3a>
  }

  // 3) set GAIN for NEXT conversion (128 = +1 extra clock)
  hx711_sck_high();
 8001856:	f7ff ff8b 	bl	8001770 <hx711_sck_high>
  hx711_udelay_ticks(30);
 800185a:	201e      	movs	r0, #30
 800185c:	f7ff ff74 	bl	8001748 <hx711_udelay_ticks>
  hx711_sck_low();
 8001860:	f7ff ff94 	bl	800178c <hx711_sck_low>
  hx711_udelay_ticks(30);
 8001864:	201e      	movs	r0, #30
 8001866:	f7ff ff6f 	bl	8001748 <hx711_udelay_ticks>

  // 4) sign-extend 24-bit two's complement to 32-bit
  if (v & 0x800000u) v |= 0xFF000000u;
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	4013      	ands	r3, r2
 8001872:	d004      	beq.n	800187e <hx711_read_raw+0x98>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	22ff      	movs	r2, #255	@ 0xff
 8001878:	0612      	lsls	r2, r2, #24
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
  *out = (int32_t)v;
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]
  return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b007      	add	sp, #28
 800188c:	bd90      	pop	{r4, r7, pc}
	...

08001890 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <MX_I2C1_Init+0x74>)
 8001896:	4a1c      	ldr	r2, [pc, #112]	@ (8001908 <MX_I2C1_Init+0x78>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <MX_I2C1_Init+0x74>)
 800189c:	4a1b      	ldr	r2, [pc, #108]	@ (800190c <MX_I2C1_Init+0x7c>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018cc:	0018      	movs	r0, r3
 80018ce:	f002 fca7 	bl	8004220 <HAL_I2C_Init>
 80018d2:	1e03      	subs	r3, r0, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018d6:	f000 fe5f 	bl	8002598 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018da:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018dc:	2100      	movs	r1, #0
 80018de:	0018      	movs	r0, r3
 80018e0:	f002 fd44 	bl	800436c <HAL_I2CEx_ConfigAnalogFilter>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f000 fe56 	bl	8002598 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <MX_I2C1_Init+0x74>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 fd87 	bl	8004404 <HAL_I2CEx_ConfigDigitalFilter>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f000 fe4d 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200004cc 	.word	0x200004cc
 8001908:	40005400 	.word	0x40005400
 800190c:	00201d2b 	.word	0x00201d2b

08001910 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b08b      	sub	sp, #44	@ 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	2414      	movs	r4, #20
 800191a:	193b      	adds	r3, r7, r4
 800191c:	0018      	movs	r0, r3
 800191e:	2314      	movs	r3, #20
 8001920:	001a      	movs	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f006 f819 	bl	800795a <memset>
  if(i2cHandle->Instance==I2C1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2e      	ldr	r2, [pc, #184]	@ (80019e8 <HAL_I2C_MspInit+0xd8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d156      	bne.n	80019e0 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 8001938:	2180      	movs	r1, #128	@ 0x80
 800193a:	0289      	lsls	r1, r1, #10
 800193c:	430a      	orrs	r2, r1
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	02c9      	lsls	r1, r1, #11
 8001958:	430a      	orrs	r2, r1
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	02db      	lsls	r3, r3, #11
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2280      	movs	r2, #128	@ 0x80
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	2212      	movs	r2, #18
 8001976:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	193b      	adds	r3, r7, r4
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197e:	193b      	adds	r3, r7, r4
 8001980:	2203      	movs	r2, #3
 8001982:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001984:	193b      	adds	r3, r7, r4
 8001986:	2204      	movs	r2, #4
 8001988:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	193a      	adds	r2, r7, r4
 800198c:	2390      	movs	r3, #144	@ 0x90
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	0011      	movs	r1, r2
 8001992:	0018      	movs	r0, r3
 8001994:	f002 faa2 	bl	8003edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001998:	0021      	movs	r1, r4
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2212      	movs	r2, #18
 80019a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2203      	movs	r2, #3
 80019b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2201      	movs	r2, #1
 80019b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <HAL_I2C_MspInit+0xe0>)
 80019bc:	0019      	movs	r1, r3
 80019be:	0010      	movs	r0, r2
 80019c0:	f002 fa8c 	bl	8003edc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	0389      	lsls	r1, r1, #14
 80019ce:	430a      	orrs	r2, r1
 80019d0:	61da      	str	r2, [r3, #28]
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_I2C_MspInit+0xdc>)
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	039b      	lsls	r3, r3, #14
 80019da:	4013      	ands	r3, r2
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019e0:	46c0      	nop			@ (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b00b      	add	sp, #44	@ 0x2c
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000400 	.word	0x48000400

080019f4 <esc_apply_hw>:
static volatile uint16_t ic_last = 0;
static volatile uint32_t ic_period_us = 0;   // last measured period in microseconds
static volatile uint32_t ic_irq_count = 0;
static volatile uint8_t  ic_has_lock = 0;    // 1 once we got a valid period

static inline void esc_apply_hw(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g_esc1_us);
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <esc_apply_hw+0x20>)
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <esc_apply_hw+0x24>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, g_esc2_us);
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <esc_apply_hw+0x28>)
 8001a04:	881a      	ldrh	r2, [r3, #0]
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <esc_apply_hw+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a0c:	46c0      	nop			@ (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	20000006 	.word	0x20000006
 8001a18:	2000055c 	.word	0x2000055c
 8001a1c:	20000008 	.word	0x20000008

08001a20 <esc_init>:

static void esc_init(void){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  // start PWM outputs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a24:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <esc_init+0x24>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f003 fb0b 	bl	8005044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <esc_init+0x24>)
 8001a30:	210c      	movs	r1, #12
 8001a32:	0018      	movs	r0, r3
 8001a34:	f003 fb06 	bl	8005044 <HAL_TIM_PWM_Start>
  esc_apply_hw();
 8001a38:	f7ff ffdc 	bl	80019f4 <esc_apply_hw>
}
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	2000055c 	.word	0x2000055c

08001a48 <esc_set_us>:

static void esc_set_us(uint32_t ch, uint32_t us){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  if (us < 1050) us = 1050;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <esc_set_us+0x48>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d801      	bhi.n	8001a5e <esc_set_us+0x16>
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <esc_set_us+0x4c>)
 8001a5c:	603b      	str	r3, [r7, #0]
  if (us > 1940) us = 1940;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <esc_set_us+0x50>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <esc_set_us+0x22>
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <esc_set_us+0x50>)
 8001a68:	603b      	str	r3, [r7, #0]
  if (ch == 1) g_esc1_us = (uint16_t)us;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d104      	bne.n	8001a7a <esc_set_us+0x32>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <esc_set_us+0x54>)
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	e003      	b.n	8001a82 <esc_set_us+0x3a>
  else         g_esc2_us = (uint16_t)us;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <esc_set_us+0x58>)
 8001a80:	801a      	strh	r2, [r3, #0]
  esc_apply_hw();
 8001a82:	f7ff ffb7 	bl	80019f4 <esc_apply_hw>
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	00000419 	.word	0x00000419
 8001a94:	0000041a 	.word	0x0000041a
 8001a98:	00000794 	.word	0x00000794
 8001a9c:	20000006 	.word	0x20000006
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <adc_try_start>:
#define VREFINT_CAL_ADDR  ((uint16_t*)0x1FFFF7BA)  // STM32F0 ref manual
#endif
#define ADC_FULL_SCALE 4095u


static inline void adc_try_start(void){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc);  // in case something was half-started
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <adc_try_start+0x58>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 fb18 	bl	80030e0 <HAL_ADC_Stop_DMA>
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK) { g_adc_ok = 0; return; }
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <adc_try_start+0x58>)
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f001 fe76 	bl	80037a4 <HAL_ADCEx_Calibration_Start>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d003      	beq.n	8001ac4 <adc_try_start+0x20>
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <adc_try_start+0x5c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e018      	b.n	8001af6 <adc_try_start+0x52>
    if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)g_adc, ADC_COUNT) != HAL_OK)   { g_adc_ok = 0; return; }
 8001ac4:	490f      	ldr	r1, [pc, #60]	@ (8001b04 <adc_try_start+0x60>)
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <adc_try_start+0x58>)
 8001ac8:	2205      	movs	r2, #5
 8001aca:	0018      	movs	r0, r3
 8001acc:	f001 fa86 	bl	8002fdc <HAL_ADC_Start_DMA>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d003      	beq.n	8001adc <adc_try_start+0x38>
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <adc_try_start+0x5c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e00c      	b.n	8001af6 <adc_try_start+0x52>
    __HAL_DMA_DISABLE_IT(hadc.DMA_Handle, DMA_IT_HT | DMA_IT_TC | DMA_IT_TE);
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <adc_try_start+0x58>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <adc_try_start+0x58>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	210e      	movs	r1, #14
 8001aec:	438a      	bics	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
    g_adc_ok = 1;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <adc_try_start+0x5c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
}
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	20000034 	.word	0x20000034
 8001b00:	2000053a 	.word	0x2000053a
 8001b04:	20000530 	.word	0x20000530

08001b08 <adc_compute_mv>:

static inline void adc_compute_mv(void)
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	b0a9      	sub	sp, #164	@ 0xa4
 8001b0c:	af00      	add	r7, sp, #0
    if (!g_adc_ok) return;
 8001b0e:	4bb4      	ldr	r3, [pc, #720]	@ (8001de0 <adc_compute_mv+0x2d8>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d100      	bne.n	8001b18 <adc_compute_mv+0x10>
 8001b16:	e15d      	b.n	8001dd4 <adc_compute_mv+0x2cc>

    // Fixed order: [0]=PA0, [1]=PA1, [2]=PA3, [3]=PA4, [4]=VREFINT
    uint16_t raw_i1  = g_adc[ADC_IDX_I1];
 8001b18:	2332      	movs	r3, #50	@ 0x32
 8001b1a:	2068      	movs	r0, #104	@ 0x68
 8001b1c:	181b      	adds	r3, r3, r0
 8001b1e:	19da      	adds	r2, r3, r7
 8001b20:	4bb0      	ldr	r3, [pc, #704]	@ (8001de4 <adc_compute_mv+0x2dc>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	8013      	strh	r3, [r2, #0]
    uint16_t raw_i2  = g_adc[ADC_IDX_I2];
 8001b26:	2330      	movs	r3, #48	@ 0x30
 8001b28:	181b      	adds	r3, r3, r0
 8001b2a:	19da      	adds	r2, r3, r7
 8001b2c:	4bad      	ldr	r3, [pc, #692]	@ (8001de4 <adc_compute_mv+0x2dc>)
 8001b2e:	885b      	ldrh	r3, [r3, #2]
 8001b30:	8013      	strh	r3, [r2, #0]
    uint16_t raw_v1  = g_adc[ADC_IDX_V1];
 8001b32:	232e      	movs	r3, #46	@ 0x2e
 8001b34:	181b      	adds	r3, r3, r0
 8001b36:	19da      	adds	r2, r3, r7
 8001b38:	4baa      	ldr	r3, [pc, #680]	@ (8001de4 <adc_compute_mv+0x2dc>)
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	8013      	strh	r3, [r2, #0]
    uint16_t raw_v2  = g_adc[ADC_IDX_V2];
 8001b3e:	232c      	movs	r3, #44	@ 0x2c
 8001b40:	181b      	adds	r3, r3, r0
 8001b42:	19da      	adds	r2, r3, r7
 8001b44:	4ba7      	ldr	r3, [pc, #668]	@ (8001de4 <adc_compute_mv+0x2dc>)
 8001b46:	88db      	ldrh	r3, [r3, #6]
 8001b48:	8013      	strh	r3, [r2, #0]
    uint16_t raw_ref = g_adc[ADC_IDX_VREF];
 8001b4a:	212a      	movs	r1, #42	@ 0x2a
 8001b4c:	180b      	adds	r3, r1, r0
 8001b4e:	19da      	adds	r2, r3, r7
 8001b50:	4ba4      	ldr	r3, [pc, #656]	@ (8001de4 <adc_compute_mv+0x2dc>)
 8001b52:	891b      	ldrh	r3, [r3, #8]
 8001b54:	8013      	strh	r3, [r2, #0]
    if (raw_ref == 0) return;  // avoid div/0 while VREFINT wakes up
 8001b56:	180b      	adds	r3, r1, r0
 8001b58:	19db      	adds	r3, r3, r7
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d100      	bne.n	8001b62 <adc_compute_mv+0x5a>
 8001b60:	e13a      	b.n	8001dd8 <adc_compute_mv+0x2d0>

    // --- VDD from factory calibration (same approach you already use) ---
    uint32_t vref_cal = *VREFINT_CAL_ADDR;           // ~1500 @ 3.3V
 8001b62:	4ba1      	ldr	r3, [pc, #644]	@ (8001de8 <adc_compute_mv+0x2e0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	219c      	movs	r1, #156	@ 0x9c
 8001b68:	187a      	adds	r2, r7, r1
 8001b6a:	6013      	str	r3, [r2, #0]
    if (vref_cal < 1000 || vref_cal > 3000) vref_cal = 1500;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	23fa      	movs	r3, #250	@ 0xfa
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d304      	bcc.n	8001b82 <adc_compute_mv+0x7a>
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b9b      	ldr	r3, [pc, #620]	@ (8001dec <adc_compute_mv+0x2e4>)
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d903      	bls.n	8001b8a <adc_compute_mv+0x82>
 8001b82:	4b9b      	ldr	r3, [pc, #620]	@ (8001df0 <adc_compute_mv+0x2e8>)
 8001b84:	229c      	movs	r2, #156	@ 0x9c
 8001b86:	18ba      	adds	r2, r7, r2
 8001b88:	6013      	str	r3, [r2, #0]
    uint32_t vdd_mV = (3300u * vref_cal) / raw_ref;
 8001b8a:	239c      	movs	r3, #156	@ 0x9c
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b98      	ldr	r3, [pc, #608]	@ (8001df4 <adc_compute_mv+0x2ec>)
 8001b92:	435a      	muls	r2, r3
 8001b94:	232a      	movs	r3, #42	@ 0x2a
 8001b96:	2168      	movs	r1, #104	@ 0x68
 8001b98:	185b      	adds	r3, r3, r1
 8001b9a:	19db      	adds	r3, r3, r7
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	f7fe fab1 	bl	8000108 <__udivsi3>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	268c      	movs	r6, #140	@ 0x8c
 8001baa:	19b8      	adds	r0, r7, r6
 8001bac:	6003      	str	r3, [r0, #0]

    // --- Node voltages (mV) at each ADC pin (64-bit to avoid overflow later) ---
    uint32_t node_i1_mV = (uint32_t)(((uint64_t)raw_i1 * vdd_mV + 2047) / 4095u);
 8001bae:	2332      	movs	r3, #50	@ 0x32
 8001bb0:	2268      	movs	r2, #104	@ 0x68
 8001bb2:	189b      	adds	r3, r3, r2
 8001bb4:	19db      	adds	r3, r3, r7
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bc0:	19bb      	adds	r3, r7, r6
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	001c      	movs	r4, r3
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	001d      	movs	r5, r3
 8001bca:	0022      	movs	r2, r4
 8001bcc:	002b      	movs	r3, r5
 8001bce:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001bd0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001bd2:	f7fe fb69 	bl	80002a8 <__aeabi_lmul>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	000b      	movs	r3, r1
 8001bda:	0010      	movs	r0, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	4a86      	ldr	r2, [pc, #536]	@ (8001df8 <adc_compute_mv+0x2f0>)
 8001be0:	2300      	movs	r3, #0
 8001be2:	1880      	adds	r0, r0, r2
 8001be4:	4159      	adcs	r1, r3
 8001be6:	4a85      	ldr	r2, [pc, #532]	@ (8001dfc <adc_compute_mv+0x2f4>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	f7fe fb3d 	bl	8000268 <__aeabi_uldivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	000b      	movs	r3, r1
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	2188      	movs	r1, #136	@ 0x88
 8001bf6:	1878      	adds	r0, r7, r1
 8001bf8:	6003      	str	r3, [r0, #0]
    uint32_t node_i2_mV = (uint32_t)(((uint64_t)raw_i2 * vdd_mV + 2047) / 4095u);
 8001bfa:	2330      	movs	r3, #48	@ 0x30
 8001bfc:	2568      	movs	r5, #104	@ 0x68
 8001bfe:	195b      	adds	r3, r3, r5
 8001c00:	19db      	adds	r3, r3, r7
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c08:	2300      	movs	r3, #0
 8001c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c0c:	0034      	movs	r4, r6
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c14:	2300      	movs	r3, #0
 8001c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001c1e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001c20:	f7fe fb42 	bl	80002a8 <__aeabi_lmul>
 8001c24:	0002      	movs	r2, r0
 8001c26:	000b      	movs	r3, r1
 8001c28:	0010      	movs	r0, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	4a72      	ldr	r2, [pc, #456]	@ (8001df8 <adc_compute_mv+0x2f0>)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	1880      	adds	r0, r0, r2
 8001c32:	4159      	adcs	r1, r3
 8001c34:	4a71      	ldr	r2, [pc, #452]	@ (8001dfc <adc_compute_mv+0x2f4>)
 8001c36:	2300      	movs	r3, #0
 8001c38:	f7fe fb16 	bl	8000268 <__aeabi_uldivmod>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	000b      	movs	r3, r1
 8001c40:	0013      	movs	r3, r2
 8001c42:	2284      	movs	r2, #132	@ 0x84
 8001c44:	18b8      	adds	r0, r7, r2
 8001c46:	6003      	str	r3, [r0, #0]
    uint32_t node_v1_mV = (uint32_t)(((uint64_t)raw_v1 * vdd_mV + 2047) / 4095u);
 8001c48:	232e      	movs	r3, #46	@ 0x2e
 8001c4a:	1958      	adds	r0, r3, r5
 8001c4c:	19c3      	adds	r3, r0, r7
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c54:	2300      	movs	r3, #0
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c58:	1938      	adds	r0, r7, r4
 8001c5a:	6803      	ldr	r3, [r0, #0]
 8001c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c5e:	2300      	movs	r3, #0
 8001c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c66:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001c68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c6a:	f7fe fb1d 	bl	80002a8 <__aeabi_lmul>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	000b      	movs	r3, r1
 8001c72:	0010      	movs	r0, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	4a60      	ldr	r2, [pc, #384]	@ (8001df8 <adc_compute_mv+0x2f0>)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	1880      	adds	r0, r0, r2
 8001c7c:	4159      	adcs	r1, r3
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dfc <adc_compute_mv+0x2f4>)
 8001c80:	2300      	movs	r3, #0
 8001c82:	f7fe faf1 	bl	8000268 <__aeabi_uldivmod>
 8001c86:	0002      	movs	r2, r0
 8001c88:	000b      	movs	r3, r1
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	2680      	movs	r6, #128	@ 0x80
 8001c8e:	19b8      	adds	r0, r7, r6
 8001c90:	6003      	str	r3, [r0, #0]
    uint32_t node_v2_mV = (uint32_t)(((uint64_t)raw_v2 * vdd_mV + 2047) / 4095u);
 8001c92:	232c      	movs	r3, #44	@ 0x2c
 8001c94:	1958      	adds	r0, r3, r5
 8001c96:	19c3      	adds	r3, r0, r7
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ca2:	1938      	adds	r0, r7, r4
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ca8:	2300      	movs	r3, #0
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001cb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cb4:	f7fe faf8 	bl	80002a8 <__aeabi_lmul>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	000b      	movs	r3, r1
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001df8 <adc_compute_mv+0x2f0>)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	1880      	adds	r0, r0, r2
 8001cc6:	4159      	adcs	r1, r3
 8001cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001dfc <adc_compute_mv+0x2f4>)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f7fe facc 	bl	8000268 <__aeabi_uldivmod>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	000b      	movs	r3, r1
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // --- External voltages through dividers (19:1) ---
    const uint32_t k1 = (R_HIGH1 + R_LOW1), k2 = (R_HIGH2 + R_LOW2);
 8001cd8:	4b49      	ldr	r3, [pc, #292]	@ (8001e00 <adc_compute_mv+0x2f8>)
 8001cda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cdc:	4b48      	ldr	r3, [pc, #288]	@ (8001e00 <adc_compute_mv+0x2f8>)
 8001cde:	677b      	str	r3, [r7, #116]	@ 0x74
    g_vin1_mV = (uint32_t)(((uint64_t)node_v1_mV * k1 + R_LOW1/2) / R_LOW1);
 8001ce0:	19b8      	adds	r0, r7, r6
 8001ce2:	6803      	ldr	r3, [r0, #0]
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	6a3a      	ldr	r2, [r7, #32]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cfa:	f7fe fad5 	bl	80002a8 <__aeabi_lmul>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	000b      	movs	r3, r1
 8001d02:	0010      	movs	r0, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	4a3f      	ldr	r2, [pc, #252]	@ (8001e04 <adc_compute_mv+0x2fc>)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	1880      	adds	r0, r0, r2
 8001d0c:	4159      	adcs	r1, r3
 8001d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e08 <adc_compute_mv+0x300>)
 8001d10:	2300      	movs	r3, #0
 8001d12:	f7fe faa9 	bl	8000268 <__aeabi_uldivmod>
 8001d16:	0002      	movs	r2, r0
 8001d18:	000b      	movs	r3, r1
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e0c <adc_compute_mv+0x304>)
 8001d1c:	601a      	str	r2, [r3, #0]
    g_vin2_mV = (uint32_t)(((uint64_t)node_v2_mV * k2 + R_LOW2/2) / R_LOW2);
 8001d1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	69b8      	ldr	r0, [r7, #24]
 8001d34:	69f9      	ldr	r1, [r7, #28]
 8001d36:	f7fe fab7 	bl	80002a8 <__aeabi_lmul>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	000b      	movs	r3, r1
 8001d3e:	0010      	movs	r0, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	4a30      	ldr	r2, [pc, #192]	@ (8001e04 <adc_compute_mv+0x2fc>)
 8001d44:	2300      	movs	r3, #0
 8001d46:	1880      	adds	r0, r0, r2
 8001d48:	4159      	adcs	r1, r3
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e08 <adc_compute_mv+0x300>)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f7fe fa8b 	bl	8000268 <__aeabi_uldivmod>
 8001d52:	0002      	movs	r2, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	4b2e      	ldr	r3, [pc, #184]	@ (8001e10 <adc_compute_mv+0x308>)
 8001d58:	601a      	str	r2, [r3, #0]


    //Current Calculation
    int32_t dv1_mV = (int32_t)node_i1_mV - (int32_t)g_i1_zero_mV;
 8001d5a:	2188      	movs	r1, #136	@ 0x88
 8001d5c:	1879      	adds	r1, r7, r1
 8001d5e:	680a      	ldr	r2, [r1, #0]
 8001d60:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <adc_compute_mv+0x30c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	673b      	str	r3, [r7, #112]	@ 0x70
    int32_t dv2_mV = (int32_t)node_i2_mV - (int32_t)g_i1_zero_mV;
 8001d68:	2384      	movs	r3, #132	@ 0x84
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <adc_compute_mv+0x30c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // I(mA) = (dv_mV * 1000) / (mV per A)
    g_i1_mA = (int32_t)(((int64_t)dv1_mV * 1000) / I1_SENS_mV_PER_A);
 8001d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	17db      	asrs	r3, r3, #31
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	22fa      	movs	r2, #250	@ 0xfa
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	2300      	movs	r3, #0
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	f7fe fa8e 	bl	80002a8 <__aeabi_lmul>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	000b      	movs	r3, r1
 8001d90:	0010      	movs	r0, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	2218      	movs	r2, #24
 8001d96:	2300      	movs	r3, #0
 8001d98:	f7fe fa42 	bl	8000220 <__aeabi_ldivmod>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	000b      	movs	r3, r1
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <adc_compute_mv+0x310>)
 8001da2:	601a      	str	r2, [r3, #0]
    g_i2_mA = (int32_t)(((int64_t)dv2_mV * 1000) / I2_SENS_mV_PER_A);
 8001da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	17db      	asrs	r3, r3, #31
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	22fa      	movs	r2, #250	@ 0xfa
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	2300      	movs	r3, #0
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	f7fe fa77 	bl	80002a8 <__aeabi_lmul>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	0010      	movs	r0, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	2218      	movs	r2, #24
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f7fe fa2b 	bl	8000220 <__aeabi_ldivmod>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	000b      	movs	r3, r1
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <adc_compute_mv+0x314>)
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e002      	b.n	8001dda <adc_compute_mv+0x2d2>
    if (!g_adc_ok) return;
 8001dd4:	46c0      	nop			@ (mov r8, r8)
 8001dd6:	e000      	b.n	8001dda <adc_compute_mv+0x2d2>
    if (raw_ref == 0) return;  // avoid div/0 while VREFINT wakes up
 8001dd8:	46c0      	nop			@ (mov r8, r8)
}
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b029      	add	sp, #164	@ 0xa4
 8001dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de0:	2000053a 	.word	0x2000053a
 8001de4:	20000530 	.word	0x20000530
 8001de8:	1ffff7ba 	.word	0x1ffff7ba
 8001dec:	00000bb8 	.word	0x00000bb8
 8001df0:	000005dc 	.word	0x000005dc
 8001df4:	00000ce4 	.word	0x00000ce4
 8001df8:	000007ff 	.word	0x000007ff
 8001dfc:	00000fff 	.word	0x00000fff
 8001e00:	0002e630 	.word	0x0002e630
 8001e04:	00001388 	.word	0x00001388
 8001e08:	00002710 	.word	0x00002710
 8001e0c:	2000053c 	.word	0x2000053c
 8001e10:	20000540 	.word	0x20000540
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000520 	.word	0x20000520
 8001e1c:	20000524 	.word	0x20000524

08001e20 <comm_on_frame>:


void comm_on_frame(const comm_frame_t *f)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b0aa      	sub	sp, #168	@ 0xa8
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	6078      	str	r0, [r7, #4]
	// Handle Ping
    if (f->msg_type == MT_PING) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	789b      	ldrb	r3, [r3, #2]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d133      	bne.n	8001e98 <comm_on_frame+0x78>
        uint64_t host_ms64 = 0;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2300      	movs	r3, #0
 8001e34:	673a      	str	r2, [r7, #112]	@ 0x70
 8001e36:	677b      	str	r3, [r7, #116]	@ 0x74
        (void)tlv_find_u64(f->payload, f->payload_len, TLV_TS_HOST_MS, &host_ms64);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6898      	ldr	r0, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8999      	ldrh	r1, [r3, #12]
 8001e40:	2370      	movs	r3, #112	@ 0x70
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2202      	movs	r2, #2
 8001e46:	f7ff f80f 	bl	8000e68 <tlv_find_u64>

        uint8_t buf[24]; uint8_t *w = buf;
 8001e4a:	2458      	movs	r4, #88	@ 0x58
 8001e4c:	193b      	adds	r3, r7, r4
 8001e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        w = tlv_put_u64(w, TLV_TS_HOST_MS, host_ms64);   // echo host 64-bit time
 8001e50:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e54:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001e56:	2102      	movs	r1, #2
 8001e58:	f7fe ff84 	bl	8000d64 <tlv_put_u64>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        w = tlv_put_u32(w, TLV_TS_MS, HAL_GetTick());    // device uptime (u32)
 8001e60:	f000 ff72 	bl	8002d48 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e68:	2101      	movs	r1, #1
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7fe fd9d 	bl	80009aa <tlv_put_u32>
 8001e70:	0003      	movs	r3, r0
 8001e72:	67fb      	str	r3, [r7, #124]	@ 0x7c

        comm_send(f->tx_id, f->rx_id, MT_PING, 0x01, 0, buf, (uint16_t)(w - buf));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7858      	ldrb	r0, [r3, #1]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7819      	ldrb	r1, [r3, #0]
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	2205      	movs	r2, #5
 8001e92:	f7ff f96b 	bl	800116c <comm_send>
 8001e96:	e131      	b.n	80020fc <comm_on_frame+0x2dc>
        return;
    }
    // Handle Command
    if (f->msg_type == MT_COMMAND) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	789b      	ldrb	r3, [r3, #2]
 8001e9c:	2b0a      	cmp	r3, #10
 8001e9e:	d000      	beq.n	8001ea2 <comm_on_frame+0x82>
 8001ea0:	e12c      	b.n	80020fc <comm_on_frame+0x2dc>
            // Parse the command code (u32)
            uint32_t cmd = 0xFFFFFFFFu;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	657b      	str	r3, [r7, #84]	@ 0x54
            (void)tlv_find_u32(f->payload, f->payload_len, TLV_CMD_CODE, &cmd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6898      	ldr	r0, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8999      	ldrh	r1, [r3, #12]
 8001eb0:	2354      	movs	r3, #84	@ 0x54
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	224f      	movs	r2, #79	@ 0x4f
 8001eb6:	f7fe fed4 	bl	8000c62 <tlv_find_u32>

            uint32_t result = 0; // OK by default
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2294      	movs	r2, #148	@ 0x94
 8001ebe:	18ba      	adds	r2, r7, r2
 8001ec0:	6013      	str	r3, [r2, #0]

			if (cmd == CMD_ECHO) {
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <comm_on_frame+0xaa>
 8001ec8:	e0e5      	b.n	8002096 <comm_on_frame+0x276>
				// nothing else to do
			}
			else if (cmd == CMD_SNAPSHOT) {
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d13f      	bne.n	8001f50 <comm_on_frame+0x130>
				// Build one telemetry frame (MT_TEL_A) with a timestamp TLV for now
				uint8_t t[16]; uint8_t *tw = t;
 8001ed0:	2334      	movs	r3, #52	@ 0x34
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2490      	movs	r4, #144	@ 0x90
 8001ed6:	193a      	adds	r2, r7, r4
 8001ed8:	6013      	str	r3, [r2, #0]

				// Read HX711 (timeout e.g. 50ms; pick 10SPS or 80SPS rate on your module pin)
				int32_t raw = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	633b      	str	r3, [r7, #48]	@ 0x30
				int ok = hx711_read_raw(&raw, 50);
 8001ede:	2330      	movs	r3, #48	@ 0x30
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	2132      	movs	r1, #50	@ 0x32
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff fc7e 	bl	80017e6 <hx711_read_raw>
 8001eea:	0003      	movs	r3, r0
 8001eec:	2584      	movs	r5, #132	@ 0x84
 8001eee:	197a      	adds	r2, r7, r5
 8001ef0:	6013      	str	r3, [r2, #0]

				tw = tlv_put_u32(tw, TLV_TS_MS, HAL_GetTick());
 8001ef2:	f000 ff29 	bl	8002d48 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	193b      	adds	r3, r7, r4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7fe fd53 	bl	80009aa <tlv_put_u32>
 8001f04:	0003      	movs	r3, r0
 8001f06:	193a      	adds	r2, r7, r4
 8001f08:	6013      	str	r3, [r2, #0]

				if (ok) {
 8001f0a:	197b      	adds	r3, r7, r5
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <comm_on_frame+0x106>
					// reuse u32 helper but cast the bytes of raw (two's complement)
					tw = tlv_put_i32(tw, TLV_LOAD_RAW, raw);  // if you don’t have tlv_put_i32 yet, I can add it; else use tlv_put_u32 on (uint32_t)raw
 8001f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2130      	movs	r1, #48	@ 0x30
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7fe fd7e 	bl	8000a1c <tlv_put_i32>
 8001f20:	0003      	movs	r3, r0
 8001f22:	193a      	adds	r2, r7, r4
 8001f24:	6013      	str	r3, [r2, #0]
				}
				// Send telemetry to the command sender
				comm_send(f->tx_id, f->rx_id, MT_TEL_A, 0x01, /*reqid=*/0, t, (uint16_t)(tw - t));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7858      	ldrb	r0, [r3, #1]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7819      	ldrb	r1, [r3, #0]
 8001f2e:	2434      	movs	r4, #52	@ 0x34
 8001f30:	193b      	adds	r3, r7, r4
 8001f32:	2290      	movs	r2, #144	@ 0x90
 8001f34:	18ba      	adds	r2, r7, r2
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2300      	movs	r3, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	2265      	movs	r2, #101	@ 0x65
 8001f4a:	f7ff f90f 	bl	800116c <comm_send>
 8001f4e:	e0a2      	b.n	8002096 <comm_on_frame+0x276>
			}
			else if (cmd == CMD_STREAM) {
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d118      	bne.n	8001f88 <comm_on_frame+0x168>
			    uint32_t per = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_STREAM_PERIOD_MS, &per);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6898      	ldr	r0, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8999      	ldrh	r1, [r3, #12]
 8001f62:	232c      	movs	r3, #44	@ 0x2c
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2240      	movs	r2, #64	@ 0x40
 8001f68:	f7fe fe7b 	bl	8000c62 <tlv_find_u32>

			    g_stream_period_ms = per;
 8001f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6e:	4b65      	ldr	r3, [pc, #404]	@ (8002104 <comm_on_frame+0x2e4>)
 8001f70:	601a      	str	r2, [r3, #0]
			    g_next_stream_ms   = HAL_GetTick() + 1;
 8001f72:	f000 fee9 	bl	8002d48 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <comm_on_frame+0x2e8>)
 8001f7c:	601a      	str	r2, [r3, #0]
			    g_stream_dest_id   = f->tx_id;          // send to whoever asked
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	785a      	ldrb	r2, [r3, #1]
 8001f82:	4b62      	ldr	r3, [pc, #392]	@ (800210c <comm_on_frame+0x2ec>)
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e086      	b.n	8002096 <comm_on_frame+0x276>

			    // result = OK (0)
			}
			else if (cmd == CMD_SET_ESC) {
 8001f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d000      	beq.n	8001f90 <comm_on_frame+0x170>
 8001f8e:	e07e      	b.n	800208e <comm_on_frame+0x26e>
			    uint32_t ch = 0, us = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_ESC_CH, &ch);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6898      	ldr	r0, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8999      	ldrh	r1, [r3, #12]
 8001fa0:	2328      	movs	r3, #40	@ 0x28
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2260      	movs	r2, #96	@ 0x60
 8001fa6:	f7fe fe5c 	bl	8000c62 <tlv_find_u32>
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_ESC_US, &us);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6898      	ldr	r0, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8999      	ldrh	r1, [r3, #12]
 8001fb2:	2324      	movs	r3, #36	@ 0x24
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2261      	movs	r2, #97	@ 0x61
 8001fb8:	f7fe fe53 	bl	8000c62 <tlv_find_u32>

			    uint32_t result = 0; // OK
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	228c      	movs	r2, #140	@ 0x8c
 8001fc0:	18b9      	adds	r1, r7, r2
 8001fc2:	600b      	str	r3, [r1, #0]
			    if ((ch != 1u) && (ch != 2u)) {
 8001fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d006      	beq.n	8001fd8 <comm_on_frame+0x1b8>
 8001fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d003      	beq.n	8001fd8 <comm_on_frame+0x1b8>
			        result = 2; // invalid channel
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	18ba      	adds	r2, r7, r2
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e013      	b.n	8002000 <comm_on_frame+0x1e0>
			    } else if (us < 800 || us > 2200) { // loose input guard; hard clamp to 1050..1940
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fda:	23c8      	movs	r3, #200	@ 0xc8
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d303      	bcc.n	8001fea <comm_on_frame+0x1ca>
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8002110 <comm_on_frame+0x2f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d904      	bls.n	8001ff4 <comm_on_frame+0x1d4>
			        result = 1; // out of plausible range
 8001fea:	2301      	movs	r3, #1
 8001fec:	228c      	movs	r2, #140	@ 0x8c
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e005      	b.n	8002000 <comm_on_frame+0x1e0>
			    } else {
			        esc_set_us(ch, us); // clamps internally to 1050..1940
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fd24 	bl	8001a48 <esc_set_us>
			    }

			    uint8_t ack[24]; uint8_t *aw = ack;
 8002000:	250c      	movs	r5, #12
 8002002:	197b      	adds	r3, r7, r5
 8002004:	2488      	movs	r4, #136	@ 0x88
 8002006:	193a      	adds	r2, r7, r4
 8002008:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 800200a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800200c:	193b      	adds	r3, r7, r4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	214f      	movs	r1, #79	@ 0x4f
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe fcc9 	bl	80009aa <tlv_put_u32>
 8002018:	0003      	movs	r3, r0
 800201a:	0021      	movs	r1, r4
 800201c:	187a      	adds	r2, r7, r1
 800201e:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_RESULT, result);
 8002020:	238c      	movs	r3, #140	@ 0x8c
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	000c      	movs	r4, r1
 8002028:	193b      	adds	r3, r7, r4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2150      	movs	r1, #80	@ 0x50
 800202e:	0018      	movs	r0, r3
 8002030:	f7fe fcbb 	bl	80009aa <tlv_put_u32>
 8002034:	0003      	movs	r3, r0
 8002036:	193a      	adds	r2, r7, r4
 8002038:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_ESC_CH,     ch);
 800203a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800203c:	193b      	adds	r3, r7, r4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2160      	movs	r1, #96	@ 0x60
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe fcb1 	bl	80009aa <tlv_put_u32>
 8002048:	0003      	movs	r3, r0
 800204a:	193a      	adds	r2, r7, r4
 800204c:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_ESC_US,     us);
 800204e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002050:	193b      	adds	r3, r7, r4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2161      	movs	r1, #97	@ 0x61
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe fca7 	bl	80009aa <tlv_put_u32>
 800205c:	0003      	movs	r3, r0
 800205e:	0021      	movs	r1, r4
 8002060:	187a      	adds	r2, r7, r1
 8002062:	6013      	str	r3, [r2, #0]
			    comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7858      	ldrb	r0, [r3, #1]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781c      	ldrb	r4, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	799b      	ldrb	r3, [r3, #6]
 8002070:	197a      	adds	r2, r7, r5
 8002072:	1879      	adds	r1, r7, r1
 8002074:	6809      	ldr	r1, [r1, #0]
 8002076:	1a8a      	subs	r2, r1, r2
 8002078:	b292      	uxth	r2, r2
 800207a:	9202      	str	r2, [sp, #8]
 800207c:	197a      	adds	r2, r7, r5
 800207e:	9201      	str	r2, [sp, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	220b      	movs	r2, #11
 8002086:	0021      	movs	r1, r4
 8002088:	f7ff f870 	bl	800116c <comm_send>
 800208c:	e036      	b.n	80020fc <comm_on_frame+0x2dc>
			    return;
			}

			else {
				result = 3; // BAD/unknown command
 800208e:	2303      	movs	r3, #3
 8002090:	2294      	movs	r2, #148	@ 0x94
 8002092:	18ba      	adds	r2, r7, r2
 8002094:	6013      	str	r3, [r2, #0]
			}

			// Always send an ACK for MT_COMMAND, echoing the CMD_CODE
			uint8_t ack[16]; uint8_t *aw = ack;
 8002096:	2544      	movs	r5, #68	@ 0x44
 8002098:	197b      	adds	r3, r7, r5
 800209a:	2480      	movs	r4, #128	@ 0x80
 800209c:	193a      	adds	r2, r7, r4
 800209e:	6013      	str	r3, [r2, #0]
			aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 80020a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020a2:	193b      	adds	r3, r7, r4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	214f      	movs	r1, #79	@ 0x4f
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7fe fc7e 	bl	80009aa <tlv_put_u32>
 80020ae:	0003      	movs	r3, r0
 80020b0:	0021      	movs	r1, r4
 80020b2:	187a      	adds	r2, r7, r1
 80020b4:	6013      	str	r3, [r2, #0]
			aw = tlv_put_u32(aw, TLV_CMD_RESULT, result);
 80020b6:	2394      	movs	r3, #148	@ 0x94
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	000c      	movs	r4, r1
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2150      	movs	r1, #80	@ 0x50
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7fe fc70 	bl	80009aa <tlv_put_u32>
 80020ca:	0003      	movs	r3, r0
 80020cc:	0021      	movs	r1, r4
 80020ce:	187a      	adds	r2, r7, r1
 80020d0:	6013      	str	r3, [r2, #0]
			comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7858      	ldrb	r0, [r3, #1]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	781c      	ldrb	r4, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	799b      	ldrb	r3, [r3, #6]
 80020de:	197a      	adds	r2, r7, r5
 80020e0:	1879      	adds	r1, r7, r1
 80020e2:	6809      	ldr	r1, [r1, #0]
 80020e4:	1a8a      	subs	r2, r1, r2
 80020e6:	b292      	uxth	r2, r2
 80020e8:	9202      	str	r2, [sp, #8]
 80020ea:	197a      	adds	r2, r7, r5
 80020ec:	9201      	str	r2, [sp, #4]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2301      	movs	r3, #1
 80020f2:	220b      	movs	r2, #11
 80020f4:	0021      	movs	r1, r4
 80020f6:	f7ff f839 	bl	800116c <comm_send>
			return;
 80020fa:	46c0      	nop			@ (mov r8, r8)

        }
    // ...
}
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b026      	add	sp, #152	@ 0x98
 8002100:	bdb0      	pop	{r4, r5, r7, pc}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	20000528 	.word	0x20000528
 8002108:	2000052c 	.word	0x2000052c
 800210c:	20000004 	.word	0x20000004
 8002110:	00000898 	.word	0x00000898

08002114 <telemetry_service>:

static void telemetry_service(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a4      	sub	sp, #144	@ 0x90
 8002118:	af04      	add	r7, sp, #16
    if (g_stream_period_ms == 0) return;
 800211a:	4b77      	ldr	r3, [pc, #476]	@ (80022f8 <telemetry_service+0x1e4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d100      	bne.n	8002124 <telemetry_service+0x10>
 8002122:	e0e3      	b.n	80022ec <telemetry_service+0x1d8>

    uint32_t now = HAL_GetTick();
 8002124:	f000 fe10 	bl	8002d48 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	67bb      	str	r3, [r7, #120]	@ 0x78
    // not time yet?
    if ((int32_t)(now - g_next_stream_ms) < 0) return;
 800212c:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <telemetry_service+0x1e8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	d500      	bpl.n	8002138 <telemetry_service+0x24>
 8002136:	e0db      	b.n	80022f0 <telemetry_service+0x1dc>
    g_next_stream_ms = now + g_stream_period_ms;
 8002138:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <telemetry_service+0x1e4>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800213e:	18d2      	adds	r2, r2, r3
 8002140:	4b6e      	ldr	r3, [pc, #440]	@ (80022fc <telemetry_service+0x1e8>)
 8002142:	601a      	str	r2, [r3, #0]

    extern int hx711_dout_level(void);

    // read HX711 if ready (non-blocking)
    int32_t raw = 0; int ok = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	667b      	str	r3, [r7, #100]	@ 0x64
 8002148:	2300      	movs	r3, #0
 800214a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (hx711_dout_level() == 0) {        // data ready low
 800214c:	f7ff fb3c 	bl	80017c8 <hx711_dout_level>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d110      	bne.n	8002176 <telemetry_service+0x62>
        ok = hx711_read_raw(&raw, 0);     // no wait
 8002154:	2364      	movs	r3, #100	@ 0x64
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2100      	movs	r1, #0
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fb43 	bl	80017e6 <hx711_read_raw>
 8002160:	0003      	movs	r3, r0
 8002162:	677b      	str	r3, [r7, #116]	@ 0x74
        if (ok) { g_last_raw = raw; g_last_raw_valid = 1; }
 8002164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <telemetry_service+0x62>
 800216a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800216c:	4b64      	ldr	r3, [pc, #400]	@ (8002300 <telemetry_service+0x1ec>)
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b64      	ldr	r3, [pc, #400]	@ (8002304 <telemetry_service+0x1f0>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    }

    uint8_t t[96]; uint8_t *tw = t;
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_TS_MS, now);
 800217a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800217c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800217e:	2101      	movs	r1, #1
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe fc12 	bl	80009aa <tlv_put_u32>
 8002186:	0003      	movs	r3, r0
 8002188:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC1_US, g_esc1_us);
 800218a:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <telemetry_service+0x1f4>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	001a      	movs	r2, r3
 8002190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002192:	2162      	movs	r1, #98	@ 0x62
 8002194:	0018      	movs	r0, r3
 8002196:	f7fe fc08 	bl	80009aa <tlv_put_u32>
 800219a:	0003      	movs	r3, r0
 800219c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC2_US, g_esc2_us);
 800219e:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <telemetry_service+0x1f8>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	001a      	movs	r2, r3
 80021a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021a6:	2163      	movs	r1, #99	@ 0x63
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe fbfe 	bl	80009aa <tlv_put_u32>
 80021ae:	0003      	movs	r3, r0
 80021b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_IC_IRQS,      ic_irq_count);
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <telemetry_service+0x1fc>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021b8:	2172      	movs	r1, #114	@ 0x72
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe fbf5 	bl	80009aa <tlv_put_u32>
 80021c0:	0003      	movs	r3, r0
 80021c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_IC_PERIOD_US, ic_period_us);
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <telemetry_service+0x200>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ca:	2173      	movs	r1, #115	@ 0x73
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7fe fbec 	bl	80009aa <tlv_put_u32>
 80021d2:	0003      	movs	r3, r0
 80021d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (g_last_raw_valid) tw = tlv_put_i32(tw, TLV_LOAD_RAW, g_last_raw);
 80021d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <telemetry_service+0x1f0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <telemetry_service+0xdc>
 80021de:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <telemetry_service+0x1ec>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021e4:	2130      	movs	r1, #48	@ 0x30
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe fc18 	bl	8000a1c <tlv_put_i32>
 80021ec:	0003      	movs	r3, r0
 80021ee:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // RPM from capture
    if (ic_has_lock && ic_period_us) {
 80021f0:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <telemetry_service+0x204>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d020      	beq.n	800223c <telemetry_service+0x128>
 80021fa:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <telemetry_service+0x200>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01c      	beq.n	800223c <telemetry_service+0x128>
        const uint32_t P = 14; // rotor magnets (try 7 if you discover they mean pole pairs)
 8002202:	230e      	movs	r3, #14
 8002204:	673b      	str	r3, [r7, #112]	@ 0x70
        uint32_t hz  = 1000000u / ic_period_us;
 8002206:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <telemetry_service+0x200>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0019      	movs	r1, r3
 800220c:	4843      	ldr	r0, [pc, #268]	@ (800231c <telemetry_service+0x208>)
 800220e:	f7fd ff7b 	bl	8000108 <__udivsi3>
 8002212:	0003      	movs	r3, r0
 8002214:	66fb      	str	r3, [r7, #108]	@ 0x6c
        uint32_t rpm = (hz * 60u) / (P);
 8002216:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002218:	0013      	movs	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002222:	0018      	movs	r0, r3
 8002224:	f7fd ff70 	bl	8000108 <__udivsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	66bb      	str	r3, [r7, #104]	@ 0x68
        tw = tlv_put_u32(tw, TLV_ESC_RPM1, rpm);
 800222c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800222e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002230:	2170      	movs	r1, #112	@ 0x70
 8002232:	0018      	movs	r0, r3
 8002234:	f7fe fbb9 	bl	80009aa <tlv_put_u32>
 8002238:	0003      	movs	r3, r0
 800223a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }


    // new voltage TLVs (always include)
    adc_compute_mv();
 800223c:	f7ff fc64 	bl	8001b08 <adc_compute_mv>
    tw = tlv_put_u32(tw, TLV_VIN1_MV, g_vin1_mV);
 8002240:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <telemetry_service+0x20c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002246:	2180      	movs	r1, #128	@ 0x80
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe fbae 	bl	80009aa <tlv_put_u32>
 800224e:	0003      	movs	r3, r0
 8002250:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_VIN2_MV, g_vin2_mV);
 8002252:	4b34      	ldr	r3, [pc, #208]	@ (8002324 <telemetry_service+0x210>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002258:	2181      	movs	r1, #129	@ 0x81
 800225a:	0018      	movs	r0, r3
 800225c:	f7fe fba5 	bl	80009aa <tlv_put_u32>
 8002260:	0003      	movs	r3, r0
 8002262:	67fb      	str	r3, [r7, #124]	@ 0x7c

    tw = tlv_put_u32(tw, 0x90, g_adc[0]); // RAW_PA3
 8002264:	4b30      	ldr	r3, [pc, #192]	@ (8002328 <telemetry_service+0x214>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	001a      	movs	r2, r3
 800226c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800226e:	2190      	movs	r1, #144	@ 0x90
 8002270:	0018      	movs	r0, r3
 8002272:	f7fe fb9a 	bl	80009aa <tlv_put_u32>
 8002276:	0003      	movs	r3, r0
 8002278:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0x91, g_adc[1]); // RAW_PA4
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <telemetry_service+0x214>)
 800227c:	885b      	ldrh	r3, [r3, #2]
 800227e:	b29b      	uxth	r3, r3
 8002280:	001a      	movs	r2, r3
 8002282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002284:	2191      	movs	r1, #145	@ 0x91
 8002286:	0018      	movs	r0, r3
 8002288:	f7fe fb8f 	bl	80009aa <tlv_put_u32>
 800228c:	0003      	movs	r3, r0
 800228e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0x92, g_adc[2]); // RAW_VREFINT
 8002290:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <telemetry_service+0x214>)
 8002292:	889b      	ldrh	r3, [r3, #4]
 8002294:	b29b      	uxth	r3, r3
 8002296:	001a      	movs	r2, r3
 8002298:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800229a:	2192      	movs	r1, #146	@ 0x92
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe fb84 	bl	80009aa <tlv_put_u32>
 80022a2:	0003      	movs	r3, r0
 80022a4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    tw = tlv_put_i32(tw, TLV_I1_MA, g_i1_mA);
 80022a6:	4b21      	ldr	r3, [pc, #132]	@ (800232c <telemetry_service+0x218>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022ac:	2182      	movs	r1, #130	@ 0x82
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fe fbb4 	bl	8000a1c <tlv_put_i32>
 80022b4:	0003      	movs	r3, r0
 80022b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_i32(tw, TLV_I2_MA, g_i2_mA);
 80022b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <telemetry_service+0x21c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022be:	2183      	movs	r1, #131	@ 0x83
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7fe fbab 	bl	8000a1c <tlv_put_i32>
 80022c6:	0003      	movs	r3, r0
 80022c8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // send telemetry to whoever requested streaming
    extern int comm_send(uint8_t rx_id, uint8_t tx_id, uint8_t msg_type,
                         uint8_t flags, uint8_t reqid, const uint8_t *payload, uint16_t payload_len);

    comm_send(g_stream_dest_id, 0x20/*MCU id*/, MT_TEL_A, 0x01, 0, t, (uint16_t)(tw - t));
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <telemetry_service+0x220>)
 80022cc:	7818      	ldrb	r0, [r3, #0]
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2301      	movs	r3, #1
 80022e2:	2265      	movs	r2, #101	@ 0x65
 80022e4:	2120      	movs	r1, #32
 80022e6:	f7fe ff41 	bl	800116c <comm_send>
 80022ea:	e002      	b.n	80022f2 <telemetry_service+0x1de>
    if (g_stream_period_ms == 0) return;
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	e000      	b.n	80022f2 <telemetry_service+0x1de>
    if ((int32_t)(now - g_next_stream_ms) < 0) return;
 80022f0:	46c0      	nop			@ (mov r8, r8)
}
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b020      	add	sp, #128	@ 0x80
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000528 	.word	0x20000528
 80022fc:	2000052c 	.word	0x2000052c
 8002300:	20000544 	.word	0x20000544
 8002304:	20000548 	.word	0x20000548
 8002308:	20000006 	.word	0x20000006
 800230c:	20000008 	.word	0x20000008
 8002310:	20000550 	.word	0x20000550
 8002314:	2000054c 	.word	0x2000054c
 8002318:	20000554 	.word	0x20000554
 800231c:	000f4240 	.word	0x000f4240
 8002320:	2000053c 	.word	0x2000053c
 8002324:	20000540 	.word	0x20000540
 8002328:	20000530 	.word	0x20000530
 800232c:	20000520 	.word	0x20000520
 8002330:	20000524 	.word	0x20000524
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM3) return;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d15d      	bne.n	8002406 <HAL_TIM_IC_CaptureCallback+0xce>

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7f1b      	ldrb	r3, [r3, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d12a      	bne.n	80023a8 <HAL_TIM_IC_CaptureCallback+0x70>
        uint16_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2100      	movs	r1, #0
 8002356:	0018      	movs	r0, r3
 8002358:	f003 fbac 	bl	8005ab4 <HAL_TIM_ReadCapturedValue>
 800235c:	0002      	movs	r2, r0
 800235e:	240a      	movs	r4, #10
 8002360:	193b      	adds	r3, r7, r4
 8002362:	801a      	strh	r2, [r3, #0]
        static uint16_t last1 = 0;
        uint16_t dt = (uint16_t)(now - last1);   // 16-bit wrap ok
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	2008      	movs	r0, #8
 800236a:	183b      	adds	r3, r7, r0
 800236c:	1939      	adds	r1, r7, r4
 800236e:	8809      	ldrh	r1, [r1, #0]
 8002370:	1a8a      	subs	r2, r1, r2
 8002372:	801a      	strh	r2, [r3, #0]
        last1 = now;
 8002374:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002376:	193a      	adds	r2, r7, r4
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	801a      	strh	r2, [r3, #0]
        if (dt > 0 && dt < 60000) { ic_period_us = dt; ic_has_lock = 1; }
 800237c:	183b      	adds	r3, r7, r0
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_TIM_IC_CaptureCallback+0x64>
 8002384:	183b      	adds	r3, r7, r0
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	4a23      	ldr	r2, [pc, #140]	@ (8002418 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d806      	bhi.n	800239c <HAL_TIM_IC_CaptureCallback+0x64>
 800238e:	183b      	adds	r3, r7, r0
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
        ic_irq_count++;
 800239c:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_TIM_IC_CaptureCallback+0xec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_TIM_IC_CaptureCallback+0xec>)
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e02f      	b.n	8002408 <HAL_TIM_IC_CaptureCallback+0xd0>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7f1b      	ldrb	r3, [r3, #28]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d12b      	bne.n	8002408 <HAL_TIM_IC_CaptureCallback+0xd0>
        uint16_t now = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2104      	movs	r1, #4
 80023b4:	0018      	movs	r0, r3
 80023b6:	f003 fb7d 	bl	8005ab4 <HAL_TIM_ReadCapturedValue>
 80023ba:	0002      	movs	r2, r0
 80023bc:	240e      	movs	r4, #14
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	801a      	strh	r2, [r3, #0]
        static uint16_t last2 = 0;
        uint16_t dt = (uint16_t)(now - last2);
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	200c      	movs	r0, #12
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	1939      	adds	r1, r7, r4
 80023cc:	8809      	ldrh	r1, [r1, #0]
 80023ce:	1a8a      	subs	r2, r1, r2
 80023d0:	801a      	strh	r2, [r3, #0]
        last2 = now;
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80023d4:	193a      	adds	r2, r7, r4
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	801a      	strh	r2, [r3, #0]
        if (dt > 0 && dt < 60000) { ic_period_us = dt; ic_has_lock = 1; }
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_TIM_IC_CaptureCallback+0xc2>
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d806      	bhi.n	80023fa <HAL_TIM_IC_CaptureCallback+0xc2>
 80023ec:	183b      	adds	r3, r7, r0
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
        ic_irq_count++;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_TIM_IC_CaptureCallback+0xec>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e000      	b.n	8002408 <HAL_TIM_IC_CaptureCallback+0xd0>
    if (htim->Instance != TIM3) return;
 8002406:	46c0      	nop			@ (mov r8, r8)
    }
}
 8002408:	46bd      	mov	sp, r7
 800240a:	b005      	add	sp, #20
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	40000400 	.word	0x40000400
 8002414:	20000556 	.word	0x20000556
 8002418:	0000ea5f 	.word	0x0000ea5f
 800241c:	2000054c 	.word	0x2000054c
 8002420:	20000554 	.word	0x20000554
 8002424:	20000550 	.word	0x20000550
 8002428:	20000558 	.word	0x20000558

0800242c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
        // if you want, you can detect “no pulse” here (timeout)
        // e.g., zero ic_has_lock after some ms without captures
    }
}
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002442:	f000 fc27 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002446:	f000 f83d 	bl	80024c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244a:	f7ff f907 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 800244e:	f7ff f8df 	bl	8001610 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002452:	f000 fb19 	bl	8002a88 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002456:	f7ff fa1b 	bl	8001890 <MX_I2C1_Init>
  MX_TIM1_Init();
 800245a:	f000 f925 	bl	80026a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800245e:	f000 f9e5 	bl	800282c <MX_TIM3_Init>
  MX_ADC_Init();
 8002462:	f7fe f94f 	bl	8000704 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <main+0x78>)
 8002468:	2100      	movs	r1, #0
 800246a:	0018      	movs	r0, r3
 800246c:	f002 feee 	bl	800524c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002470:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <main+0x78>)
 8002472:	2104      	movs	r1, #4
 8002474:	0018      	movs	r0, r3
 8002476:	f002 fee9 	bl	800524c <HAL_TIM_IC_Start_IT>
  esc_init();
 800247a:	f7ff fad1 	bl	8001a20 <esc_init>

  // apply initial µs (will be overwritten by commands)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1050);
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <main+0x7c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <main+0x80>)
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1050);
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <main+0x7c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <main+0x80>)
 800248c:	641a      	str	r2, [r3, #64]	@ 0x40

  adc_try_start();          // non-fatal start (sets g_adc_ok)
 800248e:	f7ff fb09 	bl	8001aa4 <adc_try_start>

  comm_init(&huart1);
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <main+0x84>)
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe ff1d 	bl	80012d4 <comm_init>
  uint32_t last_hello = HAL_GetTick();
 800249a:	f000 fc55 	bl	8002d48 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	607b      	str	r3, [r7, #4]

  hx711_init();
 80024a2:	f7ff f999 	bl	80017d8 <hx711_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  comm_poll();
 80024a6:	f7fe ffef 	bl	8001488 <comm_poll>
	  telemetry_service();
 80024aa:	f7ff fe33 	bl	8002114 <telemetry_service>
	  comm_poll();
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	e7f9      	b.n	80024a6 <main+0x6a>
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	200005a4 	.word	0x200005a4
 80024b8:	2000055c 	.word	0x2000055c
 80024bc:	0000041a 	.word	0x0000041a
 80024c0:	200005ec 	.word	0x200005ec

080024c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b095      	sub	sp, #84	@ 0x54
 80024c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ca:	2420      	movs	r4, #32
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	0018      	movs	r0, r3
 80024d0:	2330      	movs	r3, #48	@ 0x30
 80024d2:	001a      	movs	r2, r3
 80024d4:	2100      	movs	r1, #0
 80024d6:	f005 fa40 	bl	800795a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024da:	2310      	movs	r3, #16
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	0018      	movs	r0, r3
 80024e0:	2310      	movs	r3, #16
 80024e2:	001a      	movs	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f005 fa38 	bl	800795a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ea:	003b      	movs	r3, r7
 80024ec:	0018      	movs	r0, r3
 80024ee:	2310      	movs	r3, #16
 80024f0:	001a      	movs	r2, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	f005 fa31 	bl	800795a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024f8:	0021      	movs	r1, r4
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2212      	movs	r2, #18
 80024fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2201      	movs	r2, #1
 8002504:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2201      	movs	r2, #1
 800250a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2210      	movs	r2, #16
 8002510:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2210      	movs	r2, #16
 8002516:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2202      	movs	r2, #2
 800251c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	22a0      	movs	r2, #160	@ 0xa0
 8002528:	0392      	lsls	r2, r2, #14
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2200      	movs	r2, #0
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002532:	187b      	adds	r3, r7, r1
 8002534:	0018      	movs	r0, r3
 8002536:	f001 ffb1 	bl	800449c <HAL_RCC_OscConfig>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800253e:	f000 f82b 	bl	8002598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002542:	2110      	movs	r1, #16
 8002544:	187b      	adds	r3, r7, r1
 8002546:	2207      	movs	r2, #7
 8002548:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2202      	movs	r2, #2
 800254e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2101      	movs	r1, #1
 8002560:	0018      	movs	r0, r3
 8002562:	f002 fab5 	bl	8004ad0 <HAL_RCC_ClockConfig>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d001      	beq.n	800256e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800256a:	f000 f815 	bl	8002598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800256e:	003b      	movs	r3, r7
 8002570:	2221      	movs	r2, #33	@ 0x21
 8002572:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002574:	003b      	movs	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800257a:	003b      	movs	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002580:	003b      	movs	r3, r7
 8002582:	0018      	movs	r0, r3
 8002584:	f002 fbe8 	bl	8004d58 <HAL_RCCEx_PeriphCLKConfig>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d001      	beq.n	8002590 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800258c:	f000 f804 	bl	8002598 <Error_Handler>
  }
}
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b015      	add	sp, #84	@ 0x54
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	e7fd      	b.n	80025a0 <Error_Handler+0x8>

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <HAL_MspInit+0x44>)
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_MspInit+0x44>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	430a      	orrs	r2, r1
 80025b4:	619a      	str	r2, [r3, #24]
 80025b6:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <HAL_MspInit+0x44>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_MspInit+0x44>)
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <HAL_MspInit+0x44>)
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	0549      	lsls	r1, r1, #21
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_MspInit+0x44>)
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	055b      	lsls	r3, r3, #21
 80025d8:	4013      	ands	r3, r2
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	40021000 	.word	0x40021000

080025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025f0:	46c0      	nop			@ (mov r8, r8)
 80025f2:	e7fd      	b.n	80025f0 <NMI_Handler+0x4>

080025f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	e7fd      	b.n	80025f8 <HardFault_Handler+0x4>

080025fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002614:	f000 fb86 	bl	8002d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <DMA1_Channel1_IRQHandler+0x14>)
 8002626:	0018      	movs	r0, r3
 8002628:	f001 fb6d 	bl	8003d06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	20000074 	.word	0x20000074

08002638 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800263e:	0018      	movs	r0, r3
 8002640:	f001 fb61 	bl	8003d06 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002646:	0018      	movs	r0, r3
 8002648:	f001 fb5d 	bl	8003d06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800264c:	46c0      	nop			@ (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	200006b8 	.word	0x200006b8
 8002658:	20000674 	.word	0x20000674

0800265c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <TIM3_IRQHandler+0x14>)
 8002662:	0018      	movs	r0, r3
 8002664:	f002 fefa 	bl	800545c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002668:	46c0      	nop			@ (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	200005a4 	.word	0x200005a4

08002674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET){
 8002678:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <USART1_IRQHandler+0x24>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2210      	movs	r2, #16
 8002680:	4013      	ands	r3, r2
 8002682:	2b10      	cmp	r3, #16
 8002684:	d101      	bne.n	800268a <USART1_IRQHandler+0x16>
	      comm_on_uart_idle_irq();
 8002686:	f7fe fe51 	bl	800132c <comm_on_uart_idle_irq>
	  }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800268a:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <USART1_IRQHandler+0x24>)
 800268c:	0018      	movs	r0, r3
 800268e:	f004 f89f 	bl	80067d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200005ec 	.word	0x200005ec

0800269c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b096      	sub	sp, #88	@ 0x58
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ae:	2348      	movs	r3, #72	@ 0x48
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	0018      	movs	r0, r3
 80026b4:	2310      	movs	r3, #16
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f005 f94e 	bl	800795a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026be:	2340      	movs	r3, #64	@ 0x40
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	0018      	movs	r0, r3
 80026c4:	2308      	movs	r3, #8
 80026c6:	001a      	movs	r2, r3
 80026c8:	2100      	movs	r1, #0
 80026ca:	f005 f946 	bl	800795a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ce:	2324      	movs	r3, #36	@ 0x24
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	0018      	movs	r0, r3
 80026d4:	231c      	movs	r3, #28
 80026d6:	001a      	movs	r2, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	f005 f93e 	bl	800795a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	0018      	movs	r0, r3
 80026e2:	2320      	movs	r3, #32
 80026e4:	001a      	movs	r2, r3
 80026e6:	2100      	movs	r1, #0
 80026e8:	f005 f937 	bl	800795a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <MX_TIM1_Init+0x174>)
 80026ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002820 <MX_TIM1_Init+0x178>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80026f2:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <MX_TIM1_Init+0x174>)
 80026f4:	222f      	movs	r2, #47	@ 0x2f
 80026f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b48      	ldr	r3, [pc, #288]	@ (800281c <MX_TIM1_Init+0x174>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80026fe:	4b47      	ldr	r3, [pc, #284]	@ (800281c <MX_TIM1_Init+0x174>)
 8002700:	4a48      	ldr	r2, [pc, #288]	@ (8002824 <MX_TIM1_Init+0x17c>)
 8002702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002704:	4b45      	ldr	r3, [pc, #276]	@ (800281c <MX_TIM1_Init+0x174>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800270a:	4b44      	ldr	r3, [pc, #272]	@ (800281c <MX_TIM1_Init+0x174>)
 800270c:	2200      	movs	r2, #0
 800270e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002710:	4b42      	ldr	r3, [pc, #264]	@ (800281c <MX_TIM1_Init+0x174>)
 8002712:	2280      	movs	r2, #128	@ 0x80
 8002714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002716:	4b41      	ldr	r3, [pc, #260]	@ (800281c <MX_TIM1_Init+0x174>)
 8002718:	0018      	movs	r0, r3
 800271a:	f002 fbeb 	bl	8004ef4 <HAL_TIM_Base_Init>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002722:	f7ff ff39 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002726:	2148      	movs	r1, #72	@ 0x48
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	0152      	lsls	r2, r2, #5
 800272e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002730:	187a      	adds	r2, r7, r1
 8002732:	4b3a      	ldr	r3, [pc, #232]	@ (800281c <MX_TIM1_Init+0x174>)
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f003 f8e8 	bl	800590c <HAL_TIM_ConfigClockSource>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002740:	f7ff ff2a 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002744:	4b35      	ldr	r3, [pc, #212]	@ (800281c <MX_TIM1_Init+0x174>)
 8002746:	0018      	movs	r0, r3
 8002748:	f002 fc24 	bl	8004f94 <HAL_TIM_PWM_Init>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002750:	f7ff ff22 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2140      	movs	r1, #64	@ 0x40
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002762:	187a      	adds	r2, r7, r1
 8002764:	4b2d      	ldr	r3, [pc, #180]	@ (800281c <MX_TIM1_Init+0x174>)
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f003 fe2f 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002772:	f7ff ff11 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002776:	2124      	movs	r1, #36	@ 0x24
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2260      	movs	r2, #96	@ 0x60
 800277c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1050;
 800277e:	187b      	adds	r3, r7, r1
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <MX_TIM1_Init+0x180>)
 8002782:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a2:	1879      	adds	r1, r7, r1
 80027a4:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <MX_TIM1_Init+0x174>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	0018      	movs	r0, r3
 80027aa:	f002 ffe9 	bl	8005780 <HAL_TIM_PWM_ConfigChannel>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80027b2:	f7ff fef1 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027b6:	2324      	movs	r3, #36	@ 0x24
 80027b8:	18f9      	adds	r1, r7, r3
 80027ba:	4b18      	ldr	r3, [pc, #96]	@ (800281c <MX_TIM1_Init+0x174>)
 80027bc:	220c      	movs	r2, #12
 80027be:	0018      	movs	r0, r3
 80027c0:	f002 ffde 	bl	8005780 <HAL_TIM_PWM_ConfigChannel>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80027c8:	f7ff fee6 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	2280      	movs	r2, #128	@ 0x80
 80027ee:	0192      	lsls	r2, r2, #6
 80027f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027f8:	1d3a      	adds	r2, r7, #4
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <MX_TIM1_Init+0x174>)
 80027fc:	0011      	movs	r1, r2
 80027fe:	0018      	movs	r0, r3
 8002800:	f003 fe3c 	bl	800647c <HAL_TIMEx_ConfigBreakDeadTime>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8002808:	f7ff fec6 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <MX_TIM1_Init+0x174>)
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f8fa 	bl	8002a08 <HAL_TIM_MspPostInit>

}
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b016      	add	sp, #88	@ 0x58
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000055c 	.word	0x2000055c
 8002820:	40012c00 	.word	0x40012c00
 8002824:	00004e1f 	.word	0x00004e1f
 8002828:	0000041a 	.word	0x0000041a

0800282c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002832:	2318      	movs	r3, #24
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	2310      	movs	r3, #16
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f005 f88c 	bl	800795a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002842:	2310      	movs	r3, #16
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	0018      	movs	r0, r3
 8002848:	2308      	movs	r3, #8
 800284a:	001a      	movs	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f005 f884 	bl	800795a <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002852:	003b      	movs	r3, r7
 8002854:	0018      	movs	r0, r3
 8002856:	2310      	movs	r3, #16
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f005 f87d 	bl	800795a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002860:	4b32      	ldr	r3, [pc, #200]	@ (800292c <MX_TIM3_Init+0x100>)
 8002862:	4a33      	ldr	r2, [pc, #204]	@ (8002930 <MX_TIM3_Init+0x104>)
 8002864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8002866:	4b31      	ldr	r3, [pc, #196]	@ (800292c <MX_TIM3_Init+0x100>)
 8002868:	222f      	movs	r2, #47	@ 0x2f
 800286a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <MX_TIM3_Init+0x100>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <MX_TIM3_Init+0x100>)
 8002874:	4a2f      	ldr	r2, [pc, #188]	@ (8002934 <MX_TIM3_Init+0x108>)
 8002876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b2c      	ldr	r3, [pc, #176]	@ (800292c <MX_TIM3_Init+0x100>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <MX_TIM3_Init+0x100>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <MX_TIM3_Init+0x100>)
 8002886:	0018      	movs	r0, r3
 8002888:	f002 fb34 	bl	8004ef4 <HAL_TIM_Base_Init>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002890:	f7ff fe82 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002894:	2118      	movs	r1, #24
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	0152      	lsls	r2, r2, #5
 800289c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800289e:	187a      	adds	r2, r7, r1
 80028a0:	4b22      	ldr	r3, [pc, #136]	@ (800292c <MX_TIM3_Init+0x100>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f003 f831 	bl	800590c <HAL_TIM_ConfigClockSource>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80028ae:	f7ff fe73 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <MX_TIM3_Init+0x100>)
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 fc71 	bl	800519c <HAL_TIM_IC_Init>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80028be:	f7ff fe6b 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c2:	2110      	movs	r1, #16
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028d0:	187a      	adds	r2, r7, r1
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <MX_TIM3_Init+0x100>)
 80028d4:	0011      	movs	r1, r2
 80028d6:	0018      	movs	r0, r3
 80028d8:	f003 fd78 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80028e0:	f7ff fe5a 	bl	8002598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028e4:	003b      	movs	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028ea:	003b      	movs	r3, r7
 80028ec:	2201      	movs	r2, #1
 80028ee:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028f0:	003b      	movs	r3, r7
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 8;
 80028f6:	003b      	movs	r3, r7
 80028f8:	2208      	movs	r2, #8
 80028fa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028fc:	0039      	movs	r1, r7
 80028fe:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <MX_TIM3_Init+0x100>)
 8002900:	2200      	movs	r2, #0
 8002902:	0018      	movs	r0, r3
 8002904:	f002 fe98 	bl	8005638 <HAL_TIM_IC_ConfigChannel>
 8002908:	1e03      	subs	r3, r0, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800290c:	f7ff fe44 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002910:	0039      	movs	r1, r7
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <MX_TIM3_Init+0x100>)
 8002914:	2204      	movs	r2, #4
 8002916:	0018      	movs	r0, r3
 8002918:	f002 fe8e 	bl	8005638 <HAL_TIM_IC_ConfigChannel>
 800291c:	1e03      	subs	r3, r0, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002920:	f7ff fe3a 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b00a      	add	sp, #40	@ 0x28
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200005a4 	.word	0x200005a4
 8002930:	40000400 	.word	0x40000400
 8002934:	0000ffff 	.word	0x0000ffff

08002938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	2314      	movs	r3, #20
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	0018      	movs	r0, r3
 8002946:	2314      	movs	r3, #20
 8002948:	001a      	movs	r2, r3
 800294a:	2100      	movs	r1, #0
 800294c:	f005 f805 	bl	800795a <memset>
  if(tim_baseHandle->Instance==TIM1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a29      	ldr	r2, [pc, #164]	@ (80029fc <HAL_TIM_Base_MspInit+0xc4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800295a:	4b29      	ldr	r3, [pc, #164]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 8002960:	2180      	movs	r1, #128	@ 0x80
 8002962:	0109      	lsls	r1, r1, #4
 8002964:	430a      	orrs	r2, r1
 8002966:	619a      	str	r2, [r3, #24]
 8002968:	4b25      	ldr	r3, [pc, #148]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002976:	e03d      	b.n	80029f4 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM3)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a21      	ldr	r2, [pc, #132]	@ (8002a04 <HAL_TIM_Base_MspInit+0xcc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d138      	bne.n	80029f4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002982:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 8002988:	2102      	movs	r1, #2
 800298a:	430a      	orrs	r2, r1
 800298c:	61da      	str	r2, [r3, #28]
 800298e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	2202      	movs	r2, #2
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 80029a0:	2180      	movs	r1, #128	@ 0x80
 80029a2:	0289      	lsls	r1, r1, #10
 80029a4:	430a      	orrs	r2, r1
 80029a6:	615a      	str	r2, [r3, #20]
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_TIM_Base_MspInit+0xc8>)
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029b6:	2114      	movs	r1, #20
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	22c0      	movs	r2, #192	@ 0xc0
 80029bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2202      	movs	r2, #2
 80029c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2201      	movs	r2, #1
 80029d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	187a      	adds	r2, r7, r1
 80029d8:	2390      	movs	r3, #144	@ 0x90
 80029da:	05db      	lsls	r3, r3, #23
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f001 fa7c 	bl	8003edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2100      	movs	r1, #0
 80029e8:	2010      	movs	r0, #16
 80029ea:	f001 f82f 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029ee:	2010      	movs	r0, #16
 80029f0:	f001 f841 	bl	8003a76 <HAL_NVIC_EnableIRQ>
}
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b00a      	add	sp, #40	@ 0x28
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	240c      	movs	r4, #12
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	0018      	movs	r0, r3
 8002a16:	2314      	movs	r3, #20
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f004 ff9d 	bl	800795a <memset>
  if(timHandle->Instance==TIM1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_TIM_MspPostInit+0x78>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d125      	bne.n	8002a76 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <HAL_TIM_MspPostInit+0x7c>)
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_TIM_MspPostInit+0x7c>)
 8002a30:	2180      	movs	r1, #128	@ 0x80
 8002a32:	0289      	lsls	r1, r1, #10
 8002a34:	430a      	orrs	r2, r1
 8002a36:	615a      	str	r2, [r3, #20]
 8002a38:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_TIM_MspPostInit+0x7c>)
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	029b      	lsls	r3, r3, #10
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002a46:	193b      	adds	r3, r7, r4
 8002a48:	2290      	movs	r2, #144	@ 0x90
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	0021      	movs	r1, r4
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2202      	movs	r2, #2
 8002a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2202      	movs	r2, #2
 8002a66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	187a      	adds	r2, r7, r1
 8002a6a:	2390      	movs	r3, #144	@ 0x90
 8002a6c:	05db      	lsls	r3, r3, #23
 8002a6e:	0011      	movs	r1, r2
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 fa33 	bl	8003edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b009      	add	sp, #36	@ 0x24
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40021000 	.word	0x40021000

08002a88 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002a8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ae4 <MX_USART1_UART_Init+0x5c>)
 8002a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002a94:	22e1      	movs	r2, #225	@ 0xe1
 8002a96:	0312      	lsls	r2, r2, #12
 8002a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002aae:	220c      	movs	r2, #12
 8002ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aca:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <MX_USART1_UART_Init+0x58>)
 8002acc:	0018      	movs	r0, r3
 8002ace:	f003 fd43 	bl	8006558 <HAL_UART_Init>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ad6:	f7ff fd5f 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200005ec 	.word	0x200005ec
 8002ae4:	40013800 	.word	0x40013800

08002ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b08b      	sub	sp, #44	@ 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	2414      	movs	r4, #20
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	0018      	movs	r0, r3
 8002af6:	2314      	movs	r3, #20
 8002af8:	001a      	movs	r2, r3
 8002afa:	2100      	movs	r1, #0
 8002afc:	f004 ff2d 	bl	800795a <memset>
  if(uartHandle->Instance==USART1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a47      	ldr	r2, [pc, #284]	@ (8002c24 <HAL_UART_MspInit+0x13c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d000      	beq.n	8002b0c <HAL_UART_MspInit+0x24>
 8002b0a:	e087      	b.n	8002c1c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b0c:	4b46      	ldr	r3, [pc, #280]	@ (8002c28 <HAL_UART_MspInit+0x140>)
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	4b45      	ldr	r3, [pc, #276]	@ (8002c28 <HAL_UART_MspInit+0x140>)
 8002b12:	2180      	movs	r1, #128	@ 0x80
 8002b14:	01c9      	lsls	r1, r1, #7
 8002b16:	430a      	orrs	r2, r1
 8002b18:	619a      	str	r2, [r3, #24]
 8002b1a:	4b43      	ldr	r3, [pc, #268]	@ (8002c28 <HAL_UART_MspInit+0x140>)
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	01db      	lsls	r3, r3, #7
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b28:	4b3f      	ldr	r3, [pc, #252]	@ (8002c28 <HAL_UART_MspInit+0x140>)
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c28 <HAL_UART_MspInit+0x140>)
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	0289      	lsls	r1, r1, #10
 8002b32:	430a      	orrs	r2, r1
 8002b34:	615a      	str	r2, [r3, #20]
 8002b36:	4b3c      	ldr	r3, [pc, #240]	@ (8002c28 <HAL_UART_MspInit+0x140>)
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b44:	0021      	movs	r1, r4
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <HAL_UART_MspInit+0x144>)
 8002b4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2202      	movs	r2, #2
 8002b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2201      	movs	r2, #1
 8002b62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	187a      	adds	r2, r7, r1
 8002b66:	2390      	movs	r3, #144	@ 0x90
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f001 f9b5 	bl	8003edc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002b72:	4b2f      	ldr	r3, [pc, #188]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b74:	4a2f      	ldr	r2, [pc, #188]	@ (8002c34 <HAL_UART_MspInit+0x14c>)
 8002b76:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b84:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b86:	2280      	movs	r2, #128	@ 0x80
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8a:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b96:	4b26      	ldr	r3, [pc, #152]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b98:	2220      	movs	r2, #32
 8002b9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002b9e:	2280      	movs	r2, #128	@ 0x80
 8002ba0:	0152      	lsls	r2, r2, #5
 8002ba2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ba4:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 ff82 	bl	8003ab0 <HAL_DMA_Init>
 8002bac:	1e03      	subs	r3, r0, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002bb0:	f7ff fcf2 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002bb8:	675a      	str	r2, [r3, #116]	@ 0x74
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_UART_MspInit+0x148>)
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_UART_MspInit+0x154>)
 8002bc4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bc8:	2210      	movs	r2, #16
 8002bca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd2:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 ff5c 	bl	8003ab0 <HAL_DMA_Init>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8002bfc:	f7ff fccc 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a0d      	ldr	r2, [pc, #52]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002c04:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_UART_MspInit+0x150>)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	201b      	movs	r0, #27
 8002c12:	f000 ff1b 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c16:	201b      	movs	r0, #27
 8002c18:	f000 ff2d 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b00b      	add	sp, #44	@ 0x2c
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	00008004 	.word	0x00008004
 8002c30:	20000674 	.word	0x20000674
 8002c34:	40020030 	.word	0x40020030
 8002c38:	200006b8 	.word	0x200006b8
 8002c3c:	4002001c 	.word	0x4002001c

08002c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c40:	480d      	ldr	r0, [pc, #52]	@ (8002c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c44:	f7ff fd2a 	bl	800269c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c48:	480c      	ldr	r0, [pc, #48]	@ (8002c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c4a:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <LoopForever+0xe>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c60:	4c0a      	ldr	r4, [pc, #40]	@ (8002c8c <LoopForever+0x16>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c6e:	f004 fe7d 	bl	800796c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c72:	f7ff fbe3 	bl	800243c <main>

08002c76 <LoopForever>:

LoopForever:
    b LoopForever
 8002c76:	e7fe      	b.n	8002c76 <LoopForever>
  ldr   r0, =_estack
 8002c78:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002c84:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 8002c88:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002c8c:	20000700 	.word	0x20000700

08002c90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC1_IRQHandler>
	...

08002c94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_Init+0x24>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_Init+0x24>)
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f000 f809 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002caa:	f7ff fc7b 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <HAL_InitTick+0x5c>)
 8002cc6:	681c      	ldr	r4, [r3, #0]
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_InitTick+0x60>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	0019      	movs	r1, r3
 8002cce:	23fa      	movs	r3, #250	@ 0xfa
 8002cd0:	0098      	lsls	r0, r3, #2
 8002cd2:	f7fd fa19 	bl	8000108 <__udivsi3>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	0019      	movs	r1, r3
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f7fd fa14 	bl	8000108 <__udivsi3>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fed7 	bl	8003a96 <HAL_SYSTICK_Config>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e00f      	b.n	8002d10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d80b      	bhi.n	8002d0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	425b      	negs	r3, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fea4 	bl	8003a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_InitTick+0x64>)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b003      	add	sp, #12
 8002d16:	bd90      	pop	{r4, r7, pc}
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	20000014 	.word	0x20000014
 8002d20:	20000010 	.word	0x20000010

08002d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_IncTick+0x1c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_IncTick+0x20>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	18d2      	adds	r2, r2, r3
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_IncTick+0x20>)
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	20000014 	.word	0x20000014
 8002d44:	200006fc 	.word	0x200006fc

08002d48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	@ (8002d58 <HAL_GetTick+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	200006fc 	.word	0x200006fc

08002d5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e125      	b.n	8002fc6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2234      	movs	r2, #52	@ 0x34
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fd fd44 	bl	8000820 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d000      	beq.n	8002da4 <HAL_ADC_Init+0x48>
 8002da2:	e103      	b.n	8002fac <HAL_ADC_Init+0x250>
 8002da4:	230f      	movs	r3, #15
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d000      	beq.n	8002db0 <HAL_ADC_Init+0x54>
 8002dae:	e0fd      	b.n	8002fac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2204      	movs	r2, #4
 8002db8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002dba:	d000      	beq.n	8002dbe <HAL_ADC_Init+0x62>
 8002dbc:	e0f6      	b.n	8002fac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	4a83      	ldr	r2, [pc, #524]	@ (8002fd0 <HAL_ADC_Init+0x274>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d112      	bne.n	8002e02 <HAL_ADC_Init+0xa6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d009      	beq.n	8002dfe <HAL_ADC_Init+0xa2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	401a      	ands	r2, r3
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0xa6>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_ADC_Init+0xa8>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2218      	movs	r2, #24
 8002e10:	4393      	bics	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	0899      	lsrs	r1, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4964      	ldr	r1, [pc, #400]	@ (8002fd4 <HAL_ADC_Init+0x278>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7e1b      	ldrb	r3, [r3, #24]
 8002e4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e5b      	ldrb	r3, [r3, #25]
 8002e50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7e9b      	ldrb	r3, [r3, #26]
 8002e58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002e5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d002      	beq.n	8002e6a <HAL_ADC_Init+0x10e>
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_Init+0x110>
 8002e6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002e72:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_Init+0x124>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e000      	b.n	8002e82 <HAL_ADC_Init+0x126>
 8002e80:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002e82:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2124      	movs	r1, #36	@ 0x24
 8002e88:	5c5b      	ldrb	r3, [r3, r1]
 8002e8a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e8c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7edb      	ldrb	r3, [r3, #27]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d115      	bne.n	8002ec8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e9b      	ldrb	r3, [r3, #26]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2280      	movs	r2, #128	@ 0x80
 8002ea8:	0252      	lsls	r2, r2, #9
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	e00b      	b.n	8002ec8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	23c2      	movs	r3, #194	@ 0xc2
 8002ece:	33ff      	adds	r3, #255	@ 0xff
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d007      	beq.n	8002ee4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002edc:	4313      	orrs	r3, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68d9      	ldr	r1, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	055b      	lsls	r3, r3, #21
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d01b      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d017      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d013      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d00f      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d00b      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d007      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d003      	beq.n	8002f38 <HAL_ADC_Init+0x1dc>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d112      	bne.n	8002f5e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2107      	movs	r1, #7
 8002f44:	438a      	bics	r2, r1
 8002f46:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6959      	ldr	r1, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	2207      	movs	r2, #7
 8002f54:	401a      	ands	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <HAL_ADC_Init+0x27c>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d10b      	bne.n	8002f86 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	2203      	movs	r2, #3
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f84:	e01c      	b.n	8002fc0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	2212      	movs	r2, #18
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	2210      	movs	r2, #16
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002faa:	e009      	b.n	8002fc0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002fb8:	230f      	movs	r3, #15
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	781b      	ldrb	r3, [r3, #0]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	fffffefd 	.word	0xfffffefd
 8002fd4:	fffe0219 	.word	0xfffe0219
 8002fd8:	833fffe7 	.word	0x833fffe7

08002fdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe8:	2317      	movs	r3, #23
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d15e      	bne.n	80030ba <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2234      	movs	r2, #52	@ 0x34
 8003000:	5c9b      	ldrb	r3, [r3, r2]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_ADC_Start_DMA+0x2e>
 8003006:	2302      	movs	r3, #2
 8003008:	e05e      	b.n	80030c8 <HAL_ADC_Start_DMA+0xec>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2234      	movs	r2, #52	@ 0x34
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	7e5b      	ldrb	r3, [r3, #25]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d007      	beq.n	800302a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800301a:	2317      	movs	r3, #23
 800301c:	18fc      	adds	r4, r7, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f9f9 	bl	8003418 <ADC_Enable>
 8003026:	0003      	movs	r3, r0
 8003028:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800302a:	2317      	movs	r3, #23
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d146      	bne.n	80030c2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	4a25      	ldr	r2, [pc, #148]	@ (80030d0 <HAL_ADC_Start_DMA+0xf4>)
 800303a:	4013      	ands	r3, r2
 800303c:	2280      	movs	r2, #128	@ 0x80
 800303e:	0052      	lsls	r2, r2, #1
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2234      	movs	r2, #52	@ 0x34
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_ADC_Start_DMA+0xf8>)
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_ADC_Start_DMA+0xfc>)
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <HAL_ADC_Start_DMA+0x100>)
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	221c      	movs	r2, #28
 8003072:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2110      	movs	r1, #16
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3340      	adds	r3, #64	@ 0x40
 800309e:	0019      	movs	r1, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f000 fd4c 	bl	8003b40 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2104      	movs	r1, #4
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e003      	b.n	80030c2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030ba:	2317      	movs	r3, #23
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80030c2:	2317      	movs	r3, #23
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b007      	add	sp, #28
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	fffff0fe 	.word	0xfffff0fe
 80030d4:	0800369d 	.word	0x0800369d
 80030d8:	08003751 	.word	0x08003751
 80030dc:	0800376f 	.word	0x0800376f

080030e0 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2234      	movs	r2, #52	@ 0x34
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_Stop_DMA+0x1e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e05f      	b.n	80031be <HAL_ADC_Stop_DMA+0xde>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2234      	movs	r2, #52	@ 0x34
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003106:	250f      	movs	r5, #15
 8003108:	197c      	adds	r4, r7, r5
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 fa78 	bl	8003602 <ADC_ConversionStop>
 8003112:	0003      	movs	r3, r0
 8003114:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003116:	0028      	movs	r0, r5
 8003118:	183b      	adds	r3, r7, r0
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d147      	bne.n	80031b0 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	2221      	movs	r2, #33	@ 0x21
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d112      	bne.n	8003164 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	0005      	movs	r5, r0
 8003144:	183c      	adds	r4, r7, r0
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fd60 	bl	8003c0c <HAL_DMA_Abort>
 800314c:	0003      	movs	r3, r0
 800314e:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003150:	197b      	adds	r3, r7, r5
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	2240      	movs	r2, #64	@ 0x40
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2110      	movs	r1, #16
 8003170:	438a      	bics	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003174:	220f      	movs	r2, #15
 8003176:	18bb      	adds	r3, r7, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800317e:	18bc      	adds	r4, r7, r2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f9cc 	bl	8003520 <ADC_Disable>
 8003188:	0003      	movs	r3, r0
 800318a:	7023      	strb	r3, [r4, #0]
 800318c:	e003      	b.n	8003196 <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f000 f9c5 	bl	8003520 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003196:	230f      	movs	r3, #15
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	4a08      	ldr	r2, [pc, #32]	@ (80031c8 <HAL_ADC_Stop_DMA+0xe8>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	2201      	movs	r2, #1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2234      	movs	r2, #52	@ 0x34
 80031b4:	2100      	movs	r1, #0
 80031b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80031b8:	230f      	movs	r3, #15
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	781b      	ldrb	r3, [r3, #0]
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b004      	add	sp, #16
 80031c4:	bdb0      	pop	{r4, r5, r7, pc}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	fffffefe 	.word	0xfffffefe

080031cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031f4:	46c0      	nop			@ (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003206:	230f      	movs	r3, #15
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	055b      	lsls	r3, r3, #21
 800321a:	429a      	cmp	r2, r3
 800321c:	d011      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x46>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d00d      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x46>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	2b02      	cmp	r3, #2
 800322c:	d009      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x46>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003232:	2b03      	cmp	r3, #3
 8003234:	d005      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x46>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	2b04      	cmp	r3, #4
 800323c:	d001      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x46>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2234      	movs	r2, #52	@ 0x34
 8003246:	5c9b      	ldrb	r3, [r3, r2]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x54>
 800324c:	2302      	movs	r3, #2
 800324e:	e0d0      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1f6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2234      	movs	r2, #52	@ 0x34
 8003254:	2101      	movs	r1, #1
 8003256:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	d000      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x6a>
 8003264:	e0b4      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a64      	ldr	r2, [pc, #400]	@ (80033fc <HAL_ADC_ConfigChannel+0x200>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x76>
 8003270:	e082      	b.n	8003378 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	055b      	lsls	r3, r3, #21
 8003290:	429a      	cmp	r2, r3
 8003292:	d037      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d033      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d02f      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d02b      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d027      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d023      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d01f      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	2b07      	cmp	r3, #7
 80032ca:	d01b      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2107      	movs	r1, #7
 80032d8:	400b      	ands	r3, r1
 80032da:	429a      	cmp	r2, r3
 80032dc:	d012      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2107      	movs	r1, #7
 80032ea:	438a      	bics	r2, r1
 80032ec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6959      	ldr	r1, [r3, #20]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2207      	movs	r2, #7
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d007      	beq.n	800331c <HAL_ADC_ConfigChannel+0x120>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b11      	cmp	r3, #17
 8003312:	d003      	beq.n	800331c <HAL_ADC_ConfigChannel+0x120>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b12      	cmp	r3, #18
 800331a:	d163      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800331c:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_ADC_ConfigChannel+0x204>)
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b10      	cmp	r3, #16
 8003326:	d009      	beq.n	800333c <HAL_ADC_ConfigChannel+0x140>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b11      	cmp	r3, #17
 800332e:	d102      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x13a>
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	03db      	lsls	r3, r3, #15
 8003334:	e004      	b.n	8003340 <HAL_ADC_ConfigChannel+0x144>
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	045b      	lsls	r3, r3, #17
 800333a:	e001      	b.n	8003340 <HAL_ADC_ConfigChannel+0x144>
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	4a2f      	ldr	r2, [pc, #188]	@ (8003400 <HAL_ADC_ConfigChannel+0x204>)
 8003342:	430b      	orrs	r3, r1
 8003344:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b10      	cmp	r3, #16
 800334c:	d14a      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800334e:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <HAL_ADC_ConfigChannel+0x208>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	492d      	ldr	r1, [pc, #180]	@ (8003408 <HAL_ADC_ConfigChannel+0x20c>)
 8003354:	0018      	movs	r0, r3
 8003356:	f7fc fed7 	bl	8000108 <__udivsi3>
 800335a:	0003      	movs	r3, r0
 800335c:	001a      	movs	r2, r3
 800335e:	0013      	movs	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	189b      	adds	r3, r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003368:	e002      	b.n	8003370 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3b01      	subs	r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f9      	bne.n	800336a <HAL_ADC_ConfigChannel+0x16e>
 8003376:	e035      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	4099      	lsls	r1, r3
 8003386:	000b      	movs	r3, r1
 8003388:	43d9      	mvns	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	400a      	ands	r2, r1
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d007      	beq.n	80033aa <HAL_ADC_ConfigChannel+0x1ae>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b11      	cmp	r3, #17
 80033a0:	d003      	beq.n	80033aa <HAL_ADC_ConfigChannel+0x1ae>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b12      	cmp	r3, #18
 80033a8:	d11c      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_ADC_ConfigChannel+0x204>)
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d007      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x1ca>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b11      	cmp	r3, #17
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x1c6>
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_ADC_ConfigChannel+0x210>)
 80033c0:	e002      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x1cc>
 80033c2:	4b13      	ldr	r3, [pc, #76]	@ (8003410 <HAL_ADC_ConfigChannel+0x214>)
 80033c4:	e000      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x1cc>
 80033c6:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <HAL_ADC_ConfigChannel+0x218>)
 80033c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <HAL_ADC_ConfigChannel+0x204>)
 80033ca:	400b      	ands	r3, r1
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e009      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	2220      	movs	r2, #32
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80033dc:	230f      	movs	r3, #15
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2234      	movs	r2, #52	@ 0x34
 80033e8:	2100      	movs	r1, #0
 80033ea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80033ec:	230f      	movs	r3, #15
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	00001001 	.word	0x00001001
 8003400:	40012708 	.word	0x40012708
 8003404:	2000000c 	.word	0x2000000c
 8003408:	000f4240 	.word	0x000f4240
 800340c:	ffbfffff 	.word	0xffbfffff
 8003410:	feffffff 	.word	0xfeffffff
 8003414:	ff7fffff 	.word	0xff7fffff

08003418 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2203      	movs	r2, #3
 8003430:	4013      	ands	r3, r2
 8003432:	2b01      	cmp	r3, #1
 8003434:	d112      	bne.n	800345c <ADC_Enable+0x44>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	4013      	ands	r3, r2
 8003440:	2b01      	cmp	r3, #1
 8003442:	d009      	beq.n	8003458 <ADC_Enable+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	401a      	ands	r2, r3
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	429a      	cmp	r2, r3
 8003456:	d101      	bne.n	800345c <ADC_Enable+0x44>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <ADC_Enable+0x46>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d152      	bne.n	8003508 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a2a      	ldr	r2, [pc, #168]	@ (8003514 <ADC_Enable+0xfc>)
 800346a:	4013      	ands	r3, r2
 800346c:	d00d      	beq.n	800348a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	2210      	movs	r2, #16
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	2201      	movs	r2, #1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e03f      	b.n	800350a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800349a:	4b1f      	ldr	r3, [pc, #124]	@ (8003518 <ADC_Enable+0x100>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	491f      	ldr	r1, [pc, #124]	@ (800351c <ADC_Enable+0x104>)
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7fc fe31 	bl	8000108 <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034aa:	e002      	b.n	80034b2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80034b8:	f7ff fc46 	bl	8002d48 <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034c0:	e01b      	b.n	80034fa <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034c2:	f7ff fc41 	bl	8002d48 <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d914      	bls.n	80034fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d00d      	beq.n	80034fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	2210      	movs	r2, #16
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ee:	2201      	movs	r2, #1
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e007      	b.n	800350a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2201      	movs	r2, #1
 8003502:	4013      	ands	r3, r2
 8003504:	2b01      	cmp	r3, #1
 8003506:	d1dc      	bne.n	80034c2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	80000017 	.word	0x80000017
 8003518:	2000000c 	.word	0x2000000c
 800351c:	000f4240 	.word	0x000f4240

08003520 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2203      	movs	r2, #3
 8003534:	4013      	ands	r3, r2
 8003536:	2b01      	cmp	r3, #1
 8003538:	d112      	bne.n	8003560 <ADC_Disable+0x40>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d009      	beq.n	800355c <ADC_Disable+0x3c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	401a      	ands	r2, r3
 8003554:	2380      	movs	r3, #128	@ 0x80
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	429a      	cmp	r2, r3
 800355a:	d101      	bne.n	8003560 <ADC_Disable+0x40>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <ADC_Disable+0x42>
 8003560:	2300      	movs	r3, #0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d048      	beq.n	80035f8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2205      	movs	r2, #5
 800356e:	4013      	ands	r3, r2
 8003570:	2b01      	cmp	r3, #1
 8003572:	d110      	bne.n	8003596 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2102      	movs	r1, #2
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2203      	movs	r2, #3
 800358a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800358c:	f7ff fbdc 	bl	8002d48 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003594:	e029      	b.n	80035ea <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	2210      	movs	r2, #16
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a6:	2201      	movs	r2, #1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e023      	b.n	80035fa <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035b2:	f7ff fbc9 	bl	8002d48 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d914      	bls.n	80035ea <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10d      	bne.n	80035ea <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	2210      	movs	r2, #16
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	2201      	movs	r2, #1
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e007      	b.n	80035fa <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d0dc      	beq.n	80035b2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}

08003602 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2204      	movs	r2, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d03a      	beq.n	8003690 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2204      	movs	r2, #4
 8003622:	4013      	ands	r3, r2
 8003624:	2b04      	cmp	r3, #4
 8003626:	d10d      	bne.n	8003644 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2202      	movs	r2, #2
 8003630:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003632:	d107      	bne.n	8003644 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2110      	movs	r1, #16
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003644:	f7ff fb80 	bl	8002d48 <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800364c:	e01a      	b.n	8003684 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800364e:	f7ff fb7b 	bl	8002d48 <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d913      	bls.n	8003684 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2204      	movs	r2, #4
 8003664:	4013      	ands	r3, r2
 8003666:	d00d      	beq.n	8003684 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	2210      	movs	r2, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	2201      	movs	r2, #1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e006      	b.n	8003692 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2204      	movs	r2, #4
 800368c:	4013      	ands	r3, r2
 800368e:	d1de      	bne.n	800364e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ae:	2250      	movs	r2, #80	@ 0x50
 80036b0:	4013      	ands	r3, r2
 80036b2:	d140      	bne.n	8003736 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	23c0      	movs	r3, #192	@ 0xc0
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	d12d      	bne.n	800372c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d129      	bne.n	800372c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2208      	movs	r2, #8
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d122      	bne.n	800372c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2204      	movs	r2, #4
 80036ee:	4013      	ands	r3, r2
 80036f0:	d110      	bne.n	8003714 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	210c      	movs	r1, #12
 80036fe:	438a      	bics	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	4a11      	ldr	r2, [pc, #68]	@ (800374c <ADC_DMAConvCplt+0xb0>)
 8003708:	4013      	ands	r3, r2
 800370a:	2201      	movs	r2, #1
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	639a      	str	r2, [r3, #56]	@ 0x38
 8003712:	e00b      	b.n	800372c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	2220      	movs	r2, #32
 800371a:	431a      	orrs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	2201      	movs	r2, #1
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	0018      	movs	r0, r3
 8003730:	f7ff fd4c 	bl	80031cc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003734:	e005      	b.n	8003742 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	0010      	movs	r0, r2
 8003740:	4798      	blx	r3
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	fffffefe 	.word	0xfffffefe

08003750 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fd3b 	bl	80031dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}

0800376e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	2240      	movs	r2, #64	@ 0x40
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	2204      	movs	r2, #4
 800378e:	431a      	orrs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff fd28 	bl	80031ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2234      	movs	r2, #52	@ 0x34
 80037c0:	5c9b      	ldrb	r3, [r3, r2]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_ADCEx_Calibration_Start+0x26>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e08d      	b.n	80038e6 <HAL_ADCEx_Calibration_Start+0x142>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2234      	movs	r2, #52	@ 0x34
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2203      	movs	r2, #3
 80037da:	4013      	ands	r3, r2
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d112      	bne.n	8003806 <HAL_ADCEx_Calibration_Start+0x62>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d009      	beq.n	8003802 <HAL_ADCEx_Calibration_Start+0x5e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	401a      	ands	r2, r3
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	429a      	cmp	r2, r3
 8003800:	d101      	bne.n	8003806 <HAL_ADCEx_Calibration_Start+0x62>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_ADCEx_Calibration_Start+0x64>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d15b      	bne.n	80038c4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003810:	4a37      	ldr	r2, [pc, #220]	@ (80038f0 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003812:	4013      	ands	r3, r2
 8003814:	2202      	movs	r2, #2
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2203      	movs	r2, #3
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2103      	movs	r1, #3
 8003834:	438a      	bics	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2180      	movs	r1, #128	@ 0x80
 8003844:	0609      	lsls	r1, r1, #24
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800384a:	f7ff fa7d 	bl	8002d48 <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003852:	e01d      	b.n	8003890 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003854:	f7ff fa78 	bl	8002d48 <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d916      	bls.n	8003890 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	0fdb      	lsrs	r3, r3, #31
 800386a:	07da      	lsls	r2, r3, #31
 800386c:	2380      	movs	r3, #128	@ 0x80
 800386e:	061b      	lsls	r3, r3, #24
 8003870:	429a      	cmp	r2, r3
 8003872:	d10d      	bne.n	8003890 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	2212      	movs	r2, #18
 800387a:	4393      	bics	r3, r2
 800387c:	2210      	movs	r2, #16
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2234      	movs	r2, #52	@ 0x34
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e02a      	b.n	80038e6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0fdb      	lsrs	r3, r3, #31
 8003898:	07da      	lsls	r2, r3, #31
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	429a      	cmp	r2, r3
 80038a0:	d0d8      	beq.n	8003854 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68d9      	ldr	r1, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	2203      	movs	r2, #3
 80038b8:	4393      	bics	r3, r2
 80038ba:	2201      	movs	r2, #1
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80038c2:	e009      	b.n	80038d8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	2220      	movs	r2, #32
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80038d0:	2317      	movs	r3, #23
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2234      	movs	r2, #52	@ 0x34
 80038dc:	2100      	movs	r1, #0
 80038de:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80038e0:	2317      	movs	r3, #23
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	781b      	ldrb	r3, [r3, #0]
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b006      	add	sp, #24
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	fffffefd 	.word	0xfffffefd

080038f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	0002      	movs	r2, r0
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b7f      	cmp	r3, #127	@ 0x7f
 8003906:	d809      	bhi.n	800391c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	001a      	movs	r2, r3
 800390e:	231f      	movs	r3, #31
 8003910:	401a      	ands	r2, r3
 8003912:	4b04      	ldr	r3, [pc, #16]	@ (8003924 <__NVIC_EnableIRQ+0x30>)
 8003914:	2101      	movs	r1, #1
 8003916:	4091      	lsls	r1, r2
 8003918:	000a      	movs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
  }
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	0002      	movs	r2, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	1dfb      	adds	r3, r7, #7
 8003934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b7f      	cmp	r3, #127	@ 0x7f
 800393c:	d828      	bhi.n	8003990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800393e:	4a2f      	ldr	r2, [pc, #188]	@ (80039fc <__NVIC_SetPriority+0xd4>)
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b25b      	sxtb	r3, r3
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	33c0      	adds	r3, #192	@ 0xc0
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	589b      	ldr	r3, [r3, r2]
 800394e:	1dfa      	adds	r2, r7, #7
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	0011      	movs	r1, r2
 8003954:	2203      	movs	r2, #3
 8003956:	400a      	ands	r2, r1
 8003958:	00d2      	lsls	r2, r2, #3
 800395a:	21ff      	movs	r1, #255	@ 0xff
 800395c:	4091      	lsls	r1, r2
 800395e:	000a      	movs	r2, r1
 8003960:	43d2      	mvns	r2, r2
 8003962:	401a      	ands	r2, r3
 8003964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	22ff      	movs	r2, #255	@ 0xff
 800396c:	401a      	ands	r2, r3
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	0018      	movs	r0, r3
 8003974:	2303      	movs	r3, #3
 8003976:	4003      	ands	r3, r0
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397c:	481f      	ldr	r0, [pc, #124]	@ (80039fc <__NVIC_SetPriority+0xd4>)
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b25b      	sxtb	r3, r3
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	430a      	orrs	r2, r1
 8003988:	33c0      	adds	r3, #192	@ 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800398e:	e031      	b.n	80039f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003990:	4a1b      	ldr	r2, [pc, #108]	@ (8003a00 <__NVIC_SetPriority+0xd8>)
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	0019      	movs	r1, r3
 8003998:	230f      	movs	r3, #15
 800399a:	400b      	ands	r3, r1
 800399c:	3b08      	subs	r3, #8
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3306      	adds	r3, #6
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	3304      	adds	r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1dfa      	adds	r2, r7, #7
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	0011      	movs	r1, r2
 80039b0:	2203      	movs	r2, #3
 80039b2:	400a      	ands	r2, r1
 80039b4:	00d2      	lsls	r2, r2, #3
 80039b6:	21ff      	movs	r1, #255	@ 0xff
 80039b8:	4091      	lsls	r1, r2
 80039ba:	000a      	movs	r2, r1
 80039bc:	43d2      	mvns	r2, r2
 80039be:	401a      	ands	r2, r3
 80039c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	22ff      	movs	r2, #255	@ 0xff
 80039c8:	401a      	ands	r2, r3
 80039ca:	1dfb      	adds	r3, r7, #7
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	2303      	movs	r3, #3
 80039d2:	4003      	ands	r3, r0
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d8:	4809      	ldr	r0, [pc, #36]	@ (8003a00 <__NVIC_SetPriority+0xd8>)
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	001c      	movs	r4, r3
 80039e0:	230f      	movs	r3, #15
 80039e2:	4023      	ands	r3, r4
 80039e4:	3b08      	subs	r3, #8
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	430a      	orrs	r2, r1
 80039ea:	3306      	adds	r3, #6
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	18c3      	adds	r3, r0, r3
 80039f0:	3304      	adds	r3, #4
 80039f2:	601a      	str	r2, [r3, #0]
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b003      	add	sp, #12
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	045b      	lsls	r3, r3, #17
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d301      	bcc.n	8003a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e010      	b.n	8003a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <SysTick_Config+0x44>)
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	3a01      	subs	r2, #1
 8003a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a24:	2301      	movs	r3, #1
 8003a26:	425b      	negs	r3, r3
 8003a28:	2103      	movs	r1, #3
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff ff7c 	bl	8003928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <SysTick_Config+0x44>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a36:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <SysTick_Config+0x44>)
 8003a38:	2207      	movs	r2, #7
 8003a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b002      	add	sp, #8
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	e000e010 	.word	0xe000e010

08003a4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	210f      	movs	r1, #15
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	1c02      	adds	r2, r0, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	0011      	movs	r1, r2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff ff5d 	bl	8003928 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff ff33 	bl	80038f4 <__NVIC_EnableIRQ>
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7ff ffaf 	bl	8003a04 <SysTick_Config>
 8003aa6:	0003      	movs	r3, r0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e036      	b.n	8003b34 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2221      	movs	r2, #33	@ 0x21
 8003aca:	2102      	movs	r1, #2
 8003acc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <HAL_DMA_Init+0x8c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f9c4 	bl	8003ea4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2221      	movs	r2, #33	@ 0x21
 8003b26:	2101      	movs	r1, #1
 8003b28:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	ffffc00f 	.word	0xffffc00f

08003b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2317      	movs	r3, #23
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	5c9b      	ldrb	r3, [r3, r2]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Start_IT+0x24>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e04f      	b.n	8003c04 <HAL_DMA_Start_IT+0xc4>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	2101      	movs	r1, #1
 8003b6a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2221      	movs	r2, #33	@ 0x21
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d13a      	bne.n	8003bee <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2221      	movs	r2, #33	@ 0x21
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	438a      	bics	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f954 	bl	8003e4a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	210e      	movs	r1, #14
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00f      	b.n	8003bdc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	210a      	movs	r1, #10
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	438a      	bics	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e007      	b.n	8003bfe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bf6:	2317      	movs	r3, #23
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003bfe:	2317      	movs	r3, #23
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	781b      	ldrb	r3, [r3, #0]
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b006      	add	sp, #24
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2221      	movs	r2, #33	@ 0x21
 8003c18:	5c9b      	ldrb	r3, [r3, r2]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d008      	beq.n	8003c32 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e020      	b.n	8003c74 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	210e      	movs	r1, #14
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4091      	lsls	r1, r2
 8003c5e:	000a      	movs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2221      	movs	r2, #33	@ 0x21
 8003c66:	2101      	movs	r1, #1
 8003c68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	2100      	movs	r1, #0
 8003c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	210f      	movs	r1, #15
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2221      	movs	r2, #33	@ 0x21
 8003c90:	5c9b      	ldrb	r3, [r3, r2]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d006      	beq.n	8003ca6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e028      	b.n	8003cf8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	210e      	movs	r1, #14
 8003cb2:	438a      	bics	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	438a      	bics	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4091      	lsls	r1, r2
 8003cd2:	000a      	movs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2221      	movs	r2, #33	@ 0x21
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	0010      	movs	r0, r2
 8003cf6:	4798      	blx	r3
    }
  }
  return status;
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	2204      	movs	r2, #4
 8003d24:	409a      	lsls	r2, r3
 8003d26:	0013      	movs	r3, r2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d024      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x72>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2204      	movs	r2, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d020      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d107      	bne.n	8003d52 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	438a      	bics	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	2104      	movs	r1, #4
 8003d5c:	4091      	lsls	r1, r2
 8003d5e:	000a      	movs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d100      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x66>
 8003d6a:	e06a      	b.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	0010      	movs	r0, r2
 8003d74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d76:	e064      	b.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	0013      	movs	r3, r2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	d02b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xda>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d027      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2220      	movs	r2, #32
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d10b      	bne.n	8003db4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	210a      	movs	r1, #10
 8003da8:	438a      	bics	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2221      	movs	r2, #33	@ 0x21
 8003db0:	2101      	movs	r1, #1
 8003db2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4091      	lsls	r1, r2
 8003dc0:	000a      	movs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	2100      	movs	r1, #0
 8003dca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d036      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	0010      	movs	r0, r2
 8003ddc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dde:	e030      	b.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2208      	movs	r2, #8
 8003de6:	409a      	lsls	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4013      	ands	r3, r2
 8003dee:	d028      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2208      	movs	r2, #8
 8003df4:	4013      	ands	r3, r2
 8003df6:	d024      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	210e      	movs	r1, #14
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e10:	2101      	movs	r1, #1
 8003e12:	4091      	lsls	r1, r2
 8003e14:	000a      	movs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2221      	movs	r2, #33	@ 0x21
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	4798      	blx	r3
    }
  }
}
 8003e40:	e7ff      	b.n	8003e42 <HAL_DMA_IRQHandler+0x13c>
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b004      	add	sp, #16
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	2101      	movs	r1, #1
 8003e62:	4091      	lsls	r1, r2
 8003e64:	000a      	movs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d108      	bne.n	8003e8a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e88:	e007      	b.n	8003e9a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	60da      	str	r2, [r3, #12]
}
 8003e9a:	46c0      	nop			@ (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a08      	ldr	r2, [pc, #32]	@ (8003ed4 <DMA_CalcBaseAndBitshift+0x30>)
 8003eb2:	4694      	mov	ip, r2
 8003eb4:	4463      	add	r3, ip
 8003eb6:	2114      	movs	r1, #20
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fc f925 	bl	8000108 <__udivsi3>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	009a      	lsls	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a03      	ldr	r2, [pc, #12]	@ (8003ed8 <DMA_CalcBaseAndBitshift+0x34>)
 8003eca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	bffdfff8 	.word	0xbffdfff8
 8003ed8:	40020000 	.word	0x40020000

08003edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eea:	e149      	b.n	8004180 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4091      	lsls	r1, r2
 8003ef6:	000a      	movs	r2, r1
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d100      	bne.n	8003f04 <HAL_GPIO_Init+0x28>
 8003f02:	e13a      	b.n	800417a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d005      	beq.n	8003f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d130      	bne.n	8003f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	0013      	movs	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f52:	2201      	movs	r2, #1
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
 8003f58:	0013      	movs	r3, r2
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	2201      	movs	r2, #1
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	0013      	movs	r3, r2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2203      	movs	r2, #3
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d017      	beq.n	8003fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d123      	bne.n	800400e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	0092      	lsls	r2, r2, #2
 8003fd0:	58d3      	ldr	r3, [r2, r3]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	4013      	ands	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2107      	movs	r1, #7
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	08da      	lsrs	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	6939      	ldr	r1, [r7, #16]
 800400c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	43da      	mvns	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2203      	movs	r2, #3
 800402c:	401a      	ands	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	409a      	lsls	r2, r3
 8004034:	0013      	movs	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	23c0      	movs	r3, #192	@ 0xc0
 8004048:	029b      	lsls	r3, r3, #10
 800404a:	4013      	ands	r3, r2
 800404c:	d100      	bne.n	8004050 <HAL_GPIO_Init+0x174>
 800404e:	e094      	b.n	800417a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004050:	4b51      	ldr	r3, [pc, #324]	@ (8004198 <HAL_GPIO_Init+0x2bc>)
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	4b50      	ldr	r3, [pc, #320]	@ (8004198 <HAL_GPIO_Init+0x2bc>)
 8004056:	2101      	movs	r1, #1
 8004058:	430a      	orrs	r2, r1
 800405a:	619a      	str	r2, [r3, #24]
 800405c:	4b4e      	ldr	r3, [pc, #312]	@ (8004198 <HAL_GPIO_Init+0x2bc>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004068:	4a4c      	ldr	r2, [pc, #304]	@ (800419c <HAL_GPIO_Init+0x2c0>)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	3302      	adds	r3, #2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	589b      	ldr	r3, [r3, r2]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2203      	movs	r2, #3
 800407a:	4013      	ands	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	220f      	movs	r2, #15
 8004080:	409a      	lsls	r2, r3
 8004082:	0013      	movs	r3, r2
 8004084:	43da      	mvns	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	2390      	movs	r3, #144	@ 0x90
 8004090:	05db      	lsls	r3, r3, #23
 8004092:	429a      	cmp	r2, r3
 8004094:	d00d      	beq.n	80040b2 <HAL_GPIO_Init+0x1d6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a41      	ldr	r2, [pc, #260]	@ (80041a0 <HAL_GPIO_Init+0x2c4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <HAL_GPIO_Init+0x1d2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a40      	ldr	r2, [pc, #256]	@ (80041a4 <HAL_GPIO_Init+0x2c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_GPIO_Init+0x1ce>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040aa:	2305      	movs	r3, #5
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040b2:	2300      	movs	r3, #0
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	2103      	movs	r1, #3
 80040b8:	400a      	ands	r2, r1
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4093      	lsls	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040c4:	4935      	ldr	r1, [pc, #212]	@ (800419c <HAL_GPIO_Init+0x2c0>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3302      	adds	r3, #2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d2:	4b35      	ldr	r3, [pc, #212]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	43da      	mvns	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	035b      	lsls	r3, r3, #13
 80040ea:	4013      	ands	r3, r2
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040f6:	4b2c      	ldr	r3, [pc, #176]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80040fc:	4b2a      	ldr	r3, [pc, #168]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	43da      	mvns	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	039b      	lsls	r3, r3, #14
 8004114:	4013      	ands	r3, r2
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004120:	4b21      	ldr	r3, [pc, #132]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004126:	4b20      	ldr	r3, [pc, #128]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43da      	mvns	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	029b      	lsls	r3, r3, #10
 800413e:	4013      	ands	r3, r2
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800414a:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004150:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43da      	mvns	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	025b      	lsls	r3, r3, #9
 8004168:	4013      	ands	r3, r2
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <HAL_GPIO_Init+0x2cc>)
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3301      	adds	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	40da      	lsrs	r2, r3
 8004188:	1e13      	subs	r3, r2, #0
 800418a:	d000      	beq.n	800418e <HAL_GPIO_Init+0x2b2>
 800418c:	e6ae      	b.n	8003eec <HAL_GPIO_Init+0x10>
  } 
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	46c0      	nop			@ (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b006      	add	sp, #24
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	40010000 	.word	0x40010000
 80041a0:	48000400 	.word	0x48000400
 80041a4:	48000800 	.word	0x48000800
 80041a8:	40010400 	.word	0x40010400

080041ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	000a      	movs	r2, r1
 80041b6:	1cbb      	adds	r3, r7, #2
 80041b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	1cba      	adds	r2, r7, #2
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	4013      	ands	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80041c6:	230f      	movs	r3, #15
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e003      	b.n	80041d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d0:	230f      	movs	r3, #15
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80041d8:	230f      	movs	r3, #15
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	781b      	ldrb	r3, [r3, #0]
  }
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b004      	add	sp, #16
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	0008      	movs	r0, r1
 80041f0:	0011      	movs	r1, r2
 80041f2:	1cbb      	adds	r3, r7, #2
 80041f4:	1c02      	adds	r2, r0, #0
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	1c7b      	adds	r3, r7, #1
 80041fa:	1c0a      	adds	r2, r1, #0
 80041fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041fe:	1c7b      	adds	r3, r7, #1
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004206:	1cbb      	adds	r3, r7, #2
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800420e:	e003      	b.n	8004218 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004210:	1cbb      	adds	r3, r7, #2
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e08f      	b.n	8004352 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2241      	movs	r2, #65	@ 0x41
 8004236:	5c9b      	ldrb	r3, [r3, r2]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2240      	movs	r2, #64	@ 0x40
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f7fd fb61 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2241      	movs	r2, #65	@ 0x41
 8004252:	2124      	movs	r1, #36	@ 0x24
 8004254:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	438a      	bics	r2, r1
 8004264:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	493b      	ldr	r1, [pc, #236]	@ (800435c <HAL_I2C_Init+0x13c>)
 8004270:	400a      	ands	r2, r1
 8004272:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4938      	ldr	r1, [pc, #224]	@ (8004360 <HAL_I2C_Init+0x140>)
 8004280:	400a      	ands	r2, r1
 8004282:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d108      	bne.n	800429e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2180      	movs	r1, #128	@ 0x80
 8004296:	0209      	lsls	r1, r1, #8
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	e007      	b.n	80042ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2184      	movs	r1, #132	@ 0x84
 80042a8:	0209      	lsls	r1, r1, #8
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d109      	bne.n	80042ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2180      	movs	r1, #128	@ 0x80
 80042c2:	0109      	lsls	r1, r1, #4
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	e007      	b.n	80042da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4923      	ldr	r1, [pc, #140]	@ (8004364 <HAL_I2C_Init+0x144>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4920      	ldr	r1, [pc, #128]	@ (8004368 <HAL_I2C_Init+0x148>)
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	491a      	ldr	r1, [pc, #104]	@ (8004360 <HAL_I2C_Init+0x140>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69d9      	ldr	r1, [r3, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2101      	movs	r1, #1
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2241      	movs	r2, #65	@ 0x41
 800433e:	2120      	movs	r1, #32
 8004340:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2242      	movs	r2, #66	@ 0x42
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	f0ffffff 	.word	0xf0ffffff
 8004360:	ffff7fff 	.word	0xffff7fff
 8004364:	fffff7ff 	.word	0xfffff7ff
 8004368:	02008000 	.word	0x02008000

0800436c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2241      	movs	r2, #65	@ 0x41
 800437a:	5c9b      	ldrb	r3, [r3, r2]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b20      	cmp	r3, #32
 8004380:	d138      	bne.n	80043f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2240      	movs	r2, #64	@ 0x40
 8004386:	5c9b      	ldrb	r3, [r3, r2]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800438c:	2302      	movs	r3, #2
 800438e:	e032      	b.n	80043f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	2101      	movs	r1, #1
 8004396:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2241      	movs	r2, #65	@ 0x41
 800439c:	2124      	movs	r1, #36	@ 0x24
 800439e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2101      	movs	r1, #1
 80043ac:	438a      	bics	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4911      	ldr	r1, [pc, #68]	@ (8004400 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80043bc:	400a      	ands	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2101      	movs	r1, #1
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2241      	movs	r2, #65	@ 0x41
 80043e4:	2120      	movs	r1, #32
 80043e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2240      	movs	r2, #64	@ 0x40
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b002      	add	sp, #8
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	ffffefff 	.word	0xffffefff

08004404 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2241      	movs	r2, #65	@ 0x41
 8004412:	5c9b      	ldrb	r3, [r3, r2]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d139      	bne.n	800448e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2240      	movs	r2, #64	@ 0x40
 800441e:	5c9b      	ldrb	r3, [r3, r2]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004424:	2302      	movs	r3, #2
 8004426:	e033      	b.n	8004490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2240      	movs	r2, #64	@ 0x40
 800442c:	2101      	movs	r1, #1
 800442e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2241      	movs	r2, #65	@ 0x41
 8004434:	2124      	movs	r1, #36	@ 0x24
 8004436:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2101      	movs	r1, #1
 8004444:	438a      	bics	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a11      	ldr	r2, [pc, #68]	@ (8004498 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004454:	4013      	ands	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2241      	movs	r2, #65	@ 0x41
 800447e:	2120      	movs	r1, #32
 8004480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2240      	movs	r2, #64	@ 0x40
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800448e:	2302      	movs	r3, #2
  }
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b004      	add	sp, #16
 8004496:	bd80      	pop	{r7, pc}
 8004498:	fffff0ff 	.word	0xfffff0ff

0800449c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e301      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	4013      	ands	r3, r2
 80044b6:	d100      	bne.n	80044ba <HAL_RCC_OscConfig+0x1e>
 80044b8:	e08d      	b.n	80045d6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044ba:	4bc3      	ldr	r3, [pc, #780]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	220c      	movs	r2, #12
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00e      	beq.n	80044e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044c6:	4bc0      	ldr	r3, [pc, #768]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	220c      	movs	r2, #12
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x64>
 80044d2:	4bbd      	ldr	r3, [pc, #756]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	401a      	ands	r2, r3
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	025b      	lsls	r3, r3, #9
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d10d      	bne.n	8004500 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	4bb8      	ldr	r3, [pc, #736]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	@ 0x80
 80044ea:	029b      	lsls	r3, r3, #10
 80044ec:	4013      	ands	r3, r2
 80044ee:	d100      	bne.n	80044f2 <HAL_RCC_OscConfig+0x56>
 80044f0:	e070      	b.n	80045d4 <HAL_RCC_OscConfig+0x138>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d000      	beq.n	80044fc <HAL_RCC_OscConfig+0x60>
 80044fa:	e06b      	b.n	80045d4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e2d8      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x7c>
 8004508:	4baf      	ldr	r3, [pc, #700]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4bae      	ldr	r3, [pc, #696]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800450e:	2180      	movs	r1, #128	@ 0x80
 8004510:	0249      	lsls	r1, r1, #9
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e02f      	b.n	8004578 <HAL_RCC_OscConfig+0xdc>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x9e>
 8004520:	4ba9      	ldr	r3, [pc, #676]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4ba8      	ldr	r3, [pc, #672]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004526:	49a9      	ldr	r1, [pc, #676]	@ (80047cc <HAL_RCC_OscConfig+0x330>)
 8004528:	400a      	ands	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	4ba6      	ldr	r3, [pc, #664]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4ba5      	ldr	r3, [pc, #660]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004532:	49a7      	ldr	r1, [pc, #668]	@ (80047d0 <HAL_RCC_OscConfig+0x334>)
 8004534:	400a      	ands	r2, r1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e01e      	b.n	8004578 <HAL_RCC_OscConfig+0xdc>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d10e      	bne.n	8004560 <HAL_RCC_OscConfig+0xc4>
 8004542:	4ba1      	ldr	r3, [pc, #644]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4ba0      	ldr	r3, [pc, #640]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004548:	2180      	movs	r1, #128	@ 0x80
 800454a:	02c9      	lsls	r1, r1, #11
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	4b9d      	ldr	r3, [pc, #628]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b9c      	ldr	r3, [pc, #624]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004556:	2180      	movs	r1, #128	@ 0x80
 8004558:	0249      	lsls	r1, r1, #9
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xdc>
 8004560:	4b99      	ldr	r3, [pc, #612]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4b98      	ldr	r3, [pc, #608]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004566:	4999      	ldr	r1, [pc, #612]	@ (80047cc <HAL_RCC_OscConfig+0x330>)
 8004568:	400a      	ands	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	4b96      	ldr	r3, [pc, #600]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b95      	ldr	r3, [pc, #596]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004572:	4997      	ldr	r1, [pc, #604]	@ (80047d0 <HAL_RCC_OscConfig+0x334>)
 8004574:	400a      	ands	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d014      	beq.n	80045aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fe fbe2 	bl	8002d48 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458a:	f7fe fbdd 	bl	8002d48 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b64      	cmp	r3, #100	@ 0x64
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e28a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459c:	4b8a      	ldr	r3, [pc, #552]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	4013      	ands	r3, r2
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0xee>
 80045a8:	e015      	b.n	80045d6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fe fbcd 	bl	8002d48 <HAL_GetTick>
 80045ae:	0003      	movs	r3, r0
 80045b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fe fbc8 	bl	8002d48 <HAL_GetTick>
 80045b8:	0002      	movs	r2, r0
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	@ 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e275      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	4b80      	ldr	r3, [pc, #512]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	4013      	ands	r3, r2
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x118>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d100      	bne.n	80045e2 <HAL_RCC_OscConfig+0x146>
 80045e0:	e069      	b.n	80046b6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045e2:	4b79      	ldr	r3, [pc, #484]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	220c      	movs	r2, #12
 80045e8:	4013      	ands	r3, r2
 80045ea:	d00b      	beq.n	8004604 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045ec:	4b76      	ldr	r3, [pc, #472]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	220c      	movs	r2, #12
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d11c      	bne.n	8004632 <HAL_RCC_OscConfig+0x196>
 80045f8:	4b73      	ldr	r3, [pc, #460]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	2380      	movs	r3, #128	@ 0x80
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	4013      	ands	r3, r2
 8004602:	d116      	bne.n	8004632 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004604:	4b70      	ldr	r3, [pc, #448]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2202      	movs	r2, #2
 800460a:	4013      	ands	r3, r2
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x17e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e24b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b6b      	ldr	r3, [pc, #428]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	22f8      	movs	r2, #248	@ 0xf8
 8004620:	4393      	bics	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	00da      	lsls	r2, r3, #3
 800462a:	4b67      	ldr	r3, [pc, #412]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004630:	e041      	b.n	80046b6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d024      	beq.n	8004684 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463a:	4b63      	ldr	r3, [pc, #396]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b62      	ldr	r3, [pc, #392]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004640:	2101      	movs	r1, #1
 8004642:	430a      	orrs	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fb7f 	bl	8002d48 <HAL_GetTick>
 800464a:	0003      	movs	r3, r0
 800464c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe fb7a 	bl	8002d48 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e227      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b59      	ldr	r3, [pc, #356]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d0f1      	beq.n	8004650 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466c:	4b56      	ldr	r3, [pc, #344]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	22f8      	movs	r2, #248	@ 0xf8
 8004672:	4393      	bics	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	4b52      	ldr	r3, [pc, #328]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e018      	b.n	80046b6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004684:	4b50      	ldr	r3, [pc, #320]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800468a:	2101      	movs	r1, #1
 800468c:	438a      	bics	r2, r1
 800468e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fe fb5a 	bl	8002d48 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469a:	f7fe fb55 	bl	8002d48 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e202      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ac:	4b46      	ldr	r3, [pc, #280]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2202      	movs	r2, #2
 80046b2:	4013      	ands	r3, r2
 80046b4:	d1f1      	bne.n	800469a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2208      	movs	r2, #8
 80046bc:	4013      	ands	r3, r2
 80046be:	d036      	beq.n	800472e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d019      	beq.n	80046fc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c8:	4b3f      	ldr	r3, [pc, #252]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80046ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046cc:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80046ce:	2101      	movs	r1, #1
 80046d0:	430a      	orrs	r2, r1
 80046d2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d4:	f7fe fb38 	bl	8002d48 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046de:	f7fe fb33 	bl	8002d48 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1e0      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f0:	4b35      	ldr	r3, [pc, #212]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	2202      	movs	r2, #2
 80046f6:	4013      	ands	r3, r2
 80046f8:	d0f1      	beq.n	80046de <HAL_RCC_OscConfig+0x242>
 80046fa:	e018      	b.n	800472e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fc:	4b32      	ldr	r3, [pc, #200]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80046fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004700:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004702:	2101      	movs	r1, #1
 8004704:	438a      	bics	r2, r1
 8004706:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004708:	f7fe fb1e 	bl	8002d48 <HAL_GetTick>
 800470c:	0003      	movs	r3, r0
 800470e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004712:	f7fe fb19 	bl	8002d48 <HAL_GetTick>
 8004716:	0002      	movs	r2, r0
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e1c6      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	4b28      	ldr	r3, [pc, #160]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d1f1      	bne.n	8004712 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2204      	movs	r2, #4
 8004734:	4013      	ands	r3, r2
 8004736:	d100      	bne.n	800473a <HAL_RCC_OscConfig+0x29e>
 8004738:	e0b4      	b.n	80048a4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	201f      	movs	r0, #31
 800473c:	183b      	adds	r3, r7, r0
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	2380      	movs	r3, #128	@ 0x80
 8004748:	055b      	lsls	r3, r3, #21
 800474a:	4013      	ands	r3, r2
 800474c:	d110      	bne.n	8004770 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 8004754:	2180      	movs	r1, #128	@ 0x80
 8004756:	0549      	lsls	r1, r1, #21
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
 800475c:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	055b      	lsls	r3, r3, #21
 8004764:	4013      	ands	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800476a:	183b      	adds	r3, r7, r0
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	4b18      	ldr	r3, [pc, #96]	@ (80047d4 <HAL_RCC_OscConfig+0x338>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4013      	ands	r3, r2
 800477a:	d11a      	bne.n	80047b2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477c:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <HAL_RCC_OscConfig+0x338>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b14      	ldr	r3, [pc, #80]	@ (80047d4 <HAL_RCC_OscConfig+0x338>)
 8004782:	2180      	movs	r1, #128	@ 0x80
 8004784:	0049      	lsls	r1, r1, #1
 8004786:	430a      	orrs	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fe fadd 	bl	8002d48 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004794:	f7fe fad8 	bl	8002d48 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e185      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a6:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <HAL_RCC_OscConfig+0x338>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10e      	bne.n	80047d8 <HAL_RCC_OscConfig+0x33c>
 80047ba:	4b03      	ldr	r3, [pc, #12]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	4b02      	ldr	r3, [pc, #8]	@ (80047c8 <HAL_RCC_OscConfig+0x32c>)
 80047c0:	2101      	movs	r1, #1
 80047c2:	430a      	orrs	r2, r1
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	e035      	b.n	8004834 <HAL_RCC_OscConfig+0x398>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	fffeffff 	.word	0xfffeffff
 80047d0:	fffbffff 	.word	0xfffbffff
 80047d4:	40007000 	.word	0x40007000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x35e>
 80047e0:	4bb6      	ldr	r3, [pc, #728]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	4bb5      	ldr	r3, [pc, #724]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80047e6:	2101      	movs	r1, #1
 80047e8:	438a      	bics	r2, r1
 80047ea:	621a      	str	r2, [r3, #32]
 80047ec:	4bb3      	ldr	r3, [pc, #716]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	4bb2      	ldr	r3, [pc, #712]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80047f2:	2104      	movs	r1, #4
 80047f4:	438a      	bics	r2, r1
 80047f6:	621a      	str	r2, [r3, #32]
 80047f8:	e01c      	b.n	8004834 <HAL_RCC_OscConfig+0x398>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x380>
 8004802:	4bae      	ldr	r3, [pc, #696]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004804:	6a1a      	ldr	r2, [r3, #32]
 8004806:	4bad      	ldr	r3, [pc, #692]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004808:	2104      	movs	r1, #4
 800480a:	430a      	orrs	r2, r1
 800480c:	621a      	str	r2, [r3, #32]
 800480e:	4bab      	ldr	r3, [pc, #684]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004810:	6a1a      	ldr	r2, [r3, #32]
 8004812:	4baa      	ldr	r3, [pc, #680]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004814:	2101      	movs	r1, #1
 8004816:	430a      	orrs	r2, r1
 8004818:	621a      	str	r2, [r3, #32]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0x398>
 800481c:	4ba7      	ldr	r3, [pc, #668]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	4ba6      	ldr	r3, [pc, #664]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004822:	2101      	movs	r1, #1
 8004824:	438a      	bics	r2, r1
 8004826:	621a      	str	r2, [r3, #32]
 8004828:	4ba4      	ldr	r3, [pc, #656]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	4ba3      	ldr	r3, [pc, #652]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800482e:	2104      	movs	r1, #4
 8004830:	438a      	bics	r2, r1
 8004832:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d014      	beq.n	8004866 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483c:	f7fe fa84 	bl	8002d48 <HAL_GetTick>
 8004840:	0003      	movs	r3, r0
 8004842:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	e009      	b.n	800485a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fe fa7f 	bl	8002d48 <HAL_GetTick>
 800484a:	0002      	movs	r2, r0
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	4a9b      	ldr	r2, [pc, #620]	@ (8004ac0 <HAL_RCC_OscConfig+0x624>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e12b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	4b98      	ldr	r3, [pc, #608]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x3aa>
 8004864:	e013      	b.n	800488e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe fa6f 	bl	8002d48 <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	e009      	b.n	8004884 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fe fa6a 	bl	8002d48 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a91      	ldr	r2, [pc, #580]	@ (8004ac0 <HAL_RCC_OscConfig+0x624>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e116      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004884:	4b8d      	ldr	r3, [pc, #564]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	2202      	movs	r2, #2
 800488a:	4013      	ands	r3, r2
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800488e:	231f      	movs	r3, #31
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004898:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	4b87      	ldr	r3, [pc, #540]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800489e:	4989      	ldr	r1, [pc, #548]	@ (8004ac4 <HAL_RCC_OscConfig+0x628>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2210      	movs	r2, #16
 80048aa:	4013      	ands	r3, r2
 80048ac:	d063      	beq.n	8004976 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d12a      	bne.n	800490c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80048b6:	4b81      	ldr	r3, [pc, #516]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80048b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ba:	4b80      	ldr	r3, [pc, #512]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80048bc:	2104      	movs	r1, #4
 80048be:	430a      	orrs	r2, r1
 80048c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80048c2:	4b7e      	ldr	r3, [pc, #504]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80048c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048c6:	4b7d      	ldr	r3, [pc, #500]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ce:	f7fe fa3b 	bl	8002d48 <HAL_GetTick>
 80048d2:	0003      	movs	r3, r0
 80048d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048d8:	f7fe fa36 	bl	8002d48 <HAL_GetTick>
 80048dc:	0002      	movs	r2, r0
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0e3      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048ea:	4b74      	ldr	r3, [pc, #464]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	2202      	movs	r2, #2
 80048f0:	4013      	ands	r3, r2
 80048f2:	d0f1      	beq.n	80048d8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80048f4:	4b71      	ldr	r3, [pc, #452]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80048f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f8:	22f8      	movs	r2, #248	@ 0xf8
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	00da      	lsls	r2, r3, #3
 8004904:	4b6d      	ldr	r3, [pc, #436]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004906:	430a      	orrs	r2, r1
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34
 800490a:	e034      	b.n	8004976 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	3305      	adds	r3, #5
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004914:	4b69      	ldr	r3, [pc, #420]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004918:	4b68      	ldr	r3, [pc, #416]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800491a:	2104      	movs	r1, #4
 800491c:	438a      	bics	r2, r1
 800491e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004920:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004924:	22f8      	movs	r2, #248	@ 0xf8
 8004926:	4393      	bics	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	00da      	lsls	r2, r3, #3
 8004930:	4b62      	ldr	r3, [pc, #392]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004932:	430a      	orrs	r2, r1
 8004934:	635a      	str	r2, [r3, #52]	@ 0x34
 8004936:	e01e      	b.n	8004976 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004938:	4b60      	ldr	r3, [pc, #384]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800493a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800493c:	4b5f      	ldr	r3, [pc, #380]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800493e:	2104      	movs	r1, #4
 8004940:	430a      	orrs	r2, r1
 8004942:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004944:	4b5d      	ldr	r3, [pc, #372]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004948:	4b5c      	ldr	r3, [pc, #368]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800494a:	2101      	movs	r1, #1
 800494c:	438a      	bics	r2, r1
 800494e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fe f9fa 	bl	8002d48 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800495a:	f7fe f9f5 	bl	8002d48 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0a2      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800496c:	4b53      	ldr	r3, [pc, #332]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800496e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004970:	2202      	movs	r2, #2
 8004972:	4013      	ands	r3, r2
 8004974:	d1f1      	bne.n	800495a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d100      	bne.n	8004980 <HAL_RCC_OscConfig+0x4e4>
 800497e:	e097      	b.n	8004ab0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004980:	4b4e      	ldr	r3, [pc, #312]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	220c      	movs	r2, #12
 8004986:	4013      	ands	r3, r2
 8004988:	2b08      	cmp	r3, #8
 800498a:	d100      	bne.n	800498e <HAL_RCC_OscConfig+0x4f2>
 800498c:	e06b      	b.n	8004a66 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d14c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b49      	ldr	r3, [pc, #292]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b48      	ldr	r3, [pc, #288]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 800499c:	494a      	ldr	r1, [pc, #296]	@ (8004ac8 <HAL_RCC_OscConfig+0x62c>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a2:	f7fe f9d1 	bl	8002d48 <HAL_GetTick>
 80049a6:	0003      	movs	r3, r0
 80049a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fe f9cc 	bl	8002d48 <HAL_GetTick>
 80049b0:	0002      	movs	r2, r0
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e079      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049be:	4b3f      	ldr	r3, [pc, #252]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2380      	movs	r3, #128	@ 0x80
 80049c4:	049b      	lsls	r3, r3, #18
 80049c6:	4013      	ands	r3, r2
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ca:	4b3c      	ldr	r3, [pc, #240]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	220f      	movs	r2, #15
 80049d0:	4393      	bics	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d8:	4b38      	ldr	r3, [pc, #224]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049da:	430a      	orrs	r2, r1
 80049dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049de:	4b37      	ldr	r3, [pc, #220]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a3a      	ldr	r2, [pc, #232]	@ (8004acc <HAL_RCC_OscConfig+0x630>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	4b32      	ldr	r3, [pc, #200]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f8:	4b30      	ldr	r3, [pc, #192]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b2f      	ldr	r3, [pc, #188]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 80049fe:	2180      	movs	r1, #128	@ 0x80
 8004a00:	0449      	lsls	r1, r1, #17
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fe f99f 	bl	8002d48 <HAL_GetTick>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fe f99a 	bl	8002d48 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e047      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a22:	4b26      	ldr	r3, [pc, #152]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	@ 0x80
 8004a28:	049b      	lsls	r3, r3, #18
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x574>
 8004a2e:	e03f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b22      	ldr	r3, [pc, #136]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b21      	ldr	r3, [pc, #132]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a36:	4924      	ldr	r1, [pc, #144]	@ (8004ac8 <HAL_RCC_OscConfig+0x62c>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fe f984 	bl	8002d48 <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fe f97f 	bl	8002d48 <HAL_GetTick>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e02c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a58:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	049b      	lsls	r3, r3, #18
 8004a60:	4013      	ands	r3, r2
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x5aa>
 8004a64:	e024      	b.n	8004ab0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e01f      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a72:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a78:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <HAL_RCC_OscConfig+0x620>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	401a      	ands	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d10e      	bne.n	8004aac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	220f      	movs	r2, #15
 8004a92:	401a      	ands	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	23f0      	movs	r3, #240	@ 0xf0
 8004aa0:	039b      	lsls	r3, r3, #14
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b008      	add	sp, #32
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	00001388 	.word	0x00001388
 8004ac4:	efffffff 	.word	0xefffffff
 8004ac8:	feffffff 	.word	0xfeffffff
 8004acc:	ffc2ffff 	.word	0xffc2ffff

08004ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0b3      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4013      	ands	r3, r2
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d911      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b58      	ldr	r3, [pc, #352]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2201      	movs	r2, #1
 8004af8:	4393      	bics	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b04:	4b53      	ldr	r3, [pc, #332]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e09a      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2204      	movs	r2, #4
 8004b26:	4013      	ands	r3, r2
 8004b28:	d006      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b30:	21e0      	movs	r1, #224	@ 0xe0
 8004b32:	00c9      	lsls	r1, r1, #3
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b47      	ldr	r3, [pc, #284]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	22f0      	movs	r2, #240	@ 0xf0
 8004b3e:	4393      	bics	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	4b44      	ldr	r3, [pc, #272]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2201      	movs	r2, #1
 8004b52:	4013      	ands	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	029b      	lsls	r3, r3, #10
 8004b66:	4013      	ands	r3, r2
 8004b68:	d114      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06e      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b76:	4b38      	ldr	r3, [pc, #224]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	049b      	lsls	r3, r3, #18
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d108      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e062      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	4b34      	ldr	r3, [pc, #208]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e05b      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b94:	4b30      	ldr	r3, [pc, #192]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2203      	movs	r2, #3
 8004b9a:	4393      	bics	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba8:	f7fe f8ce 	bl	8002d48 <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb0:	e009      	b.n	8004bc6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb2:	f7fe f8c9 	bl	8002d48 <HAL_GetTick>
 8004bb6:	0002      	movs	r2, r0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	4a27      	ldr	r2, [pc, #156]	@ (8004c5c <HAL_RCC_ClockConfig+0x18c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e042      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	220c      	movs	r2, #12
 8004bcc:	401a      	ands	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1ec      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4013      	ands	r3, r2
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d211      	bcs.n	8004c0a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2201      	movs	r2, #1
 8004bec:	4393      	bics	r3, r2
 8004bee:	0019      	movs	r1, r3
 8004bf0:	4b18      	ldr	r3, [pc, #96]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf8:	4b16      	ldr	r3, [pc, #88]	@ (8004c54 <HAL_RCC_ClockConfig+0x184>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4013      	ands	r3, r2
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d001      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e020      	b.n	8004c4c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	4013      	ands	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a11      	ldr	r2, [pc, #68]	@ (8004c60 <HAL_RCC_ClockConfig+0x190>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c28:	f000 f820 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2c:	0001      	movs	r1, r0
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <HAL_RCC_ClockConfig+0x188>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	220f      	movs	r2, #15
 8004c36:	4013      	ands	r3, r2
 8004c38:	4a0a      	ldr	r2, [pc, #40]	@ (8004c64 <HAL_RCC_ClockConfig+0x194>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	000a      	movs	r2, r1
 8004c3e:	40da      	lsrs	r2, r3
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_ClockConfig+0x198>)
 8004c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c44:	2000      	movs	r0, #0
 8004c46:	f7fe f839 	bl	8002cbc <HAL_InitTick>
  
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b004      	add	sp, #16
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40022000 	.word	0x40022000
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	00001388 	.word	0x00001388
 8004c60:	fffff8ff 	.word	0xfffff8ff
 8004c64:	080079e0 	.word	0x080079e0
 8004c68:	2000000c 	.word	0x2000000c

08004c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c86:	4b20      	ldr	r3, [pc, #128]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	220c      	movs	r2, #12
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x30>
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8004c9a:	e02c      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c9e:	613b      	str	r3, [r7, #16]
      break;
 8004ca0:	e02c      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	0c9b      	lsrs	r3, r3, #18
 8004ca6:	220f      	movs	r2, #15
 8004ca8:	4013      	ands	r3, r2
 8004caa:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cac:	5cd3      	ldrb	r3, [r2, r3]
 8004cae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004cb0:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	220f      	movs	r2, #15
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	4a16      	ldr	r2, [pc, #88]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	025b      	lsls	r3, r3, #9
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4810      	ldr	r0, [pc, #64]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ccc:	f7fb fa1c 	bl	8000108 <__udivsi3>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4353      	muls	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e009      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	000a      	movs	r2, r1
 8004ce0:	0152      	lsls	r2, r2, #5
 8004ce2:	1a52      	subs	r2, r2, r1
 8004ce4:	0193      	lsls	r3, r2, #6
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	185b      	adds	r3, r3, r1
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	613b      	str	r3, [r7, #16]
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cf6:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cf8:	613b      	str	r3, [r7, #16]
      break;
 8004cfa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004cfc:	693b      	ldr	r3, [r7, #16]
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b006      	add	sp, #24
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	007a1200 	.word	0x007a1200
 8004d10:	080079f8 	.word	0x080079f8
 8004d14:	08007a08 	.word	0x08007a08

08004d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d1c:	4b02      	ldr	r3, [pc, #8]	@ (8004d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	2000000c 	.word	0x2000000c

08004d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d30:	f7ff fff2 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 8004d34:	0001      	movs	r1, r0
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	2207      	movs	r2, #7
 8004d3e:	4013      	ands	r3, r2
 8004d40:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	40d9      	lsrs	r1, r3
 8004d46:	000b      	movs	r3, r1
}    
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			@ (mov r8, r8)
 8004d50:	40021000 	.word	0x40021000
 8004d54:	080079f0 	.word	0x080079f0

08004d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	025b      	lsls	r3, r3, #9
 8004d70:	4013      	ands	r3, r2
 8004d72:	d100      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004d74:	e08e      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004d76:	2017      	movs	r0, #23
 8004d78:	183b      	adds	r3, r7, r0
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7e:	4b57      	ldr	r3, [pc, #348]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	2380      	movs	r3, #128	@ 0x80
 8004d84:	055b      	lsls	r3, r3, #21
 8004d86:	4013      	ands	r3, r2
 8004d88:	d110      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d8a:	4b54      	ldr	r3, [pc, #336]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	4b53      	ldr	r3, [pc, #332]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d90:	2180      	movs	r1, #128	@ 0x80
 8004d92:	0549      	lsls	r1, r1, #21
 8004d94:	430a      	orrs	r2, r1
 8004d96:	61da      	str	r2, [r3, #28]
 8004d98:	4b50      	ldr	r3, [pc, #320]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	055b      	lsls	r3, r3, #21
 8004da0:	4013      	ands	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da6:	183b      	adds	r3, r7, r0
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4013      	ands	r3, r2
 8004db6:	d11a      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db8:	4b49      	ldr	r3, [pc, #292]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b48      	ldr	r3, [pc, #288]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	0049      	lsls	r1, r1, #1
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7fd ffbf 	bl	8002d48 <HAL_GetTick>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	e008      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7fd ffba 	bl	8002d48 <HAL_GetTick>
 8004dd4:	0002      	movs	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e077      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	2380      	movs	r3, #128	@ 0x80
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4013      	ands	r3, r2
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dee:	4b3b      	ldr	r3, [pc, #236]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	23c0      	movs	r3, #192	@ 0xc0
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4013      	ands	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d034      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	23c0      	movs	r3, #192	@ 0xc0
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d02c      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e10:	4b32      	ldr	r3, [pc, #200]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4a33      	ldr	r2, [pc, #204]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e1a:	4b30      	ldr	r3, [pc, #192]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e20:	2180      	movs	r1, #128	@ 0x80
 8004e22:	0249      	lsls	r1, r1, #9
 8004e24:	430a      	orrs	r2, r1
 8004e26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e28:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e2e:	492e      	ldr	r1, [pc, #184]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004e30:	400a      	ands	r2, r1
 8004e32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e34:	4b29      	ldr	r3, [pc, #164]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fd ff81 	bl	8002d48 <HAL_GetTick>
 8004e46:	0003      	movs	r3, r0
 8004e48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	e009      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4c:	f7fd ff7c 	bl	8002d48 <HAL_GetTick>
 8004e50:	0002      	movs	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	4a25      	ldr	r2, [pc, #148]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e038      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e60:	4b1e      	ldr	r3, [pc, #120]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	2202      	movs	r2, #2
 8004e66:	4013      	ands	r3, r2
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4b18      	ldr	r3, [pc, #96]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e7e:	2317      	movs	r3, #23
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e8e:	4918      	ldr	r1, [pc, #96]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	4393      	bics	r3, r2
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	4393      	bics	r3, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b006      	add	sp, #24
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40007000 	.word	0x40007000
 8004ee4:	fffffcff 	.word	0xfffffcff
 8004ee8:	fffeffff 	.word	0xfffeffff
 8004eec:	00001388 	.word	0x00001388
 8004ef0:	efffffff 	.word	0xefffffff

08004ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e042      	b.n	8004f8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223d      	movs	r2, #61	@ 0x3d
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d107      	bne.n	8004f22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	223c      	movs	r2, #60	@ 0x3c
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7fd fd0b 	bl	8002938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	223d      	movs	r2, #61	@ 0x3d
 8004f26:	2102      	movs	r1, #2
 8004f28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	0019      	movs	r1, r3
 8004f34:	0010      	movs	r0, r2
 8004f36:	f000 fe09 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2246      	movs	r2, #70	@ 0x46
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	223e      	movs	r2, #62	@ 0x3e
 8004f46:	2101      	movs	r1, #1
 8004f48:	5499      	strb	r1, [r3, r2]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	223f      	movs	r2, #63	@ 0x3f
 8004f4e:	2101      	movs	r1, #1
 8004f50:	5499      	strb	r1, [r3, r2]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2240      	movs	r2, #64	@ 0x40
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2241      	movs	r2, #65	@ 0x41
 8004f5e:	2101      	movs	r1, #1
 8004f60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2242      	movs	r2, #66	@ 0x42
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2243      	movs	r2, #67	@ 0x43
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5499      	strb	r1, [r3, r2]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2244      	movs	r2, #68	@ 0x44
 8004f76:	2101      	movs	r1, #1
 8004f78:	5499      	strb	r1, [r3, r2]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2245      	movs	r2, #69	@ 0x45
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	223d      	movs	r2, #61	@ 0x3d
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e042      	b.n	800502c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	223d      	movs	r2, #61	@ 0x3d
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d107      	bne.n	8004fc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	223c      	movs	r2, #60	@ 0x3c
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f000 f839 	bl	8005034 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223d      	movs	r2, #61	@ 0x3d
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	0010      	movs	r0, r2
 8004fd6:	f000 fdb9 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2246      	movs	r2, #70	@ 0x46
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	223e      	movs	r2, #62	@ 0x3e
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	223f      	movs	r2, #63	@ 0x3f
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2240      	movs	r2, #64	@ 0x40
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2241      	movs	r2, #65	@ 0x41
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2242      	movs	r2, #66	@ 0x42
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2243      	movs	r2, #67	@ 0x43
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2244      	movs	r2, #68	@ 0x44
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2245      	movs	r2, #69	@ 0x45
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	223d      	movs	r2, #61	@ 0x3d
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b002      	add	sp, #8
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800503c:	46c0      	nop			@ (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d108      	bne.n	8005066 <HAL_TIM_PWM_Start+0x22>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	223e      	movs	r2, #62	@ 0x3e
 8005058:	5c9b      	ldrb	r3, [r3, r2]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	1e5a      	subs	r2, r3, #1
 8005060:	4193      	sbcs	r3, r2
 8005062:	b2db      	uxtb	r3, r3
 8005064:	e01f      	b.n	80050a6 <HAL_TIM_PWM_Start+0x62>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d108      	bne.n	800507e <HAL_TIM_PWM_Start+0x3a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	223f      	movs	r2, #63	@ 0x3f
 8005070:	5c9b      	ldrb	r3, [r3, r2]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	4193      	sbcs	r3, r2
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e013      	b.n	80050a6 <HAL_TIM_PWM_Start+0x62>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d108      	bne.n	8005096 <HAL_TIM_PWM_Start+0x52>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2240      	movs	r2, #64	@ 0x40
 8005088:	5c9b      	ldrb	r3, [r3, r2]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	4193      	sbcs	r3, r2
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e007      	b.n	80050a6 <HAL_TIM_PWM_Start+0x62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2241      	movs	r2, #65	@ 0x41
 800509a:	5c9b      	ldrb	r3, [r3, r2]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	4193      	sbcs	r3, r2
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e06a      	b.n	8005184 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Start+0x7a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	223e      	movs	r2, #62	@ 0x3e
 80050b8:	2102      	movs	r1, #2
 80050ba:	5499      	strb	r1, [r3, r2]
 80050bc:	e013      	b.n	80050e6 <HAL_TIM_PWM_Start+0xa2>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0x8a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	223f      	movs	r2, #63	@ 0x3f
 80050c8:	2102      	movs	r1, #2
 80050ca:	5499      	strb	r1, [r3, r2]
 80050cc:	e00b      	b.n	80050e6 <HAL_TIM_PWM_Start+0xa2>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0x9a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2240      	movs	r2, #64	@ 0x40
 80050d8:	2102      	movs	r1, #2
 80050da:	5499      	strb	r1, [r3, r2]
 80050dc:	e003      	b.n	80050e6 <HAL_TIM_PWM_Start+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2241      	movs	r2, #65	@ 0x41
 80050e2:	2102      	movs	r1, #2
 80050e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	2201      	movs	r2, #1
 80050ee:	0018      	movs	r0, r3
 80050f0:	f001 f948 	bl	8006384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a24      	ldr	r2, [pc, #144]	@ (800518c <HAL_TIM_PWM_Start+0x148>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_TIM_PWM_Start+0xce>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <HAL_TIM_PWM_Start+0x14c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIM_PWM_Start+0xce>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a21      	ldr	r2, [pc, #132]	@ (8005194 <HAL_TIM_PWM_Start+0x150>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_Start+0xd2>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_TIM_PWM_Start+0xd4>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2180      	movs	r1, #128	@ 0x80
 8005128:	0209      	lsls	r1, r1, #8
 800512a:	430a      	orrs	r2, r1
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a16      	ldr	r2, [pc, #88]	@ (800518c <HAL_TIM_PWM_Start+0x148>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00a      	beq.n	800514e <HAL_TIM_PWM_Start+0x10a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2380      	movs	r3, #128	@ 0x80
 800513e:	05db      	lsls	r3, r3, #23
 8005140:	429a      	cmp	r2, r3
 8005142:	d004      	beq.n	800514e <HAL_TIM_PWM_Start+0x10a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a13      	ldr	r2, [pc, #76]	@ (8005198 <HAL_TIM_PWM_Start+0x154>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d111      	bne.n	8005172 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2207      	movs	r2, #7
 8005156:	4013      	ands	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d010      	beq.n	8005182 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2101      	movs	r1, #1
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	e007      	b.n	8005182 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2101      	movs	r1, #1
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b004      	add	sp, #16
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800
 8005198:	40000400 	.word	0x40000400

0800519c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e042      	b.n	8005234 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	223d      	movs	r2, #61	@ 0x3d
 80051b2:	5c9b      	ldrb	r3, [r3, r2]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	223c      	movs	r2, #60	@ 0x3c
 80051be:	2100      	movs	r1, #0
 80051c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 f839 	bl	800523c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	223d      	movs	r2, #61	@ 0x3d
 80051ce:	2102      	movs	r1, #2
 80051d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	0019      	movs	r1, r3
 80051dc:	0010      	movs	r0, r2
 80051de:	f000 fcb5 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2246      	movs	r2, #70	@ 0x46
 80051e6:	2101      	movs	r1, #1
 80051e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	223e      	movs	r2, #62	@ 0x3e
 80051ee:	2101      	movs	r1, #1
 80051f0:	5499      	strb	r1, [r3, r2]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	223f      	movs	r2, #63	@ 0x3f
 80051f6:	2101      	movs	r1, #1
 80051f8:	5499      	strb	r1, [r3, r2]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2240      	movs	r2, #64	@ 0x40
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2241      	movs	r2, #65	@ 0x41
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2242      	movs	r2, #66	@ 0x42
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2243      	movs	r2, #67	@ 0x43
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2244      	movs	r2, #68	@ 0x44
 800521e:	2101      	movs	r1, #1
 8005220:	5499      	strb	r1, [r3, r2]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2245      	movs	r2, #69	@ 0x45
 8005226:	2101      	movs	r1, #1
 8005228:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	223d      	movs	r2, #61	@ 0x3d
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	230f      	movs	r3, #15
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x22>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	223e      	movs	r2, #62	@ 0x3e
 8005268:	5c9b      	ldrb	r3, [r3, r2]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e013      	b.n	8005296 <HAL_TIM_IC_Start_IT+0x4a>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d104      	bne.n	800527e <HAL_TIM_IC_Start_IT+0x32>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	223f      	movs	r2, #63	@ 0x3f
 8005278:	5c9b      	ldrb	r3, [r3, r2]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e00b      	b.n	8005296 <HAL_TIM_IC_Start_IT+0x4a>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d104      	bne.n	800528e <HAL_TIM_IC_Start_IT+0x42>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2240      	movs	r2, #64	@ 0x40
 8005288:	5c9b      	ldrb	r3, [r3, r2]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e003      	b.n	8005296 <HAL_TIM_IC_Start_IT+0x4a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2241      	movs	r2, #65	@ 0x41
 8005292:	5c9b      	ldrb	r3, [r3, r2]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	220e      	movs	r2, #14
 8005298:	18ba      	adds	r2, r7, r2
 800529a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <HAL_TIM_IC_Start_IT+0x60>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2242      	movs	r2, #66	@ 0x42
 80052a6:	5c9b      	ldrb	r3, [r3, r2]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e013      	b.n	80052d4 <HAL_TIM_IC_Start_IT+0x88>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_IC_Start_IT+0x70>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2243      	movs	r2, #67	@ 0x43
 80052b6:	5c9b      	ldrb	r3, [r3, r2]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e00b      	b.n	80052d4 <HAL_TIM_IC_Start_IT+0x88>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_IC_Start_IT+0x80>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2244      	movs	r2, #68	@ 0x44
 80052c6:	5c9b      	ldrb	r3, [r3, r2]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e003      	b.n	80052d4 <HAL_TIM_IC_Start_IT+0x88>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2245      	movs	r2, #69	@ 0x45
 80052d0:	5c9b      	ldrb	r3, [r3, r2]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	210d      	movs	r1, #13
 80052d6:	187a      	adds	r2, r7, r1
 80052d8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052da:	230e      	movs	r3, #14
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d103      	bne.n	80052ec <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d001      	beq.n	80052f0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0ac      	b.n	800544a <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <HAL_TIM_IC_Start_IT+0xb4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223e      	movs	r2, #62	@ 0x3e
 80052fa:	2102      	movs	r1, #2
 80052fc:	5499      	strb	r1, [r3, r2]
 80052fe:	e013      	b.n	8005328 <HAL_TIM_IC_Start_IT+0xdc>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d104      	bne.n	8005310 <HAL_TIM_IC_Start_IT+0xc4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	223f      	movs	r2, #63	@ 0x3f
 800530a:	2102      	movs	r1, #2
 800530c:	5499      	strb	r1, [r3, r2]
 800530e:	e00b      	b.n	8005328 <HAL_TIM_IC_Start_IT+0xdc>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d104      	bne.n	8005320 <HAL_TIM_IC_Start_IT+0xd4>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2240      	movs	r2, #64	@ 0x40
 800531a:	2102      	movs	r1, #2
 800531c:	5499      	strb	r1, [r3, r2]
 800531e:	e003      	b.n	8005328 <HAL_TIM_IC_Start_IT+0xdc>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2241      	movs	r2, #65	@ 0x41
 8005324:	2102      	movs	r1, #2
 8005326:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d104      	bne.n	8005338 <HAL_TIM_IC_Start_IT+0xec>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2242      	movs	r2, #66	@ 0x42
 8005332:	2102      	movs	r1, #2
 8005334:	5499      	strb	r1, [r3, r2]
 8005336:	e013      	b.n	8005360 <HAL_TIM_IC_Start_IT+0x114>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d104      	bne.n	8005348 <HAL_TIM_IC_Start_IT+0xfc>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2243      	movs	r2, #67	@ 0x43
 8005342:	2102      	movs	r1, #2
 8005344:	5499      	strb	r1, [r3, r2]
 8005346:	e00b      	b.n	8005360 <HAL_TIM_IC_Start_IT+0x114>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b08      	cmp	r3, #8
 800534c:	d104      	bne.n	8005358 <HAL_TIM_IC_Start_IT+0x10c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2244      	movs	r2, #68	@ 0x44
 8005352:	2102      	movs	r1, #2
 8005354:	5499      	strb	r1, [r3, r2]
 8005356:	e003      	b.n	8005360 <HAL_TIM_IC_Start_IT+0x114>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2245      	movs	r2, #69	@ 0x45
 800535c:	2102      	movs	r1, #2
 800535e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d02a      	beq.n	80053bc <HAL_TIM_IC_Start_IT+0x170>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d830      	bhi.n	80053ce <HAL_TIM_IC_Start_IT+0x182>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b08      	cmp	r3, #8
 8005370:	d01b      	beq.n	80053aa <HAL_TIM_IC_Start_IT+0x15e>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d82a      	bhi.n	80053ce <HAL_TIM_IC_Start_IT+0x182>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IC_Start_IT+0x13a>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d009      	beq.n	8005398 <HAL_TIM_IC_Start_IT+0x14c>
 8005384:	e023      	b.n	80053ce <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2102      	movs	r1, #2
 8005392:	430a      	orrs	r2, r1
 8005394:	60da      	str	r2, [r3, #12]
      break;
 8005396:	e01f      	b.n	80053d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2104      	movs	r1, #4
 80053a4:	430a      	orrs	r2, r1
 80053a6:	60da      	str	r2, [r3, #12]
      break;
 80053a8:	e016      	b.n	80053d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2108      	movs	r1, #8
 80053b6:	430a      	orrs	r2, r1
 80053b8:	60da      	str	r2, [r3, #12]
      break;
 80053ba:	e00d      	b.n	80053d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2110      	movs	r1, #16
 80053c8:	430a      	orrs	r2, r1
 80053ca:	60da      	str	r2, [r3, #12]
      break;
 80053cc:	e004      	b.n	80053d8 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80053ce:	230f      	movs	r3, #15
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80053d8:	230f      	movs	r3, #15
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d130      	bne.n	8005444 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	0018      	movs	r0, r3
 80053ec:	f000 ffca 	bl	8006384 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <HAL_TIM_IC_Start_IT+0x208>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00a      	beq.n	8005410 <HAL_TIM_IC_Start_IT+0x1c4>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	05db      	lsls	r3, r3, #23
 8005402:	429a      	cmp	r2, r3
 8005404:	d004      	beq.n	8005410 <HAL_TIM_IC_Start_IT+0x1c4>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a13      	ldr	r2, [pc, #76]	@ (8005458 <HAL_TIM_IC_Start_IT+0x20c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d111      	bne.n	8005434 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2207      	movs	r2, #7
 8005418:	4013      	ands	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b06      	cmp	r3, #6
 8005420:	d010      	beq.n	8005444 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	e007      	b.n	8005444 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005444:	230f      	movs	r3, #15
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	781b      	ldrb	r3, [r3, #0]
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400

0800545c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	d021      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2202      	movs	r2, #2
 8005480:	4013      	ands	r3, r2
 8005482:	d01d      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2203      	movs	r2, #3
 800548a:	4252      	negs	r2, r2
 800548c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2203      	movs	r2, #3
 800549c:	4013      	ands	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f7fc ff48 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e007      	b.n	80054ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 fb35 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 fb39 	bl	8005b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2204      	movs	r2, #4
 80054c4:	4013      	ands	r3, r2
 80054c6:	d022      	beq.n	800550e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	4013      	ands	r3, r2
 80054ce:	d01e      	beq.n	800550e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2205      	movs	r2, #5
 80054d6:	4252      	negs	r2, r2
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	23c0      	movs	r3, #192	@ 0xc0
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4013      	ands	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fc ff21 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 80054f6:	e007      	b.n	8005508 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 fb0e 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0018      	movs	r0, r3
 8005504:	f000 fb12 	bl	8005b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2208      	movs	r2, #8
 8005512:	4013      	ands	r3, r2
 8005514:	d021      	beq.n	800555a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2208      	movs	r2, #8
 800551a:	4013      	ands	r3, r2
 800551c:	d01d      	beq.n	800555a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2209      	movs	r2, #9
 8005524:	4252      	negs	r2, r2
 8005526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2204      	movs	r2, #4
 800552c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	2203      	movs	r2, #3
 8005536:	4013      	ands	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f7fc fefb 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8005542:	e007      	b.n	8005554 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 fae8 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 faec 	bl	8005b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2210      	movs	r2, #16
 800555e:	4013      	ands	r3, r2
 8005560:	d022      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2210      	movs	r2, #16
 8005566:	4013      	ands	r3, r2
 8005568:	d01e      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2211      	movs	r2, #17
 8005570:	4252      	negs	r2, r2
 8005572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2208      	movs	r2, #8
 8005578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	23c0      	movs	r3, #192	@ 0xc0
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4013      	ands	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f7fc fed4 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8005590:	e007      	b.n	80055a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 fac1 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	0018      	movs	r0, r3
 800559e:	f000 fac5 	bl	8005b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2201      	movs	r2, #1
 80055ac:	4013      	ands	r3, r2
 80055ae:	d00c      	beq.n	80055ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	d008      	beq.n	80055ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2202      	movs	r2, #2
 80055be:	4252      	negs	r2, r2
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7fc ff31 	bl	800242c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2280      	movs	r2, #128	@ 0x80
 80055ce:	4013      	ands	r3, r2
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2280      	movs	r2, #128	@ 0x80
 80055d6:	4013      	ands	r3, r2
 80055d8:	d008      	beq.n	80055ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2281      	movs	r2, #129	@ 0x81
 80055e0:	4252      	negs	r2, r2
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 ffae 	bl	8006548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2240      	movs	r2, #64	@ 0x40
 80055f0:	4013      	ands	r3, r2
 80055f2:	d00c      	beq.n	800560e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2240      	movs	r2, #64	@ 0x40
 80055f8:	4013      	ands	r3, r2
 80055fa:	d008      	beq.n	800560e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2241      	movs	r2, #65	@ 0x41
 8005602:	4252      	negs	r2, r2
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0018      	movs	r0, r3
 800560a:	f000 fa97 	bl	8005b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2220      	movs	r2, #32
 8005612:	4013      	ands	r3, r2
 8005614:	d00c      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	4013      	ands	r3, r2
 800561c:	d008      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2221      	movs	r2, #33	@ 0x21
 8005624:	4252      	negs	r2, r2
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	0018      	movs	r0, r3
 800562c:	f000 ff84 	bl	8006538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b004      	add	sp, #16
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2317      	movs	r3, #23
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	223c      	movs	r2, #60	@ 0x3c
 8005650:	5c9b      	ldrb	r3, [r3, r2]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_IC_ConfigChannel+0x22>
 8005656:	2302      	movs	r3, #2
 8005658:	e08c      	b.n	8005774 <HAL_TIM_IC_ConfigChannel+0x13c>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	223c      	movs	r2, #60	@ 0x3c
 800565e:	2101      	movs	r1, #1
 8005660:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005678:	f000 fccc 	bl	8006014 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	210c      	movs	r1, #12
 8005688:	438a      	bics	r2, r1
 800568a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6999      	ldr	r1, [r3, #24]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	619a      	str	r2, [r3, #24]
 800569e:	e062      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d11c      	bne.n	80056e0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056b6:	f000 fd31 	bl	800611c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	492d      	ldr	r1, [pc, #180]	@ (800577c <HAL_TIM_IC_ConfigChannel+0x144>)
 80056c6:	400a      	ands	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6999      	ldr	r1, [r3, #24]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	021a      	lsls	r2, r3, #8
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
 80056de:	e042      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d11b      	bne.n	800571e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80056f6:	f000 fd85 	bl	8006204 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	210c      	movs	r1, #12
 8005706:	438a      	bics	r2, r1
 8005708:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	61da      	str	r2, [r3, #28]
 800571c:	e023      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b0c      	cmp	r3, #12
 8005722:	d11c      	bne.n	800575e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005734:	f000 fda6 	bl	8006284 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	490e      	ldr	r1, [pc, #56]	@ (800577c <HAL_TIM_IC_ConfigChannel+0x144>)
 8005744:	400a      	ands	r2, r1
 8005746:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69d9      	ldr	r1, [r3, #28]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	61da      	str	r2, [r3, #28]
 800575c:	e003      	b.n	8005766 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800575e:	2317      	movs	r3, #23
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	223c      	movs	r2, #60	@ 0x3c
 800576a:	2100      	movs	r1, #0
 800576c:	5499      	strb	r1, [r3, r2]

  return status;
 800576e:	2317      	movs	r3, #23
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	781b      	ldrb	r3, [r3, #0]
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b006      	add	sp, #24
 800577a:	bd80      	pop	{r7, pc}
 800577c:	fffff3ff 	.word	0xfffff3ff

08005780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800578c:	2317      	movs	r3, #23
 800578e:	18fb      	adds	r3, r7, r3
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	223c      	movs	r2, #60	@ 0x3c
 8005798:	5c9b      	ldrb	r3, [r3, r2]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800579e:	2302      	movs	r3, #2
 80057a0:	e0ad      	b.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x17e>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	223c      	movs	r2, #60	@ 0x3c
 80057a6:	2101      	movs	r1, #1
 80057a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b0c      	cmp	r3, #12
 80057ae:	d100      	bne.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80057b0:	e076      	b.n	80058a0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d900      	bls.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x3a>
 80057b8:	e095      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d04e      	beq.n	800585e <HAL_TIM_PWM_ConfigChannel+0xde>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d900      	bls.n	80057c8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80057c6:	e08e      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d021      	beq.n	8005818 <HAL_TIM_PWM_ConfigChannel+0x98>
 80057d4:	e087      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	0011      	movs	r1, r2
 80057de:	0018      	movs	r0, r3
 80057e0:	f000 fa38 	bl	8005c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2108      	movs	r1, #8
 80057f0:	430a      	orrs	r2, r1
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2104      	movs	r1, #4
 8005800:	438a      	bics	r2, r1
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	619a      	str	r2, [r3, #24]
      break;
 8005816:	e06b      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	0011      	movs	r1, r2
 8005820:	0018      	movs	r0, r3
 8005822:	f000 fa95 	bl	8005d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2180      	movs	r1, #128	@ 0x80
 8005832:	0109      	lsls	r1, r1, #4
 8005834:	430a      	orrs	r2, r1
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4931      	ldr	r1, [pc, #196]	@ (8005908 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005844:	400a      	ands	r2, r1
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	021a      	lsls	r2, r3, #8
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
      break;
 800585c:	e048      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f000 faf0 	bl	8005e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2108      	movs	r1, #8
 8005878:	430a      	orrs	r2, r1
 800587a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2104      	movs	r1, #4
 8005888:	438a      	bics	r2, r1
 800588a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69d9      	ldr	r1, [r3, #28]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]
      break;
 800589e:	e027      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 fb4f 	bl	8005f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2180      	movs	r1, #128	@ 0x80
 80058ba:	0109      	lsls	r1, r1, #4
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	490f      	ldr	r1, [pc, #60]	@ (8005908 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80058cc:	400a      	ands	r2, r1
 80058ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69d9      	ldr	r1, [r3, #28]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	61da      	str	r2, [r3, #28]
      break;
 80058e4:	e004      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80058e6:	2317      	movs	r3, #23
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
      break;
 80058ee:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	223c      	movs	r2, #60	@ 0x3c
 80058f4:	2100      	movs	r1, #0
 80058f6:	5499      	strb	r1, [r3, r2]

  return status;
 80058f8:	2317      	movs	r3, #23
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	781b      	ldrb	r3, [r3, #0]
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b006      	add	sp, #24
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	fffffbff 	.word	0xfffffbff

0800590c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005916:	230f      	movs	r3, #15
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	223c      	movs	r2, #60	@ 0x3c
 8005922:	5c9b      	ldrb	r3, [r3, r2]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIM_ConfigClockSource+0x20>
 8005928:	2302      	movs	r3, #2
 800592a:	e0bc      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x19a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	223c      	movs	r2, #60	@ 0x3c
 8005930:	2101      	movs	r1, #1
 8005932:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	223d      	movs	r2, #61	@ 0x3d
 8005938:	2102      	movs	r1, #2
 800593a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2277      	movs	r2, #119	@ 0x77
 8005948:	4393      	bics	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a58      	ldr	r2, [pc, #352]	@ (8005ab0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005950:	4013      	ands	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2280      	movs	r2, #128	@ 0x80
 8005962:	0192      	lsls	r2, r2, #6
 8005964:	4293      	cmp	r3, r2
 8005966:	d040      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0xde>
 8005968:	2280      	movs	r2, #128	@ 0x80
 800596a:	0192      	lsls	r2, r2, #6
 800596c:	4293      	cmp	r3, r2
 800596e:	d900      	bls.n	8005972 <HAL_TIM_ConfigClockSource+0x66>
 8005970:	e088      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 8005972:	2280      	movs	r2, #128	@ 0x80
 8005974:	0152      	lsls	r2, r2, #5
 8005976:	4293      	cmp	r3, r2
 8005978:	d100      	bne.n	800597c <HAL_TIM_ConfigClockSource+0x70>
 800597a:	e088      	b.n	8005a8e <HAL_TIM_ConfigClockSource+0x182>
 800597c:	2280      	movs	r2, #128	@ 0x80
 800597e:	0152      	lsls	r2, r2, #5
 8005980:	4293      	cmp	r3, r2
 8005982:	d900      	bls.n	8005986 <HAL_TIM_ConfigClockSource+0x7a>
 8005984:	e07e      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 8005986:	2b70      	cmp	r3, #112	@ 0x70
 8005988:	d018      	beq.n	80059bc <HAL_TIM_ConfigClockSource+0xb0>
 800598a:	d900      	bls.n	800598e <HAL_TIM_ConfigClockSource+0x82>
 800598c:	e07a      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 800598e:	2b60      	cmp	r3, #96	@ 0x60
 8005990:	d04f      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x126>
 8005992:	d900      	bls.n	8005996 <HAL_TIM_ConfigClockSource+0x8a>
 8005994:	e076      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 8005996:	2b50      	cmp	r3, #80	@ 0x50
 8005998:	d03b      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x106>
 800599a:	d900      	bls.n	800599e <HAL_TIM_ConfigClockSource+0x92>
 800599c:	e072      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 800599e:	2b40      	cmp	r3, #64	@ 0x40
 80059a0:	d057      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x146>
 80059a2:	d900      	bls.n	80059a6 <HAL_TIM_ConfigClockSource+0x9a>
 80059a4:	e06e      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 80059a6:	2b30      	cmp	r3, #48	@ 0x30
 80059a8:	d063      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x166>
 80059aa:	d86b      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d060      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x166>
 80059b0:	d868      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d05d      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x166>
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d05b      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0x166>
 80059ba:	e063      	b.n	8005a84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059cc:	f000 fcba 	bl	8006344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2277      	movs	r2, #119	@ 0x77
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
      break;
 80059e8:	e052      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059fa:	f000 fca3 	bl	8006344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2180      	movs	r1, #128	@ 0x80
 8005a0a:	01c9      	lsls	r1, r1, #7
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
      break;
 8005a10:	e03e      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	001a      	movs	r2, r3
 8005a20:	f000 fb4e 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2150      	movs	r1, #80	@ 0x50
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 fc70 	bl	8006310 <TIM_ITRx_SetConfig>
      break;
 8005a30:	e02e      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3e:	001a      	movs	r2, r3
 8005a40:	f000 fbae 	bl	80061a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2160      	movs	r1, #96	@ 0x60
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f000 fc60 	bl	8006310 <TIM_ITRx_SetConfig>
      break;
 8005a50:	e01e      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5e:	001a      	movs	r2, r3
 8005a60:	f000 fb2e 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2140      	movs	r1, #64	@ 0x40
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 fc50 	bl	8006310 <TIM_ITRx_SetConfig>
      break;
 8005a70:	e00e      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	0010      	movs	r0, r2
 8005a7e:	f000 fc47 	bl	8006310 <TIM_ITRx_SetConfig>
      break;
 8005a82:	e005      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005a84:	230f      	movs	r3, #15
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
      break;
 8005a8c:	e000      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005a8e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	223d      	movs	r2, #61	@ 0x3d
 8005a94:	2101      	movs	r1, #1
 8005a96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	223c      	movs	r2, #60	@ 0x3c
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5499      	strb	r1, [r3, r2]

  return status;
 8005aa0:	230f      	movs	r3, #15
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	781b      	ldrb	r3, [r3, #0]
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b004      	add	sp, #16
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	ffff00ff 	.word	0xffff00ff

08005ab4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b0c      	cmp	r3, #12
 8005ac6:	d01e      	beq.n	8005b06 <HAL_TIM_ReadCapturedValue+0x52>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d820      	bhi.n	8005b10 <HAL_TIM_ReadCapturedValue+0x5c>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d013      	beq.n	8005afc <HAL_TIM_ReadCapturedValue+0x48>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d81a      	bhi.n	8005b10 <HAL_TIM_ReadCapturedValue+0x5c>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_TIM_ReadCapturedValue+0x34>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d005      	beq.n	8005af2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005ae6:	e013      	b.n	8005b10 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aee:	60fb      	str	r3, [r7, #12]
      break;
 8005af0:	e00f      	b.n	8005b12 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	60fb      	str	r3, [r7, #12]
      break;
 8005afa:	e00a      	b.n	8005b12 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b02:	60fb      	str	r3, [r7, #12]
      break;
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	60fb      	str	r3, [r7, #12]
      break;
 8005b0e:	e000      	b.n	8005b12 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005b10:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b004      	add	sp, #16
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b24:	46c0      	nop			@ (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b34:	46c0      	nop			@ (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b44:	46c0      	nop			@ (mov r8, r8)
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a37      	ldr	r2, [pc, #220]	@ (8005c3c <TIM_Base_SetConfig+0xf0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d008      	beq.n	8005b76 <TIM_Base_SetConfig+0x2a>
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	2380      	movs	r3, #128	@ 0x80
 8005b68:	05db      	lsls	r3, r3, #23
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0x2a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a33      	ldr	r2, [pc, #204]	@ (8005c40 <TIM_Base_SetConfig+0xf4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d108      	bne.n	8005b88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2270      	movs	r2, #112	@ 0x70
 8005b7a:	4393      	bics	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c3c <TIM_Base_SetConfig+0xf0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d014      	beq.n	8005bba <TIM_Base_SetConfig+0x6e>
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	2380      	movs	r3, #128	@ 0x80
 8005b94:	05db      	lsls	r3, r3, #23
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d00f      	beq.n	8005bba <TIM_Base_SetConfig+0x6e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a28      	ldr	r2, [pc, #160]	@ (8005c40 <TIM_Base_SetConfig+0xf4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0x6e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a27      	ldr	r2, [pc, #156]	@ (8005c44 <TIM_Base_SetConfig+0xf8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0x6e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a26      	ldr	r2, [pc, #152]	@ (8005c48 <TIM_Base_SetConfig+0xfc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0x6e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a25      	ldr	r2, [pc, #148]	@ (8005c4c <TIM_Base_SetConfig+0x100>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a24      	ldr	r2, [pc, #144]	@ (8005c50 <TIM_Base_SetConfig+0x104>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2280      	movs	r2, #128	@ 0x80
 8005bd0:	4393      	bics	r3, r2
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a11      	ldr	r2, [pc, #68]	@ (8005c3c <TIM_Base_SetConfig+0xf0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_Base_SetConfig+0xbe>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a12      	ldr	r2, [pc, #72]	@ (8005c48 <TIM_Base_SetConfig+0xfc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_Base_SetConfig+0xbe>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a11      	ldr	r2, [pc, #68]	@ (8005c4c <TIM_Base_SetConfig+0x100>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d103      	bne.n	8005c12 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d106      	bne.n	8005c32 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4393      	bics	r3, r2
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]
  }
}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40002000 	.word	0x40002000
 8005c48:	40014400 	.word	0x40014400
 8005c4c:	40014800 	.word	0x40014800
 8005c50:	fffffcff 	.word	0xfffffcff

08005c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	4393      	bics	r3, r2
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2270      	movs	r2, #112	@ 0x70
 8005c82:	4393      	bics	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	4393      	bics	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	4393      	bics	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <TIM_OC1_SetConfig+0xe8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_OC1_SetConfig+0x6e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	@ (8005d40 <TIM_OC1_SetConfig+0xec>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_OC1_SetConfig+0x6e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a21      	ldr	r2, [pc, #132]	@ (8005d44 <TIM_OC1_SetConfig+0xf0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4393      	bics	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	4393      	bics	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <TIM_OC1_SetConfig+0xe8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC1_SetConfig+0xa0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a16      	ldr	r2, [pc, #88]	@ (8005d40 <TIM_OC1_SetConfig+0xec>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC1_SetConfig+0xa0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <TIM_OC1_SetConfig+0xf0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d111      	bne.n	8005d18 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4a14      	ldr	r2, [pc, #80]	@ (8005d48 <TIM_OC1_SetConfig+0xf4>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	@ (8005d4c <TIM_OC1_SetConfig+0xf8>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	46c0      	nop			@ (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b006      	add	sp, #24
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800
 8005d48:	fffffeff 	.word	0xfffffeff
 8005d4c:	fffffdff 	.word	0xfffffdff

08005d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	2210      	movs	r2, #16
 8005d66:	4393      	bics	r3, r2
 8005d68:	001a      	movs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e30 <TIM_OC2_SetConfig+0xe0>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4a2b      	ldr	r2, [pc, #172]	@ (8005e34 <TIM_OC2_SetConfig+0xe4>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	4393      	bics	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a22      	ldr	r2, [pc, #136]	@ (8005e38 <TIM_OC2_SetConfig+0xe8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10d      	bne.n	8005dce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2280      	movs	r2, #128	@ 0x80
 8005db6:	4393      	bics	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2240      	movs	r2, #64	@ 0x40
 8005dca:	4393      	bics	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	@ (8005e38 <TIM_OC2_SetConfig+0xe8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_OC2_SetConfig+0x96>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <TIM_OC2_SetConfig+0xec>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC2_SetConfig+0x96>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a17      	ldr	r2, [pc, #92]	@ (8005e40 <TIM_OC2_SetConfig+0xf0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d113      	bne.n	8005e0e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <TIM_OC2_SetConfig+0xf4>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <TIM_OC2_SetConfig+0xf8>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	46c0      	nop			@ (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b006      	add	sp, #24
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	ffff8fff 	.word	0xffff8fff
 8005e34:	fffffcff 	.word	0xfffffcff
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800
 8005e44:	fffffbff 	.word	0xfffffbff
 8005e48:	fffff7ff 	.word	0xfffff7ff

08005e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	4a31      	ldr	r2, [pc, #196]	@ (8005f28 <TIM_OC3_SetConfig+0xdc>)
 8005e62:	401a      	ands	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2270      	movs	r2, #112	@ 0x70
 8005e78:	4393      	bics	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	4393      	bics	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4a26      	ldr	r2, [pc, #152]	@ (8005f2c <TIM_OC3_SetConfig+0xe0>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	@ (8005f30 <TIM_OC3_SetConfig+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10d      	bne.n	8005ec6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4a21      	ldr	r2, [pc, #132]	@ (8005f34 <TIM_OC3_SetConfig+0xe8>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <TIM_OC3_SetConfig+0xec>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a19      	ldr	r2, [pc, #100]	@ (8005f30 <TIM_OC3_SetConfig+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_OC3_SetConfig+0x92>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f3c <TIM_OC3_SetConfig+0xf0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_OC3_SetConfig+0x92>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a19      	ldr	r2, [pc, #100]	@ (8005f40 <TIM_OC3_SetConfig+0xf4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d113      	bne.n	8005f06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4a18      	ldr	r2, [pc, #96]	@ (8005f44 <TIM_OC3_SetConfig+0xf8>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4a17      	ldr	r2, [pc, #92]	@ (8005f48 <TIM_OC3_SetConfig+0xfc>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	46c0      	nop			@ (mov r8, r8)
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b006      	add	sp, #24
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	fffffeff 	.word	0xfffffeff
 8005f2c:	fffffdff 	.word	0xfffffdff
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	fffff7ff 	.word	0xfffff7ff
 8005f38:	fffffbff 	.word	0xfffffbff
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800
 8005f44:	ffffefff 	.word	0xffffefff
 8005f48:	ffffdfff 	.word	0xffffdfff

08005f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	4a24      	ldr	r2, [pc, #144]	@ (8005ff4 <TIM_OC4_SetConfig+0xa8>)
 8005f62:	401a      	ands	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a20      	ldr	r2, [pc, #128]	@ (8005ff8 <TIM_OC4_SetConfig+0xac>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ffc <TIM_OC4_SetConfig+0xb0>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4a1b      	ldr	r2, [pc, #108]	@ (8006000 <TIM_OC4_SetConfig+0xb4>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <TIM_OC4_SetConfig+0xb8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <TIM_OC4_SetConfig+0x70>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_OC4_SetConfig+0xbc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC4_SetConfig+0x70>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a15      	ldr	r2, [pc, #84]	@ (800600c <TIM_OC4_SetConfig+0xc0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d109      	bne.n	8005fd0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <TIM_OC4_SetConfig+0xc4>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	019b      	lsls	r3, r3, #6
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	ffffefff 	.word	0xffffefff
 8005ff8:	ffff8fff 	.word	0xffff8fff
 8005ffc:	fffffcff 	.word	0xfffffcff
 8006000:	ffffdfff 	.word	0xffffdfff
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	ffffbfff 	.word	0xffffbfff

08006014 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	2201      	movs	r2, #1
 800602e:	4393      	bics	r3, r2
 8006030:	001a      	movs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <TIM_TI1_SetConfig+0xa4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d008      	beq.n	8006056 <TIM_TI1_SetConfig+0x42>
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	05db      	lsls	r3, r3, #23
 800604a:	429a      	cmp	r2, r3
 800604c:	d003      	beq.n	8006056 <TIM_TI1_SetConfig+0x42>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a1a      	ldr	r2, [pc, #104]	@ (80060bc <TIM_TI1_SetConfig+0xa8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <TIM_TI1_SetConfig+0x46>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <TIM_TI1_SetConfig+0x48>
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2203      	movs	r2, #3
 8006064:	4393      	bics	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e003      	b.n	800607a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2201      	movs	r2, #1
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	22f0      	movs	r2, #240	@ 0xf0
 800607e:	4393      	bics	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	22ff      	movs	r2, #255	@ 0xff
 8006088:	4013      	ands	r3, r2
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	220a      	movs	r2, #10
 8006094:	4393      	bics	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	220a      	movs	r2, #10
 800609c:	4013      	ands	r3, r2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	46c0      	nop			@ (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40000400 	.word	0x40000400

080060c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	2201      	movs	r2, #1
 80060d8:	4393      	bics	r3, r2
 80060da:	001a      	movs	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	22f0      	movs	r2, #240	@ 0xf0
 80060ea:	4393      	bics	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	220a      	movs	r2, #10
 80060fc:	4393      	bics	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	46c0      	nop			@ (mov r8, r8)
 8006116:	46bd      	mov	sp, r7
 8006118:	b006      	add	sp, #24
 800611a:	bd80      	pop	{r7, pc}

0800611c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	2210      	movs	r2, #16
 8006136:	4393      	bics	r3, r2
 8006138:	001a      	movs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4a14      	ldr	r2, [pc, #80]	@ (8006198 <TIM_TI2_SetConfig+0x7c>)
 8006148:	4013      	ands	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4a10      	ldr	r2, [pc, #64]	@ (800619c <TIM_TI2_SetConfig+0x80>)
 800615a:	4013      	ands	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	031b      	lsls	r3, r3, #12
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	22a0      	movs	r2, #160	@ 0xa0
 8006170:	4393      	bics	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	22a0      	movs	r2, #160	@ 0xa0
 800617a:	4013      	ands	r3, r2
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	46c0      	nop			@ (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b006      	add	sp, #24
 8006194:	bd80      	pop	{r7, pc}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	fffffcff 	.word	0xfffffcff
 800619c:	ffff0fff 	.word	0xffff0fff

080061a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	2210      	movs	r2, #16
 80061b8:	4393      	bics	r3, r2
 80061ba:	001a      	movs	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006200 <TIM_TI2_ConfigInputStage+0x60>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	031b      	lsls	r3, r3, #12
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	22a0      	movs	r2, #160	@ 0xa0
 80061dc:	4393      	bics	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	46c0      	nop			@ (mov r8, r8)
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b006      	add	sp, #24
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	46c0      	nop			@ (mov r8, r8)
 8006200:	ffff0fff 	.word	0xffff0fff

08006204 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	4a17      	ldr	r2, [pc, #92]	@ (800627c <TIM_TI3_SetConfig+0x78>)
 800621e:	401a      	ands	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2203      	movs	r2, #3
 800622e:	4393      	bics	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	22f0      	movs	r2, #240	@ 0xf0
 800623e:	4393      	bics	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	22ff      	movs	r2, #255	@ 0xff
 8006248:	4013      	ands	r3, r2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4a0b      	ldr	r2, [pc, #44]	@ (8006280 <TIM_TI3_SetConfig+0x7c>)
 8006254:	4013      	ands	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	021a      	lsls	r2, r3, #8
 800625c:	23a0      	movs	r3, #160	@ 0xa0
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	4013      	ands	r3, r2
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	46c0      	nop			@ (mov r8, r8)
 8006276:	46bd      	mov	sp, r7
 8006278:	b006      	add	sp, #24
 800627a:	bd80      	pop	{r7, pc}
 800627c:	fffffeff 	.word	0xfffffeff
 8006280:	fffff5ff 	.word	0xfffff5ff

08006284 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <TIM_TI4_SetConfig+0x7c>)
 800629e:	401a      	ands	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4a15      	ldr	r2, [pc, #84]	@ (8006304 <TIM_TI4_SetConfig+0x80>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <TIM_TI4_SetConfig+0x84>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	031b      	lsls	r3, r3, #12
 80062c8:	041b      	lsls	r3, r3, #16
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4a0d      	ldr	r2, [pc, #52]	@ (800630c <TIM_TI4_SetConfig+0x88>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	031a      	lsls	r2, r3, #12
 80062de:	23a0      	movs	r3, #160	@ 0xa0
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	4013      	ands	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b006      	add	sp, #24
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	ffffefff 	.word	0xffffefff
 8006304:	fffffcff 	.word	0xfffffcff
 8006308:	ffff0fff 	.word	0xffff0fff
 800630c:	ffff5fff 	.word	0xffff5fff

08006310 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2270      	movs	r2, #112	@ 0x70
 8006324:	4393      	bics	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	2207      	movs	r2, #7
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	609a      	str	r2, [r3, #8]
}
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	46bd      	mov	sp, r7
 800633e:	b004      	add	sp, #16
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4a09      	ldr	r2, [pc, #36]	@ (8006380 <TIM_ETR_SetConfig+0x3c>)
 800635c:	4013      	ands	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	021a      	lsls	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	431a      	orrs	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	46c0      	nop			@ (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b006      	add	sp, #24
 800637e:	bd80      	pop	{r7, pc}
 8006380:	ffff00ff 	.word	0xffff00ff

08006384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	221f      	movs	r2, #31
 8006394:	4013      	ands	r3, r2
 8006396:	2201      	movs	r2, #1
 8006398:	409a      	lsls	r2, r3
 800639a:	0013      	movs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	43d2      	mvns	r2, r2
 80063a6:	401a      	ands	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	211f      	movs	r1, #31
 80063b4:	400b      	ands	r3, r1
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4099      	lsls	r1, r3
 80063ba:	000b      	movs	r3, r1
 80063bc:	431a      	orrs	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b006      	add	sp, #24
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	223c      	movs	r2, #60	@ 0x3c
 80063da:	5c9b      	ldrb	r3, [r3, r2]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e042      	b.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	223c      	movs	r2, #60	@ 0x3c
 80063e8:	2101      	movs	r1, #1
 80063ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	223d      	movs	r2, #61	@ 0x3d
 80063f0:	2102      	movs	r1, #2
 80063f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2270      	movs	r2, #112	@ 0x70
 8006408:	4393      	bics	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a14      	ldr	r2, [pc, #80]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00a      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	05db      	lsls	r3, r3, #23
 8006430:	429a      	cmp	r2, r3
 8006432:	d004      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0f      	ldr	r2, [pc, #60]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d10c      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2280      	movs	r2, #128	@ 0x80
 8006442:	4393      	bics	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4313      	orrs	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	223d      	movs	r2, #61	@ 0x3d
 800645c:	2101      	movs	r1, #1
 800645e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	223c      	movs	r2, #60	@ 0x3c
 8006464:	2100      	movs	r1, #0
 8006466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b004      	add	sp, #16
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40000400 	.word	0x40000400

0800647c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	223c      	movs	r2, #60	@ 0x3c
 800648e:	5c9b      	ldrb	r3, [r3, r2]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006494:	2302      	movs	r3, #2
 8006496:	e03e      	b.n	8006516 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	223c      	movs	r2, #60	@ 0x3c
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	22ff      	movs	r2, #255	@ 0xff
 80064a4:	4393      	bics	r3, r2
 80064a6:	001a      	movs	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006520 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80064b4:	401a      	ands	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a18      	ldr	r2, [pc, #96]	@ (8006524 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80064c2:	401a      	ands	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4a16      	ldr	r2, [pc, #88]	@ (8006528 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80064d0:	401a      	ands	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a13      	ldr	r2, [pc, #76]	@ (800652c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80064de:	401a      	ands	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4a11      	ldr	r2, [pc, #68]	@ (8006530 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80064ec:	401a      	ands	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006534 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80064fa:	401a      	ands	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	223c      	movs	r2, #60	@ 0x3c
 8006510:	2100      	movs	r1, #0
 8006512:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	0018      	movs	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	b004      	add	sp, #16
 800651c:	bd80      	pop	{r7, pc}
 800651e:	46c0      	nop			@ (mov r8, r8)
 8006520:	fffffcff 	.word	0xfffffcff
 8006524:	fffffbff 	.word	0xfffffbff
 8006528:	fffff7ff 	.word	0xfffff7ff
 800652c:	ffffefff 	.word	0xffffefff
 8006530:	ffffdfff 	.word	0xffffdfff
 8006534:	ffffbfff 	.word	0xffffbfff

08006538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006540:	46c0      	nop			@ (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b002      	add	sp, #8
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006550:	46c0      	nop			@ (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e044      	b.n	80065f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2278      	movs	r2, #120	@ 0x78
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f7fc fab3 	bl	8002ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	@ 0x24
 8006586:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2101      	movs	r1, #1
 8006594:	438a      	bics	r2, r1
 8006596:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	0018      	movs	r0, r3
 80065a4:	f000 fd48 	bl	8007038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 fc1c 	bl	8006de8 <UART_SetConfig>
 80065b0:	0003      	movs	r3, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01c      	b.n	80065f4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	490d      	ldr	r1, [pc, #52]	@ (80065fc <HAL_UART_Init+0xa4>)
 80065c6:	400a      	ands	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	212a      	movs	r1, #42	@ 0x2a
 80065d6:	438a      	bics	r2, r1
 80065d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2101      	movs	r1, #1
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 fdd7 	bl	80071a0 <UART_CheckIdleState>
 80065f2:	0003      	movs	r3, r0
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	ffffb7ff 	.word	0xffffb7ff

08006600 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006612:	2b20      	cmp	r3, #32
 8006614:	d000      	beq.n	8006618 <HAL_UART_Transmit_DMA+0x18>
 8006616:	e077      	b.n	8006708 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_Transmit_DMA+0x26>
 800661e:	1dbb      	adds	r3, r7, #6
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e06f      	b.n	800670a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	2380      	movs	r3, #128	@ 0x80
 8006630:	015b      	lsls	r3, r3, #5
 8006632:	429a      	cmp	r2, r3
 8006634:	d109      	bne.n	800664a <HAL_UART_Transmit_DMA+0x4a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2201      	movs	r2, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d001      	beq.n	800664a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e05f      	b.n	800670a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	1dba      	adds	r2, r7, #6
 8006654:	2150      	movs	r1, #80	@ 0x50
 8006656:	8812      	ldrh	r2, [r2, #0]
 8006658:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1dba      	adds	r2, r7, #6
 800665e:	2152      	movs	r1, #82	@ 0x52
 8006660:	8812      	ldrh	r2, [r2, #0]
 8006662:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2284      	movs	r2, #132	@ 0x84
 8006668:	2100      	movs	r1, #0
 800666a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2221      	movs	r2, #33	@ 0x21
 8006670:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006676:	2b00      	cmp	r3, #0
 8006678:	d027      	beq.n	80066ca <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667e:	4a25      	ldr	r2, [pc, #148]	@ (8006714 <HAL_UART_Transmit_DMA+0x114>)
 8006680:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	4a24      	ldr	r2, [pc, #144]	@ (8006718 <HAL_UART_Transmit_DMA+0x118>)
 8006688:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668e:	4a23      	ldr	r2, [pc, #140]	@ (800671c <HAL_UART_Transmit_DMA+0x11c>)
 8006690:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006696:	2200      	movs	r2, #0
 8006698:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a2:	0019      	movs	r1, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3328      	adds	r3, #40	@ 0x28
 80066aa:	001a      	movs	r2, r3
 80066ac:	1dbb      	adds	r3, r7, #6
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	f7fd fa46 	bl	8003b40 <HAL_DMA_Start_IT>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d008      	beq.n	80066ca <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2284      	movs	r2, #132	@ 0x84
 80066bc:	2110      	movs	r1, #16
 80066be:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e01f      	b.n	800670a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2240      	movs	r2, #64	@ 0x40
 80066d0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d2:	f3ef 8310 	mrs	r3, PRIMASK
 80066d6:	613b      	str	r3, [r7, #16]
  return(result);
 80066d8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	2301      	movs	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f383 8810 	msr	PRIMASK, r3
}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2180      	movs	r1, #128	@ 0x80
 80066f4:	430a      	orrs	r2, r1
 80066f6:	609a      	str	r2, [r3, #8]
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f383 8810 	msr	PRIMASK, r3
}
 8006702:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b008      	add	sp, #32
 8006710:	bd80      	pop	{r7, pc}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	08007621 	.word	0x08007621
 8006718:	080076b5 	.word	0x080076b5
 800671c:	08007843 	.word	0x08007843

08006720 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	1dbb      	adds	r3, r7, #6
 800672c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2280      	movs	r2, #128	@ 0x80
 8006732:	589b      	ldr	r3, [r3, r2]
 8006734:	2b20      	cmp	r3, #32
 8006736:	d145      	bne.n	80067c4 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_UART_Receive_DMA+0x26>
 800673e:	1dbb      	adds	r3, r7, #6
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e03d      	b.n	80067c6 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	2380      	movs	r3, #128	@ 0x80
 8006750:	015b      	lsls	r3, r3, #5
 8006752:	429a      	cmp	r2, r3
 8006754:	d109      	bne.n	800676a <HAL_UART_Receive_DMA+0x4a>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d105      	bne.n	800676a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2201      	movs	r2, #1
 8006762:	4013      	ands	r3, r2
 8006764:	d001      	beq.n	800676a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e02d      	b.n	80067c6 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	4013      	ands	r3, r2
 800677c:	d019      	beq.n	80067b2 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	613b      	str	r3, [r7, #16]
  return(result);
 8006784:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f383 8810 	msr	PRIMASK, r3
}
 8006792:	46c0      	nop			@ (mov r8, r8)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2180      	movs	r1, #128	@ 0x80
 80067a0:	04c9      	lsls	r1, r1, #19
 80067a2:	430a      	orrs	r2, r1
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f383 8810 	msr	PRIMASK, r3
}
 80067b0:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067b2:	1dbb      	adds	r3, r7, #6
 80067b4:	881a      	ldrh	r2, [r3, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	0018      	movs	r0, r3
 80067bc:	f000 fe08 	bl	80073d0 <UART_Start_Receive_DMA>
 80067c0:	0003      	movs	r3, r0
 80067c2:	e000      	b.n	80067c6 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b008      	add	sp, #32
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d0:	b590      	push	{r4, r7, lr}
 80067d2:	b0ab      	sub	sp, #172	@ 0xac
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	22a4      	movs	r2, #164	@ 0xa4
 80067e0:	18b9      	adds	r1, r7, r2
 80067e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	20a0      	movs	r0, #160	@ 0xa0
 80067ec:	1839      	adds	r1, r7, r0
 80067ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	219c      	movs	r1, #156	@ 0x9c
 80067f8:	1879      	adds	r1, r7, r1
 80067fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067fc:	0011      	movs	r1, r2
 80067fe:	18bb      	adds	r3, r7, r2
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a99      	ldr	r2, [pc, #612]	@ (8006a68 <HAL_UART_IRQHandler+0x298>)
 8006804:	4013      	ands	r3, r2
 8006806:	2298      	movs	r2, #152	@ 0x98
 8006808:	18bc      	adds	r4, r7, r2
 800680a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800680c:	18bb      	adds	r3, r7, r2
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d114      	bne.n	800683e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006814:	187b      	adds	r3, r7, r1
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2220      	movs	r2, #32
 800681a:	4013      	ands	r3, r2
 800681c:	d00f      	beq.n	800683e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800681e:	183b      	adds	r3, r7, r0
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2220      	movs	r2, #32
 8006824:	4013      	ands	r3, r2
 8006826:	d00a      	beq.n	800683e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800682c:	2b00      	cmp	r3, #0
 800682e:	d100      	bne.n	8006832 <HAL_UART_IRQHandler+0x62>
 8006830:	e29e      	b.n	8006d70 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	0010      	movs	r0, r2
 800683a:	4798      	blx	r3
      }
      return;
 800683c:	e298      	b.n	8006d70 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800683e:	2398      	movs	r3, #152	@ 0x98
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d100      	bne.n	800684a <HAL_UART_IRQHandler+0x7a>
 8006848:	e114      	b.n	8006a74 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800684a:	239c      	movs	r3, #156	@ 0x9c
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2201      	movs	r2, #1
 8006852:	4013      	ands	r3, r2
 8006854:	d106      	bne.n	8006864 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006856:	23a0      	movs	r3, #160	@ 0xa0
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a83      	ldr	r2, [pc, #524]	@ (8006a6c <HAL_UART_IRQHandler+0x29c>)
 800685e:	4013      	ands	r3, r2
 8006860:	d100      	bne.n	8006864 <HAL_UART_IRQHandler+0x94>
 8006862:	e107      	b.n	8006a74 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006864:	23a4      	movs	r3, #164	@ 0xa4
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2201      	movs	r2, #1
 800686c:	4013      	ands	r3, r2
 800686e:	d012      	beq.n	8006896 <HAL_UART_IRQHandler+0xc6>
 8006870:	23a0      	movs	r3, #160	@ 0xa0
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	2380      	movs	r3, #128	@ 0x80
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4013      	ands	r3, r2
 800687c:	d00b      	beq.n	8006896 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2201      	movs	r2, #1
 8006884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2284      	movs	r2, #132	@ 0x84
 800688a:	589b      	ldr	r3, [r3, r2]
 800688c:	2201      	movs	r2, #1
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2184      	movs	r1, #132	@ 0x84
 8006894:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006896:	23a4      	movs	r3, #164	@ 0xa4
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2202      	movs	r2, #2
 800689e:	4013      	ands	r3, r2
 80068a0:	d011      	beq.n	80068c6 <HAL_UART_IRQHandler+0xf6>
 80068a2:	239c      	movs	r3, #156	@ 0x9c
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2201      	movs	r2, #1
 80068aa:	4013      	ands	r3, r2
 80068ac:	d00b      	beq.n	80068c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2202      	movs	r2, #2
 80068b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2284      	movs	r2, #132	@ 0x84
 80068ba:	589b      	ldr	r3, [r3, r2]
 80068bc:	2204      	movs	r2, #4
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2184      	movs	r1, #132	@ 0x84
 80068c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c6:	23a4      	movs	r3, #164	@ 0xa4
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2204      	movs	r2, #4
 80068ce:	4013      	ands	r3, r2
 80068d0:	d011      	beq.n	80068f6 <HAL_UART_IRQHandler+0x126>
 80068d2:	239c      	movs	r3, #156	@ 0x9c
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2201      	movs	r2, #1
 80068da:	4013      	ands	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2204      	movs	r2, #4
 80068e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2284      	movs	r2, #132	@ 0x84
 80068ea:	589b      	ldr	r3, [r3, r2]
 80068ec:	2202      	movs	r2, #2
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2184      	movs	r1, #132	@ 0x84
 80068f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068f6:	23a4      	movs	r3, #164	@ 0xa4
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2208      	movs	r2, #8
 80068fe:	4013      	ands	r3, r2
 8006900:	d017      	beq.n	8006932 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006902:	23a0      	movs	r3, #160	@ 0xa0
 8006904:	18fb      	adds	r3, r7, r3
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2220      	movs	r2, #32
 800690a:	4013      	ands	r3, r2
 800690c:	d105      	bne.n	800691a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800690e:	239c      	movs	r3, #156	@ 0x9c
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2208      	movs	r2, #8
 8006920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2284      	movs	r2, #132	@ 0x84
 8006926:	589b      	ldr	r3, [r3, r2]
 8006928:	2208      	movs	r2, #8
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2184      	movs	r1, #132	@ 0x84
 8006930:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006932:	23a4      	movs	r3, #164	@ 0xa4
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	2380      	movs	r3, #128	@ 0x80
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	4013      	ands	r3, r2
 800693e:	d013      	beq.n	8006968 <HAL_UART_IRQHandler+0x198>
 8006940:	23a0      	movs	r3, #160	@ 0xa0
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	2380      	movs	r3, #128	@ 0x80
 8006948:	04db      	lsls	r3, r3, #19
 800694a:	4013      	ands	r3, r2
 800694c:	d00c      	beq.n	8006968 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2280      	movs	r2, #128	@ 0x80
 8006954:	0112      	lsls	r2, r2, #4
 8006956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2284      	movs	r2, #132	@ 0x84
 800695c:	589b      	ldr	r3, [r3, r2]
 800695e:	2220      	movs	r2, #32
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2184      	movs	r1, #132	@ 0x84
 8006966:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2284      	movs	r2, #132	@ 0x84
 800696c:	589b      	ldr	r3, [r3, r2]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d100      	bne.n	8006974 <HAL_UART_IRQHandler+0x1a4>
 8006972:	e1ff      	b.n	8006d74 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006974:	23a4      	movs	r3, #164	@ 0xa4
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2220      	movs	r2, #32
 800697c:	4013      	ands	r3, r2
 800697e:	d00e      	beq.n	800699e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006980:	23a0      	movs	r3, #160	@ 0xa0
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2220      	movs	r2, #32
 8006988:	4013      	ands	r3, r2
 800698a:	d008      	beq.n	800699e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	0010      	movs	r0, r2
 800699c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2284      	movs	r2, #132	@ 0x84
 80069a2:	589b      	ldr	r3, [r3, r2]
 80069a4:	2194      	movs	r1, #148	@ 0x94
 80069a6:	187a      	adds	r2, r7, r1
 80069a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2240      	movs	r2, #64	@ 0x40
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b40      	cmp	r3, #64	@ 0x40
 80069b6:	d004      	beq.n	80069c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2228      	movs	r2, #40	@ 0x28
 80069be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069c0:	d047      	beq.n	8006a52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f000 fdc7 	bl	8007558 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2240      	movs	r2, #64	@ 0x40
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b40      	cmp	r3, #64	@ 0x40
 80069d6:	d137      	bne.n	8006a48 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d8:	f3ef 8310 	mrs	r3, PRIMASK
 80069dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80069de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e0:	2090      	movs	r0, #144	@ 0x90
 80069e2:	183a      	adds	r2, r7, r0
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	2301      	movs	r3, #1
 80069e8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ec:	f383 8810 	msr	PRIMASK, r3
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2140      	movs	r1, #64	@ 0x40
 80069fe:	438a      	bics	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	183b      	adds	r3, r7, r0
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a0a:	f383 8810 	msr	PRIMASK, r3
}
 8006a0e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1c:	4a14      	ldr	r2, [pc, #80]	@ (8006a70 <HAL_UART_IRQHandler+0x2a0>)
 8006a1e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fd f929 	bl	8003c7c <HAL_DMA_Abort_IT>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d01a      	beq.n	8006a64 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a38:	0018      	movs	r0, r3
 8006a3a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e012      	b.n	8006a64 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f000 f9bd 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a46:	e00d      	b.n	8006a64 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 f9b8 	bl	8006dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e008      	b.n	8006a64 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 f9b3 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2284      	movs	r2, #132	@ 0x84
 8006a5e:	2100      	movs	r1, #0
 8006a60:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006a62:	e187      	b.n	8006d74 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	46c0      	nop			@ (mov r8, r8)
    return;
 8006a66:	e185      	b.n	8006d74 <HAL_UART_IRQHandler+0x5a4>
 8006a68:	0000080f 	.word	0x0000080f
 8006a6c:	04000120 	.word	0x04000120
 8006a70:	080078c7 	.word	0x080078c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d000      	beq.n	8006a7e <HAL_UART_IRQHandler+0x2ae>
 8006a7c:	e139      	b.n	8006cf2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a7e:	23a4      	movs	r3, #164	@ 0xa4
 8006a80:	18fb      	adds	r3, r7, r3
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2210      	movs	r2, #16
 8006a86:	4013      	ands	r3, r2
 8006a88:	d100      	bne.n	8006a8c <HAL_UART_IRQHandler+0x2bc>
 8006a8a:	e132      	b.n	8006cf2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a8c:	23a0      	movs	r3, #160	@ 0xa0
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2210      	movs	r2, #16
 8006a94:	4013      	ands	r3, r2
 8006a96:	d100      	bne.n	8006a9a <HAL_UART_IRQHandler+0x2ca>
 8006a98:	e12b      	b.n	8006cf2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2240      	movs	r2, #64	@ 0x40
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b40      	cmp	r3, #64	@ 0x40
 8006aae:	d000      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x2e2>
 8006ab0:	e09f      	b.n	8006bf2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	217e      	movs	r1, #126	@ 0x7e
 8006abc:	187b      	adds	r3, r7, r1
 8006abe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006ac0:	187b      	adds	r3, r7, r1
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d100      	bne.n	8006aca <HAL_UART_IRQHandler+0x2fa>
 8006ac8:	e156      	b.n	8006d78 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2258      	movs	r2, #88	@ 0x58
 8006ace:	5a9b      	ldrh	r3, [r3, r2]
 8006ad0:	187a      	adds	r2, r7, r1
 8006ad2:	8812      	ldrh	r2, [r2, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d300      	bcc.n	8006ada <HAL_UART_IRQHandler+0x30a>
 8006ad8:	e14e      	b.n	8006d78 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	187a      	adds	r2, r7, r1
 8006ade:	215a      	movs	r1, #90	@ 0x5a
 8006ae0:	8812      	ldrh	r2, [r2, #0]
 8006ae2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d06f      	beq.n	8006bce <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aee:	f3ef 8310 	mrs	r3, PRIMASK
 8006af2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006af8:	2301      	movs	r3, #1
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afe:	f383 8810 	msr	PRIMASK, r3
}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	499e      	ldr	r1, [pc, #632]	@ (8006d88 <HAL_UART_IRQHandler+0x5b8>)
 8006b10:	400a      	ands	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	f383 8810 	msr	PRIMASK, r3
}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b20:	f3ef 8310 	mrs	r3, PRIMASK
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b28:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b30:	f383 8810 	msr	PRIMASK, r3
}
 8006b34:	46c0      	nop			@ (mov r8, r8)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2101      	movs	r1, #1
 8006b42:	438a      	bics	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]
 8006b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b48:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b4c:	f383 8810 	msr	PRIMASK, r3
}
 8006b50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b52:	f3ef 8310 	mrs	r3, PRIMASK
 8006b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b62:	f383 8810 	msr	PRIMASK, r3
}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2140      	movs	r1, #64	@ 0x40
 8006b74:	438a      	bics	r2, r1
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b7a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b7e:	f383 8810 	msr	PRIMASK, r3
}
 8006b82:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2280      	movs	r2, #128	@ 0x80
 8006b88:	2120      	movs	r1, #32
 8006b8a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b92:	f3ef 8310 	mrs	r3, PRIMASK
 8006b96:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ba2:	f383 8810 	msr	PRIMASK, r3
}
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2110      	movs	r1, #16
 8006bb4:	438a      	bics	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bbe:	f383 8810 	msr	PRIMASK, r3
}
 8006bc2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7fd f81f 	bl	8003c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2258      	movs	r2, #88	@ 0x58
 8006bd8:	5a9a      	ldrh	r2, [r3, r2]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	215a      	movs	r1, #90	@ 0x5a
 8006bde:	5a5b      	ldrh	r3, [r3, r1]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	0011      	movs	r1, r2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f000 f8f0 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bf0:	e0c2      	b.n	8006d78 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2258      	movs	r2, #88	@ 0x58
 8006bf6:	5a99      	ldrh	r1, [r3, r2]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	225a      	movs	r2, #90	@ 0x5a
 8006bfc:	5a9b      	ldrh	r3, [r3, r2]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	208e      	movs	r0, #142	@ 0x8e
 8006c02:	183b      	adds	r3, r7, r0
 8006c04:	1a8a      	subs	r2, r1, r2
 8006c06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	225a      	movs	r2, #90	@ 0x5a
 8006c0c:	5a9b      	ldrh	r3, [r3, r2]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d100      	bne.n	8006c16 <HAL_UART_IRQHandler+0x446>
 8006c14:	e0b2      	b.n	8006d7c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8006c16:	183b      	adds	r3, r7, r0
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d100      	bne.n	8006c20 <HAL_UART_IRQHandler+0x450>
 8006c1e:	e0ad      	b.n	8006d7c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c20:	f3ef 8310 	mrs	r3, PRIMASK
 8006c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c28:	2488      	movs	r4, #136	@ 0x88
 8006c2a:	193a      	adds	r2, r7, r4
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	2301      	movs	r3, #1
 8006c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f383 8810 	msr	PRIMASK, r3
}
 8006c38:	46c0      	nop			@ (mov r8, r8)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4951      	ldr	r1, [pc, #324]	@ (8006d8c <HAL_UART_IRQHandler+0x5bc>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	193b      	adds	r3, r7, r4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c58:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c60:	2484      	movs	r4, #132	@ 0x84
 8006c62:	193a      	adds	r2, r7, r4
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	2301      	movs	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	f383 8810 	msr	PRIMASK, r3
}
 8006c70:	46c0      	nop			@ (mov r8, r8)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	438a      	bics	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	193b      	adds	r3, r7, r4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	f383 8810 	msr	PRIMASK, r3
}
 8006c8e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2280      	movs	r2, #128	@ 0x80
 8006c94:	2120      	movs	r1, #32
 8006c96:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	2480      	movs	r4, #128	@ 0x80
 8006cae:	193a      	adds	r2, r7, r4
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	f383 8810 	msr	PRIMASK, r3
}
 8006cbc:	46c0      	nop			@ (mov r8, r8)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2110      	movs	r1, #16
 8006cca:	438a      	bics	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	193b      	adds	r3, r7, r4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	f383 8810 	msr	PRIMASK, r3
}
 8006cda:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce2:	183b      	adds	r3, r7, r0
 8006ce4:	881a      	ldrh	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 f870 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cf0:	e044      	b.n	8006d7c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cf2:	23a4      	movs	r3, #164	@ 0xa4
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	2380      	movs	r3, #128	@ 0x80
 8006cfa:	035b      	lsls	r3, r3, #13
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d010      	beq.n	8006d22 <HAL_UART_IRQHandler+0x552>
 8006d00:	239c      	movs	r3, #156	@ 0x9c
 8006d02:	18fb      	adds	r3, r7, r3
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	2380      	movs	r3, #128	@ 0x80
 8006d08:	03db      	lsls	r3, r3, #15
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2280      	movs	r2, #128	@ 0x80
 8006d14:	0352      	lsls	r2, r2, #13
 8006d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f000 fe15 	bl	800794a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d20:	e02f      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d22:	23a4      	movs	r3, #164	@ 0xa4
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2280      	movs	r2, #128	@ 0x80
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d00f      	beq.n	8006d4e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d2e:	23a0      	movs	r3, #160	@ 0xa0
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2280      	movs	r2, #128	@ 0x80
 8006d36:	4013      	ands	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01e      	beq.n	8006d80 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	0010      	movs	r0, r2
 8006d4a:	4798      	blx	r3
    }
    return;
 8006d4c:	e018      	b.n	8006d80 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d4e:	23a4      	movs	r3, #164	@ 0xa4
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2240      	movs	r2, #64	@ 0x40
 8006d56:	4013      	ands	r3, r2
 8006d58:	d013      	beq.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
 8006d5a:	23a0      	movs	r3, #160	@ 0xa0
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2240      	movs	r2, #64	@ 0x40
 8006d62:	4013      	ands	r3, r2
 8006d64:	d00d      	beq.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 fdc3 	bl	80078f4 <UART_EndTransmit_IT>
    return;
 8006d6e:	e008      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006d70:	46c0      	nop			@ (mov r8, r8)
 8006d72:	e006      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
    return;
 8006d74:	46c0      	nop			@ (mov r8, r8)
 8006d76:	e004      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006d78:	46c0      	nop			@ (mov r8, r8)
 8006d7a:	e002      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
      return;
 8006d7c:	46c0      	nop			@ (mov r8, r8)
 8006d7e:	e000      	b.n	8006d82 <HAL_UART_IRQHandler+0x5b2>
    return;
 8006d80:	46c0      	nop			@ (mov r8, r8)
  }

}
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b02b      	add	sp, #172	@ 0xac
 8006d86:	bd90      	pop	{r4, r7, pc}
 8006d88:	fffffeff 	.word	0xfffffeff
 8006d8c:	fffffedf 	.word	0xfffffedf

08006d90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d98:	46c0      	nop			@ (mov r8, r8)
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b002      	add	sp, #8
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006da8:	46c0      	nop			@ (mov r8, r8)
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b002      	add	sp, #8
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006db8:	46c0      	nop			@ (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dc8:	46c0      	nop			@ (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	000a      	movs	r2, r1
 8006dda:	1cbb      	adds	r3, r7, #2
 8006ddc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b002      	add	sp, #8
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df0:	231e      	movs	r3, #30
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a83      	ldr	r2, [pc, #524]	@ (8007024 <UART_SetConfig+0x23c>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a7e      	ldr	r2, [pc, #504]	@ (8007028 <UART_SetConfig+0x240>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	0019      	movs	r1, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	4a75      	ldr	r2, [pc, #468]	@ (800702c <UART_SetConfig+0x244>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	0019      	movs	r1, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e64:	4b72      	ldr	r3, [pc, #456]	@ (8007030 <UART_SetConfig+0x248>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	2203      	movs	r2, #3
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d00d      	beq.n	8006e8c <UART_SetConfig+0xa4>
 8006e70:	d81b      	bhi.n	8006eaa <UART_SetConfig+0xc2>
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d014      	beq.n	8006ea0 <UART_SetConfig+0xb8>
 8006e76:	d818      	bhi.n	8006eaa <UART_SetConfig+0xc2>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <UART_SetConfig+0x9a>
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d00a      	beq.n	8006e96 <UART_SetConfig+0xae>
 8006e80:	e013      	b.n	8006eaa <UART_SetConfig+0xc2>
 8006e82:	231f      	movs	r3, #31
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	e012      	b.n	8006eb2 <UART_SetConfig+0xca>
 8006e8c:	231f      	movs	r3, #31
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	2202      	movs	r2, #2
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e00d      	b.n	8006eb2 <UART_SetConfig+0xca>
 8006e96:	231f      	movs	r3, #31
 8006e98:	18fb      	adds	r3, r7, r3
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e008      	b.n	8006eb2 <UART_SetConfig+0xca>
 8006ea0:	231f      	movs	r3, #31
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e003      	b.n	8006eb2 <UART_SetConfig+0xca>
 8006eaa:	231f      	movs	r3, #31
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	2210      	movs	r2, #16
 8006eb0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69da      	ldr	r2, [r3, #28]
 8006eb6:	2380      	movs	r3, #128	@ 0x80
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d15c      	bne.n	8006f78 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8006ebe:	231f      	movs	r3, #31
 8006ec0:	18fb      	adds	r3, r7, r3
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d015      	beq.n	8006ef4 <UART_SetConfig+0x10c>
 8006ec8:	dc18      	bgt.n	8006efc <UART_SetConfig+0x114>
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d00d      	beq.n	8006eea <UART_SetConfig+0x102>
 8006ece:	dc15      	bgt.n	8006efc <UART_SetConfig+0x114>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <UART_SetConfig+0xf2>
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d005      	beq.n	8006ee4 <UART_SetConfig+0xfc>
 8006ed8:	e010      	b.n	8006efc <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eda:	f7fd ff27 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
 8006ede:	0003      	movs	r3, r0
 8006ee0:	61bb      	str	r3, [r7, #24]
        break;
 8006ee2:	e012      	b.n	8006f0a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ee4:	4b53      	ldr	r3, [pc, #332]	@ (8007034 <UART_SetConfig+0x24c>)
 8006ee6:	61bb      	str	r3, [r7, #24]
        break;
 8006ee8:	e00f      	b.n	8006f0a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eea:	f7fd febf 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8006eee:	0003      	movs	r3, r0
 8006ef0:	61bb      	str	r3, [r7, #24]
        break;
 8006ef2:	e00a      	b.n	8006f0a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef4:	2380      	movs	r3, #128	@ 0x80
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	61bb      	str	r3, [r7, #24]
        break;
 8006efa:	e006      	b.n	8006f0a <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f00:	231e      	movs	r3, #30
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	2201      	movs	r2, #1
 8006f06:	701a      	strb	r2, [r3, #0]
        break;
 8006f08:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d100      	bne.n	8006f12 <UART_SetConfig+0x12a>
 8006f10:	e07a      	b.n	8007008 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	005a      	lsls	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	18d2      	adds	r2, r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	0019      	movs	r1, r3
 8006f24:	0010      	movs	r0, r2
 8006f26:	f7f9 f8ef 	bl	8000108 <__udivsi3>
 8006f2a:	0003      	movs	r3, r0
 8006f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d91c      	bls.n	8006f6e <UART_SetConfig+0x186>
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	2380      	movs	r3, #128	@ 0x80
 8006f38:	025b      	lsls	r3, r3, #9
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d217      	bcs.n	8006f6e <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	200e      	movs	r0, #14
 8006f44:	183b      	adds	r3, r7, r0
 8006f46:	210f      	movs	r1, #15
 8006f48:	438a      	bics	r2, r1
 8006f4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2207      	movs	r2, #7
 8006f54:	4013      	ands	r3, r2
 8006f56:	b299      	uxth	r1, r3
 8006f58:	183b      	adds	r3, r7, r0
 8006f5a:	183a      	adds	r2, r7, r0
 8006f5c:	8812      	ldrh	r2, [r2, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	183a      	adds	r2, r7, r0
 8006f68:	8812      	ldrh	r2, [r2, #0]
 8006f6a:	60da      	str	r2, [r3, #12]
 8006f6c:	e04c      	b.n	8007008 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8006f6e:	231e      	movs	r3, #30
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	e047      	b.n	8007008 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f78:	231f      	movs	r3, #31
 8006f7a:	18fb      	adds	r3, r7, r3
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d015      	beq.n	8006fae <UART_SetConfig+0x1c6>
 8006f82:	dc18      	bgt.n	8006fb6 <UART_SetConfig+0x1ce>
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d00d      	beq.n	8006fa4 <UART_SetConfig+0x1bc>
 8006f88:	dc15      	bgt.n	8006fb6 <UART_SetConfig+0x1ce>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <UART_SetConfig+0x1ac>
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d005      	beq.n	8006f9e <UART_SetConfig+0x1b6>
 8006f92:	e010      	b.n	8006fb6 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fd feca 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	61bb      	str	r3, [r7, #24]
        break;
 8006f9c:	e012      	b.n	8006fc4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f9e:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <UART_SetConfig+0x24c>)
 8006fa0:	61bb      	str	r3, [r7, #24]
        break;
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa4:	f7fd fe62 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	61bb      	str	r3, [r7, #24]
        break;
 8006fac:	e00a      	b.n	8006fc4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fae:	2380      	movs	r3, #128	@ 0x80
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	61bb      	str	r3, [r7, #24]
        break;
 8006fb4:	e006      	b.n	8006fc4 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fba:	231e      	movs	r3, #30
 8006fbc:	18fb      	adds	r3, r7, r3
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
        break;
 8006fc2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d01e      	beq.n	8007008 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	085a      	lsrs	r2, r3, #1
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	18d2      	adds	r2, r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	0019      	movs	r1, r3
 8006fda:	0010      	movs	r0, r2
 8006fdc:	f7f9 f894 	bl	8000108 <__udivsi3>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b0f      	cmp	r3, #15
 8006fe8:	d90a      	bls.n	8007000 <UART_SetConfig+0x218>
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	2380      	movs	r3, #128	@ 0x80
 8006fee:	025b      	lsls	r3, r3, #9
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d205      	bcs.n	8007000 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	e003      	b.n	8007008 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8007000:	231e      	movs	r3, #30
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	2201      	movs	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007014:	231e      	movs	r3, #30
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	781b      	ldrb	r3, [r3, #0]
}
 800701a:	0018      	movs	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	b008      	add	sp, #32
 8007020:	bd80      	pop	{r7, pc}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	ffff69f3 	.word	0xffff69f3
 8007028:	ffffcfff 	.word	0xffffcfff
 800702c:	fffff4ff 	.word	0xfffff4ff
 8007030:	40021000 	.word	0x40021000
 8007034:	007a1200 	.word	0x007a1200

08007038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	2208      	movs	r2, #8
 8007046:	4013      	ands	r3, r2
 8007048:	d00b      	beq.n	8007062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a4a      	ldr	r2, [pc, #296]	@ (800717c <UART_AdvFeatureConfig+0x144>)
 8007052:	4013      	ands	r3, r2
 8007054:	0019      	movs	r1, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	2201      	movs	r2, #1
 8007068:	4013      	ands	r3, r2
 800706a:	d00b      	beq.n	8007084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4a43      	ldr	r2, [pc, #268]	@ (8007180 <UART_AdvFeatureConfig+0x148>)
 8007074:	4013      	ands	r3, r2
 8007076:	0019      	movs	r1, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	2202      	movs	r2, #2
 800708a:	4013      	ands	r3, r2
 800708c:	d00b      	beq.n	80070a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4a3b      	ldr	r2, [pc, #236]	@ (8007184 <UART_AdvFeatureConfig+0x14c>)
 8007096:	4013      	ands	r3, r2
 8007098:	0019      	movs	r1, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070aa:	2204      	movs	r2, #4
 80070ac:	4013      	ands	r3, r2
 80070ae:	d00b      	beq.n	80070c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	4a34      	ldr	r2, [pc, #208]	@ (8007188 <UART_AdvFeatureConfig+0x150>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	0019      	movs	r1, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	2210      	movs	r2, #16
 80070ce:	4013      	ands	r3, r2
 80070d0:	d00b      	beq.n	80070ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	4a2c      	ldr	r2, [pc, #176]	@ (800718c <UART_AdvFeatureConfig+0x154>)
 80070da:	4013      	ands	r3, r2
 80070dc:	0019      	movs	r1, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	2220      	movs	r2, #32
 80070f0:	4013      	ands	r3, r2
 80070f2:	d00b      	beq.n	800710c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4a25      	ldr	r2, [pc, #148]	@ (8007190 <UART_AdvFeatureConfig+0x158>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	0019      	movs	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007110:	2240      	movs	r2, #64	@ 0x40
 8007112:	4013      	ands	r3, r2
 8007114:	d01d      	beq.n	8007152 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4a1d      	ldr	r2, [pc, #116]	@ (8007194 <UART_AdvFeatureConfig+0x15c>)
 800711e:	4013      	ands	r3, r2
 8007120:	0019      	movs	r1, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	035b      	lsls	r3, r3, #13
 8007136:	429a      	cmp	r2, r3
 8007138:	d10b      	bne.n	8007152 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	4a15      	ldr	r2, [pc, #84]	@ (8007198 <UART_AdvFeatureConfig+0x160>)
 8007142:	4013      	ands	r3, r2
 8007144:	0019      	movs	r1, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007156:	2280      	movs	r2, #128	@ 0x80
 8007158:	4013      	ands	r3, r2
 800715a:	d00b      	beq.n	8007174 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	4a0e      	ldr	r2, [pc, #56]	@ (800719c <UART_AdvFeatureConfig+0x164>)
 8007164:	4013      	ands	r3, r2
 8007166:	0019      	movs	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
  }
}
 8007174:	46c0      	nop			@ (mov r8, r8)
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}
 800717c:	ffff7fff 	.word	0xffff7fff
 8007180:	fffdffff 	.word	0xfffdffff
 8007184:	fffeffff 	.word	0xfffeffff
 8007188:	fffbffff 	.word	0xfffbffff
 800718c:	ffffefff 	.word	0xffffefff
 8007190:	ffffdfff 	.word	0xffffdfff
 8007194:	ffefffff 	.word	0xffefffff
 8007198:	ff9fffff 	.word	0xff9fffff
 800719c:	fff7ffff 	.word	0xfff7ffff

080071a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b092      	sub	sp, #72	@ 0x48
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2284      	movs	r2, #132	@ 0x84
 80071ac:	2100      	movs	r1, #0
 80071ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b0:	f7fb fdca 	bl	8002d48 <HAL_GetTick>
 80071b4:	0003      	movs	r3, r0
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2208      	movs	r2, #8
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d12c      	bne.n	8007220 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	2280      	movs	r2, #128	@ 0x80
 80071ca:	0391      	lsls	r1, r2, #14
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4a46      	ldr	r2, [pc, #280]	@ (80072e8 <UART_CheckIdleState+0x148>)
 80071d0:	9200      	str	r2, [sp, #0]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f000 f88c 	bl	80072f0 <UART_WaitOnFlagUntilTimeout>
 80071d8:	1e03      	subs	r3, r0, #0
 80071da:	d021      	beq.n	8007220 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071dc:	f3ef 8310 	mrs	r3, PRIMASK
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071e6:	2301      	movs	r3, #1
 80071e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			@ (mov r8, r8)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2180      	movs	r1, #128	@ 0x80
 80071fe:	438a      	bics	r2, r1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	f383 8810 	msr	PRIMASK, r3
}
 800720c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2278      	movs	r2, #120	@ 0x78
 8007218:	2100      	movs	r1, #0
 800721a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e05f      	b.n	80072e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2204      	movs	r2, #4
 8007228:	4013      	ands	r3, r2
 800722a:	2b04      	cmp	r3, #4
 800722c:	d146      	bne.n	80072bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007230:	2280      	movs	r2, #128	@ 0x80
 8007232:	03d1      	lsls	r1, r2, #15
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4a2c      	ldr	r2, [pc, #176]	@ (80072e8 <UART_CheckIdleState+0x148>)
 8007238:	9200      	str	r2, [sp, #0]
 800723a:	2200      	movs	r2, #0
 800723c:	f000 f858 	bl	80072f0 <UART_WaitOnFlagUntilTimeout>
 8007240:	1e03      	subs	r3, r0, #0
 8007242:	d03b      	beq.n	80072bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007244:	f3ef 8310 	mrs	r3, PRIMASK
 8007248:	60fb      	str	r3, [r7, #12]
  return(result);
 800724a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724c:	637b      	str	r3, [r7, #52]	@ 0x34
 800724e:	2301      	movs	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f383 8810 	msr	PRIMASK, r3
}
 8007258:	46c0      	nop			@ (mov r8, r8)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4921      	ldr	r1, [pc, #132]	@ (80072ec <UART_CheckIdleState+0x14c>)
 8007266:	400a      	ands	r2, r1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f383 8810 	msr	PRIMASK, r3
}
 8007274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007276:	f3ef 8310 	mrs	r3, PRIMASK
 800727a:	61bb      	str	r3, [r7, #24]
  return(result);
 800727c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007280:	2301      	movs	r3, #1
 8007282:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f383 8810 	msr	PRIMASK, r3
}
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2101      	movs	r1, #1
 8007298:	438a      	bics	r2, r1
 800729a:	609a      	str	r2, [r3, #8]
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f383 8810 	msr	PRIMASK, r3
}
 80072a6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2280      	movs	r2, #128	@ 0x80
 80072ac:	2120      	movs	r1, #32
 80072ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2278      	movs	r2, #120	@ 0x78
 80072b4:	2100      	movs	r1, #0
 80072b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e011      	b.n	80072e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2280      	movs	r2, #128	@ 0x80
 80072c6:	2120      	movs	r1, #32
 80072c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2278      	movs	r2, #120	@ 0x78
 80072da:	2100      	movs	r1, #0
 80072dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b010      	add	sp, #64	@ 0x40
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	01ffffff 	.word	0x01ffffff
 80072ec:	fffffedf 	.word	0xfffffedf

080072f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	1dfb      	adds	r3, r7, #7
 80072fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007300:	e051      	b.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	3301      	adds	r3, #1
 8007306:	d04e      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007308:	f7fb fd1e 	bl	8002d48 <HAL_GetTick>
 800730c:	0002      	movs	r2, r0
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e051      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2204      	movs	r2, #4
 800732a:	4013      	ands	r3, r2
 800732c:	d03b      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d038      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b40      	cmp	r3, #64	@ 0x40
 8007338:	d035      	beq.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2208      	movs	r2, #8
 8007342:	4013      	ands	r3, r2
 8007344:	2b08      	cmp	r3, #8
 8007346:	d111      	bne.n	800736c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2208      	movs	r2, #8
 800734e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	0018      	movs	r0, r3
 8007354:	f000 f900 	bl	8007558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2284      	movs	r2, #132	@ 0x84
 800735c:	2108      	movs	r1, #8
 800735e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2278      	movs	r2, #120	@ 0x78
 8007364:	2100      	movs	r1, #0
 8007366:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e02c      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69da      	ldr	r2, [r3, #28]
 8007372:	2380      	movs	r3, #128	@ 0x80
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	401a      	ands	r2, r3
 8007378:	2380      	movs	r3, #128	@ 0x80
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	429a      	cmp	r2, r3
 800737e:	d112      	bne.n	80073a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2280      	movs	r2, #128	@ 0x80
 8007386:	0112      	lsls	r2, r2, #4
 8007388:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	0018      	movs	r0, r3
 800738e:	f000 f8e3 	bl	8007558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2284      	movs	r2, #132	@ 0x84
 8007396:	2120      	movs	r1, #32
 8007398:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2278      	movs	r2, #120	@ 0x78
 800739e:	2100      	movs	r1, #0
 80073a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e00f      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	425a      	negs	r2, r3
 80073b6:	4153      	adcs	r3, r2
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	001a      	movs	r2, r3
 80073bc:	1dfb      	adds	r3, r7, #7
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d09e      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	0018      	movs	r0, r3
 80073c8:	46bd      	mov	sp, r7
 80073ca:	b004      	add	sp, #16
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b090      	sub	sp, #64	@ 0x40
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	1dbb      	adds	r3, r7, #6
 80073dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	1dba      	adds	r2, r7, #6
 80073e8:	2158      	movs	r1, #88	@ 0x58
 80073ea:	8812      	ldrh	r2, [r2, #0]
 80073ec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2284      	movs	r2, #132	@ 0x84
 80073f2:	2100      	movs	r1, #0
 80073f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2280      	movs	r2, #128	@ 0x80
 80073fa:	2122      	movs	r1, #34	@ 0x22
 80073fc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007402:	2b00      	cmp	r3, #0
 8007404:	d028      	beq.n	8007458 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740a:	4a3e      	ldr	r2, [pc, #248]	@ (8007504 <UART_Start_Receive_DMA+0x134>)
 800740c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007412:	4a3d      	ldr	r2, [pc, #244]	@ (8007508 <UART_Start_Receive_DMA+0x138>)
 8007414:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800741a:	4a3c      	ldr	r2, [pc, #240]	@ (800750c <UART_Start_Receive_DMA+0x13c>)
 800741c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007422:	2200      	movs	r2, #0
 8007424:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3324      	adds	r3, #36	@ 0x24
 8007430:	0019      	movs	r1, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007436:	001a      	movs	r2, r3
 8007438:	1dbb      	adds	r3, r7, #6
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	f7fc fb80 	bl	8003b40 <HAL_DMA_Start_IT>
 8007440:	1e03      	subs	r3, r0, #0
 8007442:	d009      	beq.n	8007458 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2284      	movs	r2, #132	@ 0x84
 8007448:	2110      	movs	r1, #16
 800744a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2280      	movs	r2, #128	@ 0x80
 8007450:	2120      	movs	r1, #32
 8007452:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e050      	b.n	80074fa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d019      	beq.n	8007494 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007460:	f3ef 8310 	mrs	r3, PRIMASK
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800746a:	2301      	movs	r3, #1
 800746c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007470:	f383 8810 	msr	PRIMASK, r3
}
 8007474:	46c0      	nop			@ (mov r8, r8)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2180      	movs	r1, #128	@ 0x80
 8007482:	0049      	lsls	r1, r1, #1
 8007484:	430a      	orrs	r2, r1
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f383 8810 	msr	PRIMASK, r3
}
 8007492:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007494:	f3ef 8310 	mrs	r3, PRIMASK
 8007498:	613b      	str	r3, [r7, #16]
  return(result);
 800749a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800749e:	2301      	movs	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f383 8810 	msr	PRIMASK, r3
}
 80074a8:	46c0      	nop			@ (mov r8, r8)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2101      	movs	r1, #1
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f383 8810 	msr	PRIMASK, r3
}
 80074c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80074cc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d0:	2301      	movs	r3, #1
 80074d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	f383 8810 	msr	PRIMASK, r3
}
 80074da:	46c0      	nop			@ (mov r8, r8)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2140      	movs	r1, #64	@ 0x40
 80074e8:	430a      	orrs	r2, r1
 80074ea:	609a      	str	r2, [r3, #8]
 80074ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b010      	add	sp, #64	@ 0x40
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			@ (mov r8, r8)
 8007504:	080076d5 	.word	0x080076d5
 8007508:	08007801 	.word	0x08007801
 800750c:	08007843 	.word	0x08007843

08007510 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007518:	f3ef 8310 	mrs	r3, PRIMASK
 800751c:	60bb      	str	r3, [r7, #8]
  return(result);
 800751e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	2301      	movs	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	46c0      	nop			@ (mov r8, r8)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	21c0      	movs	r1, #192	@ 0xc0
 800753a:	438a      	bics	r2, r1
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f383 8810 	msr	PRIMASK, r3
}
 8007548:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007550:	46c0      	nop			@ (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b006      	add	sp, #24
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08e      	sub	sp, #56	@ 0x38
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007560:	f3ef 8310 	mrs	r3, PRIMASK
 8007564:	617b      	str	r3, [r7, #20]
  return(result);
 8007566:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
 800756a:	2301      	movs	r3, #1
 800756c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f383 8810 	msr	PRIMASK, r3
}
 8007574:	46c0      	nop			@ (mov r8, r8)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4926      	ldr	r1, [pc, #152]	@ (800761c <UART_EndRxTransfer+0xc4>)
 8007582:	400a      	ands	r2, r1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007588:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007592:	f3ef 8310 	mrs	r3, PRIMASK
 8007596:	623b      	str	r3, [r7, #32]
  return(result);
 8007598:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	633b      	str	r3, [r7, #48]	@ 0x30
 800759c:	2301      	movs	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	f383 8810 	msr	PRIMASK, r3
}
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2101      	movs	r1, #1
 80075b4:	438a      	bics	r2, r1
 80075b6:	609a      	str	r2, [r3, #8]
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	f383 8810 	msr	PRIMASK, r3
}
 80075c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d118      	bne.n	80075fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d6:	2301      	movs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f383 8810 	msr	PRIMASK, r3
}
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2110      	movs	r1, #16
 80075ee:	438a      	bics	r2, r1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f383 8810 	msr	PRIMASK, r3
}
 80075fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2280      	movs	r2, #128	@ 0x80
 8007602:	2120      	movs	r1, #32
 8007604:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b00e      	add	sp, #56	@ 0x38
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	fffffedf 	.word	0xfffffedf

08007620 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	@ 0x30
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b20      	cmp	r3, #32
 8007634:	d035      	beq.n	80076a2 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8007636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007638:	2252      	movs	r2, #82	@ 0x52
 800763a:	2100      	movs	r1, #0
 800763c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763e:	f3ef 8310 	mrs	r3, PRIMASK
 8007642:	60fb      	str	r3, [r7, #12]
  return(result);
 8007644:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007648:	2301      	movs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f383 8810 	msr	PRIMASK, r3
}
 8007652:	46c0      	nop			@ (mov r8, r8)
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2180      	movs	r1, #128	@ 0x80
 8007660:	438a      	bics	r2, r1
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f383 8810 	msr	PRIMASK, r3
}
 800766e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007670:	f3ef 8310 	mrs	r3, PRIMASK
 8007674:	61bb      	str	r3, [r7, #24]
  return(result);
 8007676:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
 800767a:	2301      	movs	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f383 8810 	msr	PRIMASK, r3
}
 8007684:	46c0      	nop			@ (mov r8, r8)
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2140      	movs	r1, #64	@ 0x40
 8007692:	430a      	orrs	r2, r1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f383 8810 	msr	PRIMASK, r3
}
 80076a0:	e004      	b.n	80076ac <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	0018      	movs	r0, r3
 80076a6:	f7f9 f937 	bl	8000918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076aa:	46c0      	nop			@ (mov r8, r8)
 80076ac:	46c0      	nop			@ (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b00c      	add	sp, #48	@ 0x30
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7ff fb63 	bl	8006d90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ca:	46c0      	nop			@ (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b004      	add	sp, #16
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b094      	sub	sp, #80	@ 0x50
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d06f      	beq.n	80077ca <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80076ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ec:	225a      	movs	r2, #90	@ 0x5a
 80076ee:	2100      	movs	r1, #0
 80076f0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f2:	f3ef 8310 	mrs	r3, PRIMASK
 80076f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80076f8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076fc:	2301      	movs	r3, #1
 80076fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f383 8810 	msr	PRIMASK, r3
}
 8007706:	46c0      	nop			@ (mov r8, r8)
 8007708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	493a      	ldr	r1, [pc, #232]	@ (80077fc <UART_DMAReceiveCplt+0x128>)
 8007714:	400a      	ands	r2, r1
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800771a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	f383 8810 	msr	PRIMASK, r3
}
 8007722:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007724:	f3ef 8310 	mrs	r3, PRIMASK
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772c:	647b      	str	r3, [r7, #68]	@ 0x44
 800772e:	2301      	movs	r3, #1
 8007730:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	f383 8810 	msr	PRIMASK, r3
}
 8007738:	46c0      	nop			@ (mov r8, r8)
 800773a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2101      	movs	r1, #1
 8007746:	438a      	bics	r2, r1
 8007748:	609a      	str	r2, [r3, #8]
 800774a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	f383 8810 	msr	PRIMASK, r3
}
 8007754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007756:	f3ef 8310 	mrs	r3, PRIMASK
 800775a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007760:	2301      	movs	r3, #1
 8007762:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007766:	f383 8810 	msr	PRIMASK, r3
}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2140      	movs	r1, #64	@ 0x40
 8007778:	438a      	bics	r2, r1
 800777a:	609a      	str	r2, [r3, #8]
 800777c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800777e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	f383 8810 	msr	PRIMASK, r3
}
 8007786:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778a:	2280      	movs	r2, #128	@ 0x80
 800778c:	2120      	movs	r1, #32
 800778e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007794:	2b01      	cmp	r3, #1
 8007796:	d118      	bne.n	80077ca <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007798:	f3ef 8310 	mrs	r3, PRIMASK
 800779c:	60fb      	str	r3, [r7, #12]
  return(result);
 800779e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a2:	2301      	movs	r3, #1
 80077a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f383 8810 	msr	PRIMASK, r3
}
 80077ac:	46c0      	nop			@ (mov r8, r8)
 80077ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2110      	movs	r1, #16
 80077ba:	438a      	bics	r2, r1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f383 8810 	msr	PRIMASK, r3
}
 80077c8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077cc:	2200      	movs	r2, #0
 80077ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d108      	bne.n	80077ea <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077da:	2258      	movs	r2, #88	@ 0x58
 80077dc:	5a9a      	ldrh	r2, [r3, r2]
 80077de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e0:	0011      	movs	r1, r2
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7ff faf4 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077e8:	e003      	b.n	80077f2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80077ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7ff fad7 	bl	8006da0 <HAL_UART_RxCpltCallback>
}
 80077f2:	46c0      	nop			@ (mov r8, r8)
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b014      	add	sp, #80	@ 0x50
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	fffffeff 	.word	0xfffffeff

08007800 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007818:	2b01      	cmp	r3, #1
 800781a:	d10a      	bne.n	8007832 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2258      	movs	r2, #88	@ 0x58
 8007820:	5a9b      	ldrh	r3, [r3, r2]
 8007822:	085b      	lsrs	r3, r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	0011      	movs	r1, r2
 800782a:	0018      	movs	r0, r3
 800782c:	f7ff fad0 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007830:	e003      	b.n	800783a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	0018      	movs	r0, r3
 8007836:	f7ff fabb 	bl	8006db0 <HAL_UART_RxHalfCpltCallback>
}
 800783a:	46c0      	nop			@ (mov r8, r8)
 800783c:	46bd      	mov	sp, r7
 800783e:	b004      	add	sp, #16
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b086      	sub	sp, #24
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007854:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2280      	movs	r2, #128	@ 0x80
 800785a:	589b      	ldr	r3, [r3, r2]
 800785c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2280      	movs	r2, #128	@ 0x80
 8007866:	4013      	ands	r3, r2
 8007868:	2b80      	cmp	r3, #128	@ 0x80
 800786a:	d10a      	bne.n	8007882 <UART_DMAError+0x40>
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b21      	cmp	r3, #33	@ 0x21
 8007870:	d107      	bne.n	8007882 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2252      	movs	r2, #82	@ 0x52
 8007876:	2100      	movs	r1, #0
 8007878:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	0018      	movs	r0, r3
 800787e:	f7ff fe47 	bl	8007510 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2240      	movs	r2, #64	@ 0x40
 800788a:	4013      	ands	r3, r2
 800788c:	2b40      	cmp	r3, #64	@ 0x40
 800788e:	d10a      	bne.n	80078a6 <UART_DMAError+0x64>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b22      	cmp	r3, #34	@ 0x22
 8007894:	d107      	bne.n	80078a6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	225a      	movs	r2, #90	@ 0x5a
 800789a:	2100      	movs	r1, #0
 800789c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7ff fe59 	bl	8007558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2284      	movs	r2, #132	@ 0x84
 80078aa:	589b      	ldr	r3, [r3, r2]
 80078ac:	2210      	movs	r2, #16
 80078ae:	431a      	orrs	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2184      	movs	r1, #132	@ 0x84
 80078b4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff fa81 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078be:	46c0      	nop			@ (mov r8, r8)
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b006      	add	sp, #24
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	225a      	movs	r2, #90	@ 0x5a
 80078d8:	2100      	movs	r1, #0
 80078da:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2252      	movs	r2, #82	@ 0x52
 80078e0:	2100      	movs	r1, #0
 80078e2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7ff fa6a 	bl	8006dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ec:	46c0      	nop			@ (mov r8, r8)
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b004      	add	sp, #16
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007900:	60bb      	str	r3, [r7, #8]
  return(result);
 8007902:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	2301      	movs	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f383 8810 	msr	PRIMASK, r3
}
 8007910:	46c0      	nop			@ (mov r8, r8)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2140      	movs	r1, #64	@ 0x40
 800791e:	438a      	bics	r2, r1
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f383 8810 	msr	PRIMASK, r3
}
 800792c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	0018      	movs	r0, r3
 800793e:	f7f8 ffeb 	bl	8000918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	46bd      	mov	sp, r7
 8007946:	b006      	add	sp, #24
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	46bd      	mov	sp, r7
 8007956:	b002      	add	sp, #8
 8007958:	bd80      	pop	{r7, pc}

0800795a <memset>:
 800795a:	0003      	movs	r3, r0
 800795c:	1882      	adds	r2, r0, r2
 800795e:	4293      	cmp	r3, r2
 8007960:	d100      	bne.n	8007964 <memset+0xa>
 8007962:	4770      	bx	lr
 8007964:	7019      	strb	r1, [r3, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	e7f9      	b.n	800795e <memset+0x4>
	...

0800796c <__libc_init_array>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	2600      	movs	r6, #0
 8007970:	4c0c      	ldr	r4, [pc, #48]	@ (80079a4 <__libc_init_array+0x38>)
 8007972:	4d0d      	ldr	r5, [pc, #52]	@ (80079a8 <__libc_init_array+0x3c>)
 8007974:	1b64      	subs	r4, r4, r5
 8007976:	10a4      	asrs	r4, r4, #2
 8007978:	42a6      	cmp	r6, r4
 800797a:	d109      	bne.n	8007990 <__libc_init_array+0x24>
 800797c:	2600      	movs	r6, #0
 800797e:	f000 f823 	bl	80079c8 <_init>
 8007982:	4c0a      	ldr	r4, [pc, #40]	@ (80079ac <__libc_init_array+0x40>)
 8007984:	4d0a      	ldr	r5, [pc, #40]	@ (80079b0 <__libc_init_array+0x44>)
 8007986:	1b64      	subs	r4, r4, r5
 8007988:	10a4      	asrs	r4, r4, #2
 800798a:	42a6      	cmp	r6, r4
 800798c:	d105      	bne.n	800799a <__libc_init_array+0x2e>
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	00b3      	lsls	r3, r6, #2
 8007992:	58eb      	ldr	r3, [r5, r3]
 8007994:	4798      	blx	r3
 8007996:	3601      	adds	r6, #1
 8007998:	e7ee      	b.n	8007978 <__libc_init_array+0xc>
 800799a:	00b3      	lsls	r3, r6, #2
 800799c:	58eb      	ldr	r3, [r5, r3]
 800799e:	4798      	blx	r3
 80079a0:	3601      	adds	r6, #1
 80079a2:	e7f2      	b.n	800798a <__libc_init_array+0x1e>
 80079a4:	08007a20 	.word	0x08007a20
 80079a8:	08007a20 	.word	0x08007a20
 80079ac:	08007a24 	.word	0x08007a24
 80079b0:	08007a20 	.word	0x08007a20

080079b4 <memcpy>:
 80079b4:	2300      	movs	r3, #0
 80079b6:	b510      	push	{r4, lr}
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d100      	bne.n	80079be <memcpy+0xa>
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	5ccc      	ldrb	r4, [r1, r3]
 80079c0:	54c4      	strb	r4, [r0, r3]
 80079c2:	3301      	adds	r3, #1
 80079c4:	e7f8      	b.n	80079b8 <memcpy+0x4>
	...

080079c8 <_init>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr

080079d4 <_fini>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079da:	bc08      	pop	{r3}
 80079dc:	469e      	mov	lr, r3
 80079de:	4770      	bx	lr


Teststand_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007c84  08007c84  00008c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d38  08007d38  00009018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d40  08007d40  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d44  08007d44  00008d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007d48  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  20000018  08007d60  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08007d60  00009710  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cea  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d8  00000000  00000000  0001dd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00021308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea6  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001290a  00000000  00000000  0002341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001986c  00000000  00000000  00035d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b265  00000000  00000000  0004f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba7f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004288  00000000  00000000  000ba83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000beac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c6c 	.word	0x08007c6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08007c6c 	.word	0x08007c6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d113      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000228:	2900      	cmp	r1, #0
 800022a:	db06      	blt.n	800023a <__aeabi_ldivmod+0x1a>
 800022c:	dc01      	bgt.n	8000232 <__aeabi_ldivmod+0x12>
 800022e:	2800      	cmp	r0, #0
 8000230:	d006      	beq.n	8000240 <__aeabi_ldivmod+0x20>
 8000232:	2000      	movs	r0, #0
 8000234:	43c0      	mvns	r0, r0
 8000236:	0841      	lsrs	r1, r0, #1
 8000238:	e002      	b.n	8000240 <__aeabi_ldivmod+0x20>
 800023a:	2180      	movs	r1, #128	@ 0x80
 800023c:	0609      	lsls	r1, r1, #24
 800023e:	2000      	movs	r0, #0
 8000240:	b407      	push	{r0, r1, r2}
 8000242:	4802      	ldr	r0, [pc, #8]	@ (800024c <__aeabi_ldivmod+0x2c>)
 8000244:	a101      	add	r1, pc, #4	@ (adr r1, 800024c <__aeabi_ldivmod+0x2c>)
 8000246:	1840      	adds	r0, r0, r1
 8000248:	9002      	str	r0, [sp, #8]
 800024a:	bd03      	pop	{r0, r1, pc}
 800024c:	ffffffd1 	.word	0xffffffd1
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f920 	bl	800049c <__gnu_ldivmod_helper>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_uldivmod>:
 8000268:	2b00      	cmp	r3, #0
 800026a:	d111      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 800026c:	2a00      	cmp	r2, #0
 800026e:	d10f      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 8000270:	2900      	cmp	r1, #0
 8000272:	d100      	bne.n	8000276 <__aeabi_uldivmod+0xe>
 8000274:	2800      	cmp	r0, #0
 8000276:	d002      	beq.n	800027e <__aeabi_uldivmod+0x16>
 8000278:	2100      	movs	r1, #0
 800027a:	43c9      	mvns	r1, r1
 800027c:	0008      	movs	r0, r1
 800027e:	b407      	push	{r0, r1, r2}
 8000280:	4802      	ldr	r0, [pc, #8]	@ (800028c <__aeabi_uldivmod+0x24>)
 8000282:	a102      	add	r1, pc, #8	@ (adr r1, 800028c <__aeabi_uldivmod+0x24>)
 8000284:	1840      	adds	r0, r0, r1
 8000286:	9002      	str	r0, [sp, #8]
 8000288:	bd03      	pop	{r0, r1, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	ffffff91 	.word	0xffffff91
 8000290:	b403      	push	{r0, r1}
 8000292:	4668      	mov	r0, sp
 8000294:	b501      	push	{r0, lr}
 8000296:	9802      	ldr	r0, [sp, #8]
 8000298:	f000 f834 	bl	8000304 <__udivmoddi4>
 800029c:	9b01      	ldr	r3, [sp, #4]
 800029e:	469e      	mov	lr, r3
 80002a0:	b002      	add	sp, #8
 80002a2:	bc0c      	pop	{r2, r3}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			@ (mov r8, r8)

080002a8 <__aeabi_lmul>:
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	46ce      	mov	lr, r9
 80002ac:	4699      	mov	r9, r3
 80002ae:	0c03      	lsrs	r3, r0, #16
 80002b0:	469c      	mov	ip, r3
 80002b2:	0413      	lsls	r3, r2, #16
 80002b4:	4647      	mov	r7, r8
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	001d      	movs	r5, r3
 80002ba:	000e      	movs	r6, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	0404      	lsls	r4, r0, #16
 80002c0:	0c24      	lsrs	r4, r4, #16
 80002c2:	b580      	push	{r7, lr}
 80002c4:	0007      	movs	r7, r0
 80002c6:	0c10      	lsrs	r0, r2, #16
 80002c8:	434b      	muls	r3, r1
 80002ca:	4365      	muls	r5, r4
 80002cc:	4341      	muls	r1, r0
 80002ce:	4360      	muls	r0, r4
 80002d0:	0c2c      	lsrs	r4, r5, #16
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	1824      	adds	r4, r4, r0
 80002d6:	468c      	mov	ip, r1
 80002d8:	42a3      	cmp	r3, r4
 80002da:	d903      	bls.n	80002e4 <__aeabi_lmul+0x3c>
 80002dc:	2380      	movs	r3, #128	@ 0x80
 80002de:	025b      	lsls	r3, r3, #9
 80002e0:	4698      	mov	r8, r3
 80002e2:	44c4      	add	ip, r8
 80002e4:	4649      	mov	r1, r9
 80002e6:	4379      	muls	r1, r7
 80002e8:	4356      	muls	r6, r2
 80002ea:	0c23      	lsrs	r3, r4, #16
 80002ec:	042d      	lsls	r5, r5, #16
 80002ee:	0c2d      	lsrs	r5, r5, #16
 80002f0:	1989      	adds	r1, r1, r6
 80002f2:	4463      	add	r3, ip
 80002f4:	0424      	lsls	r4, r4, #16
 80002f6:	1960      	adds	r0, r4, r5
 80002f8:	18c9      	adds	r1, r1, r3
 80002fa:	bcc0      	pop	{r6, r7}
 80002fc:	46b9      	mov	r9, r7
 80002fe:	46b0      	mov	r8, r6
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	46c0      	nop			@ (mov r8, r8)

08000304 <__udivmoddi4>:
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	4657      	mov	r7, sl
 8000308:	464e      	mov	r6, r9
 800030a:	4645      	mov	r5, r8
 800030c:	46de      	mov	lr, fp
 800030e:	b5e0      	push	{r5, r6, r7, lr}
 8000310:	0004      	movs	r4, r0
 8000312:	000d      	movs	r5, r1
 8000314:	4692      	mov	sl, r2
 8000316:	4699      	mov	r9, r3
 8000318:	b083      	sub	sp, #12
 800031a:	428b      	cmp	r3, r1
 800031c:	d830      	bhi.n	8000380 <__udivmoddi4+0x7c>
 800031e:	d02d      	beq.n	800037c <__udivmoddi4+0x78>
 8000320:	4649      	mov	r1, r9
 8000322:	4650      	mov	r0, sl
 8000324:	f000 fa52 	bl	80007cc <__clzdi2>
 8000328:	0029      	movs	r1, r5
 800032a:	0006      	movs	r6, r0
 800032c:	0020      	movs	r0, r4
 800032e:	f000 fa4d 	bl	80007cc <__clzdi2>
 8000332:	1a33      	subs	r3, r6, r0
 8000334:	4698      	mov	r8, r3
 8000336:	3b20      	subs	r3, #32
 8000338:	d434      	bmi.n	80003a4 <__udivmoddi4+0xa0>
 800033a:	469b      	mov	fp, r3
 800033c:	4653      	mov	r3, sl
 800033e:	465a      	mov	r2, fp
 8000340:	4093      	lsls	r3, r2
 8000342:	4642      	mov	r2, r8
 8000344:	001f      	movs	r7, r3
 8000346:	4653      	mov	r3, sl
 8000348:	4093      	lsls	r3, r2
 800034a:	001e      	movs	r6, r3
 800034c:	42af      	cmp	r7, r5
 800034e:	d83b      	bhi.n	80003c8 <__udivmoddi4+0xc4>
 8000350:	42af      	cmp	r7, r5
 8000352:	d100      	bne.n	8000356 <__udivmoddi4+0x52>
 8000354:	e079      	b.n	800044a <__udivmoddi4+0x146>
 8000356:	465b      	mov	r3, fp
 8000358:	1ba4      	subs	r4, r4, r6
 800035a:	41bd      	sbcs	r5, r7
 800035c:	2b00      	cmp	r3, #0
 800035e:	da00      	bge.n	8000362 <__udivmoddi4+0x5e>
 8000360:	e076      	b.n	8000450 <__udivmoddi4+0x14c>
 8000362:	2200      	movs	r2, #0
 8000364:	2300      	movs	r3, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	2301      	movs	r3, #1
 800036c:	465a      	mov	r2, fp
 800036e:	4093      	lsls	r3, r2
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	4642      	mov	r2, r8
 8000376:	4093      	lsls	r3, r2
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	e029      	b.n	80003d0 <__udivmoddi4+0xcc>
 800037c:	4282      	cmp	r2, r0
 800037e:	d9cf      	bls.n	8000320 <__udivmoddi4+0x1c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <__udivmoddi4+0x8e>
 800038e:	601c      	str	r4, [r3, #0]
 8000390:	605d      	str	r5, [r3, #4]
 8000392:	9800      	ldr	r0, [sp, #0]
 8000394:	9901      	ldr	r1, [sp, #4]
 8000396:	b003      	add	sp, #12
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	46bb      	mov	fp, r7
 800039c:	46b2      	mov	sl, r6
 800039e:	46a9      	mov	r9, r5
 80003a0:	46a0      	mov	r8, r4
 80003a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a4:	4642      	mov	r2, r8
 80003a6:	469b      	mov	fp, r3
 80003a8:	2320      	movs	r3, #32
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	4652      	mov	r2, sl
 80003ae:	40da      	lsrs	r2, r3
 80003b0:	4641      	mov	r1, r8
 80003b2:	0013      	movs	r3, r2
 80003b4:	464a      	mov	r2, r9
 80003b6:	408a      	lsls	r2, r1
 80003b8:	0017      	movs	r7, r2
 80003ba:	4642      	mov	r2, r8
 80003bc:	431f      	orrs	r7, r3
 80003be:	4653      	mov	r3, sl
 80003c0:	4093      	lsls	r3, r2
 80003c2:	001e      	movs	r6, r3
 80003c4:	42af      	cmp	r7, r5
 80003c6:	d9c3      	bls.n	8000350 <__udivmoddi4+0x4c>
 80003c8:	2200      	movs	r2, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0d8      	beq.n	8000388 <__udivmoddi4+0x84>
 80003d6:	07fb      	lsls	r3, r7, #31
 80003d8:	0872      	lsrs	r2, r6, #1
 80003da:	431a      	orrs	r2, r3
 80003dc:	4646      	mov	r6, r8
 80003de:	087b      	lsrs	r3, r7, #1
 80003e0:	e00e      	b.n	8000400 <__udivmoddi4+0xfc>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d101      	bne.n	80003ea <__udivmoddi4+0xe6>
 80003e6:	42a2      	cmp	r2, r4
 80003e8:	d80c      	bhi.n	8000404 <__udivmoddi4+0x100>
 80003ea:	1aa4      	subs	r4, r4, r2
 80003ec:	419d      	sbcs	r5, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	1924      	adds	r4, r4, r4
 80003f2:	416d      	adcs	r5, r5
 80003f4:	2100      	movs	r1, #0
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1824      	adds	r4, r4, r0
 80003fa:	414d      	adcs	r5, r1
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d006      	beq.n	800040e <__udivmoddi4+0x10a>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d9ee      	bls.n	80003e2 <__udivmoddi4+0xde>
 8000404:	3e01      	subs	r6, #1
 8000406:	1924      	adds	r4, r4, r4
 8000408:	416d      	adcs	r5, r5
 800040a:	2e00      	cmp	r6, #0
 800040c:	d1f8      	bne.n	8000400 <__udivmoddi4+0xfc>
 800040e:	9800      	ldr	r0, [sp, #0]
 8000410:	9901      	ldr	r1, [sp, #4]
 8000412:	465b      	mov	r3, fp
 8000414:	1900      	adds	r0, r0, r4
 8000416:	4169      	adcs	r1, r5
 8000418:	2b00      	cmp	r3, #0
 800041a:	db24      	blt.n	8000466 <__udivmoddi4+0x162>
 800041c:	002b      	movs	r3, r5
 800041e:	465a      	mov	r2, fp
 8000420:	4644      	mov	r4, r8
 8000422:	40d3      	lsrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	db2a      	blt.n	8000488 <__udivmoddi4+0x184>
 8000432:	0026      	movs	r6, r4
 8000434:	409e      	lsls	r6, r3
 8000436:	0033      	movs	r3, r6
 8000438:	0026      	movs	r6, r4
 800043a:	4647      	mov	r7, r8
 800043c:	40be      	lsls	r6, r7
 800043e:	0032      	movs	r2, r6
 8000440:	1a80      	subs	r0, r0, r2
 8000442:	4199      	sbcs	r1, r3
 8000444:	9000      	str	r0, [sp, #0]
 8000446:	9101      	str	r1, [sp, #4]
 8000448:	e79e      	b.n	8000388 <__udivmoddi4+0x84>
 800044a:	42a3      	cmp	r3, r4
 800044c:	d8bc      	bhi.n	80003c8 <__udivmoddi4+0xc4>
 800044e:	e782      	b.n	8000356 <__udivmoddi4+0x52>
 8000450:	4642      	mov	r2, r8
 8000452:	2320      	movs	r3, #32
 8000454:	2100      	movs	r1, #0
 8000456:	1a9b      	subs	r3, r3, r2
 8000458:	2200      	movs	r2, #0
 800045a:	9100      	str	r1, [sp, #0]
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	2201      	movs	r2, #1
 8000460:	40da      	lsrs	r2, r3
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	e785      	b.n	8000372 <__udivmoddi4+0x6e>
 8000466:	4642      	mov	r2, r8
 8000468:	2320      	movs	r3, #32
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	4646      	mov	r6, r8
 8000470:	409a      	lsls	r2, r3
 8000472:	0023      	movs	r3, r4
 8000474:	40f3      	lsrs	r3, r6
 8000476:	4644      	mov	r4, r8
 8000478:	4313      	orrs	r3, r2
 800047a:	002a      	movs	r2, r5
 800047c:	40e2      	lsrs	r2, r4
 800047e:	001c      	movs	r4, r3
 8000480:	465b      	mov	r3, fp
 8000482:	0015      	movs	r5, r2
 8000484:	2b00      	cmp	r3, #0
 8000486:	dad4      	bge.n	8000432 <__udivmoddi4+0x12e>
 8000488:	4642      	mov	r2, r8
 800048a:	002f      	movs	r7, r5
 800048c:	2320      	movs	r3, #32
 800048e:	0026      	movs	r6, r4
 8000490:	4097      	lsls	r7, r2
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	40de      	lsrs	r6, r3
 8000496:	003b      	movs	r3, r7
 8000498:	4333      	orrs	r3, r6
 800049a:	e7cd      	b.n	8000438 <__udivmoddi4+0x134>

0800049c <__gnu_ldivmod_helper>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	b580      	push	{r7, lr}
 80004a4:	4691      	mov	r9, r2
 80004a6:	4698      	mov	r8, r3
 80004a8:	0004      	movs	r4, r0
 80004aa:	000d      	movs	r5, r1
 80004ac:	f000 f99a 	bl	80007e4 <__divdi3>
 80004b0:	0007      	movs	r7, r0
 80004b2:	000e      	movs	r6, r1
 80004b4:	0002      	movs	r2, r0
 80004b6:	000b      	movs	r3, r1
 80004b8:	4648      	mov	r0, r9
 80004ba:	4641      	mov	r1, r8
 80004bc:	f7ff fef4 	bl	80002a8 <__aeabi_lmul>
 80004c0:	1a24      	subs	r4, r4, r0
 80004c2:	418d      	sbcs	r5, r1
 80004c4:	9b08      	ldr	r3, [sp, #32]
 80004c6:	0038      	movs	r0, r7
 80004c8:	0031      	movs	r1, r6
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	bcc0      	pop	{r6, r7}
 80004d0:	46b9      	mov	r9, r7
 80004d2:	46b0      	mov	r8, r6
 80004d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fdiv>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	4646      	mov	r6, r8
 80004dc:	464f      	mov	r7, r9
 80004de:	46d6      	mov	lr, sl
 80004e0:	0245      	lsls	r5, r0, #9
 80004e2:	b5c0      	push	{r6, r7, lr}
 80004e4:	0fc3      	lsrs	r3, r0, #31
 80004e6:	0047      	lsls	r7, r0, #1
 80004e8:	4698      	mov	r8, r3
 80004ea:	1c0e      	adds	r6, r1, #0
 80004ec:	0a6d      	lsrs	r5, r5, #9
 80004ee:	0e3f      	lsrs	r7, r7, #24
 80004f0:	d05b      	beq.n	80005aa <__aeabi_fdiv+0xd2>
 80004f2:	2fff      	cmp	r7, #255	@ 0xff
 80004f4:	d021      	beq.n	800053a <__aeabi_fdiv+0x62>
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	00ed      	lsls	r5, r5, #3
 80004fa:	04db      	lsls	r3, r3, #19
 80004fc:	431d      	orrs	r5, r3
 80004fe:	2300      	movs	r3, #0
 8000500:	4699      	mov	r9, r3
 8000502:	469a      	mov	sl, r3
 8000504:	3f7f      	subs	r7, #127	@ 0x7f
 8000506:	0274      	lsls	r4, r6, #9
 8000508:	0073      	lsls	r3, r6, #1
 800050a:	0a64      	lsrs	r4, r4, #9
 800050c:	0e1b      	lsrs	r3, r3, #24
 800050e:	0ff6      	lsrs	r6, r6, #31
 8000510:	2b00      	cmp	r3, #0
 8000512:	d020      	beq.n	8000556 <__aeabi_fdiv+0x7e>
 8000514:	2bff      	cmp	r3, #255	@ 0xff
 8000516:	d043      	beq.n	80005a0 <__aeabi_fdiv+0xc8>
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	2000      	movs	r0, #0
 800051c:	00e4      	lsls	r4, r4, #3
 800051e:	04d2      	lsls	r2, r2, #19
 8000520:	4314      	orrs	r4, r2
 8000522:	3b7f      	subs	r3, #127	@ 0x7f
 8000524:	4642      	mov	r2, r8
 8000526:	1aff      	subs	r7, r7, r3
 8000528:	464b      	mov	r3, r9
 800052a:	4072      	eors	r2, r6
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d900      	bls.n	8000532 <__aeabi_fdiv+0x5a>
 8000530:	e09d      	b.n	800066e <__aeabi_fdiv+0x196>
 8000532:	4971      	ldr	r1, [pc, #452]	@ (80006f8 <__aeabi_fdiv+0x220>)
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	58cb      	ldr	r3, [r1, r3]
 8000538:	469f      	mov	pc, r3
 800053a:	2d00      	cmp	r5, #0
 800053c:	d15a      	bne.n	80005f4 <__aeabi_fdiv+0x11c>
 800053e:	2308      	movs	r3, #8
 8000540:	4699      	mov	r9, r3
 8000542:	3b06      	subs	r3, #6
 8000544:	0274      	lsls	r4, r6, #9
 8000546:	469a      	mov	sl, r3
 8000548:	0073      	lsls	r3, r6, #1
 800054a:	27ff      	movs	r7, #255	@ 0xff
 800054c:	0a64      	lsrs	r4, r4, #9
 800054e:	0e1b      	lsrs	r3, r3, #24
 8000550:	0ff6      	lsrs	r6, r6, #31
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1de      	bne.n	8000514 <__aeabi_fdiv+0x3c>
 8000556:	2c00      	cmp	r4, #0
 8000558:	d13b      	bne.n	80005d2 <__aeabi_fdiv+0xfa>
 800055a:	2301      	movs	r3, #1
 800055c:	4642      	mov	r2, r8
 800055e:	4649      	mov	r1, r9
 8000560:	4072      	eors	r2, r6
 8000562:	4319      	orrs	r1, r3
 8000564:	290e      	cmp	r1, #14
 8000566:	d818      	bhi.n	800059a <__aeabi_fdiv+0xc2>
 8000568:	4864      	ldr	r0, [pc, #400]	@ (80006fc <__aeabi_fdiv+0x224>)
 800056a:	0089      	lsls	r1, r1, #2
 800056c:	5841      	ldr	r1, [r0, r1]
 800056e:	468f      	mov	pc, r1
 8000570:	4653      	mov	r3, sl
 8000572:	2b02      	cmp	r3, #2
 8000574:	d100      	bne.n	8000578 <__aeabi_fdiv+0xa0>
 8000576:	e0b8      	b.n	80006ea <__aeabi_fdiv+0x212>
 8000578:	2b03      	cmp	r3, #3
 800057a:	d06e      	beq.n	800065a <__aeabi_fdiv+0x182>
 800057c:	4642      	mov	r2, r8
 800057e:	002c      	movs	r4, r5
 8000580:	2b01      	cmp	r3, #1
 8000582:	d140      	bne.n	8000606 <__aeabi_fdiv+0x12e>
 8000584:	2000      	movs	r0, #0
 8000586:	2400      	movs	r4, #0
 8000588:	05c0      	lsls	r0, r0, #23
 800058a:	4320      	orrs	r0, r4
 800058c:	07d2      	lsls	r2, r2, #31
 800058e:	4310      	orrs	r0, r2
 8000590:	bce0      	pop	{r5, r6, r7}
 8000592:	46ba      	mov	sl, r7
 8000594:	46b1      	mov	r9, r6
 8000596:	46a8      	mov	r8, r5
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059a:	20ff      	movs	r0, #255	@ 0xff
 800059c:	2400      	movs	r4, #0
 800059e:	e7f3      	b.n	8000588 <__aeabi_fdiv+0xb0>
 80005a0:	2c00      	cmp	r4, #0
 80005a2:	d120      	bne.n	80005e6 <__aeabi_fdiv+0x10e>
 80005a4:	2302      	movs	r3, #2
 80005a6:	3fff      	subs	r7, #255	@ 0xff
 80005a8:	e7d8      	b.n	800055c <__aeabi_fdiv+0x84>
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d105      	bne.n	80005ba <__aeabi_fdiv+0xe2>
 80005ae:	2304      	movs	r3, #4
 80005b0:	4699      	mov	r9, r3
 80005b2:	3b03      	subs	r3, #3
 80005b4:	2700      	movs	r7, #0
 80005b6:	469a      	mov	sl, r3
 80005b8:	e7a5      	b.n	8000506 <__aeabi_fdiv+0x2e>
 80005ba:	0028      	movs	r0, r5
 80005bc:	f000 f8e8 	bl	8000790 <__clzsi2>
 80005c0:	2776      	movs	r7, #118	@ 0x76
 80005c2:	1f43      	subs	r3, r0, #5
 80005c4:	409d      	lsls	r5, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	427f      	negs	r7, r7
 80005ca:	4699      	mov	r9, r3
 80005cc:	469a      	mov	sl, r3
 80005ce:	1a3f      	subs	r7, r7, r0
 80005d0:	e799      	b.n	8000506 <__aeabi_fdiv+0x2e>
 80005d2:	0020      	movs	r0, r4
 80005d4:	f000 f8dc 	bl	8000790 <__clzsi2>
 80005d8:	1f43      	subs	r3, r0, #5
 80005da:	409c      	lsls	r4, r3
 80005dc:	2376      	movs	r3, #118	@ 0x76
 80005de:	425b      	negs	r3, r3
 80005e0:	1a1b      	subs	r3, r3, r0
 80005e2:	2000      	movs	r0, #0
 80005e4:	e79e      	b.n	8000524 <__aeabi_fdiv+0x4c>
 80005e6:	2303      	movs	r3, #3
 80005e8:	464a      	mov	r2, r9
 80005ea:	431a      	orrs	r2, r3
 80005ec:	4691      	mov	r9, r2
 80005ee:	2003      	movs	r0, #3
 80005f0:	33fc      	adds	r3, #252	@ 0xfc
 80005f2:	e797      	b.n	8000524 <__aeabi_fdiv+0x4c>
 80005f4:	230c      	movs	r3, #12
 80005f6:	4699      	mov	r9, r3
 80005f8:	3b09      	subs	r3, #9
 80005fa:	27ff      	movs	r7, #255	@ 0xff
 80005fc:	469a      	mov	sl, r3
 80005fe:	e782      	b.n	8000506 <__aeabi_fdiv+0x2e>
 8000600:	2803      	cmp	r0, #3
 8000602:	d02c      	beq.n	800065e <__aeabi_fdiv+0x186>
 8000604:	0032      	movs	r2, r6
 8000606:	0038      	movs	r0, r7
 8000608:	307f      	adds	r0, #127	@ 0x7f
 800060a:	2800      	cmp	r0, #0
 800060c:	dd47      	ble.n	800069e <__aeabi_fdiv+0x1c6>
 800060e:	0763      	lsls	r3, r4, #29
 8000610:	d004      	beq.n	800061c <__aeabi_fdiv+0x144>
 8000612:	230f      	movs	r3, #15
 8000614:	4023      	ands	r3, r4
 8000616:	2b04      	cmp	r3, #4
 8000618:	d000      	beq.n	800061c <__aeabi_fdiv+0x144>
 800061a:	3404      	adds	r4, #4
 800061c:	0123      	lsls	r3, r4, #4
 800061e:	d503      	bpl.n	8000628 <__aeabi_fdiv+0x150>
 8000620:	0038      	movs	r0, r7
 8000622:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <__aeabi_fdiv+0x228>)
 8000624:	3080      	adds	r0, #128	@ 0x80
 8000626:	401c      	ands	r4, r3
 8000628:	28fe      	cmp	r0, #254	@ 0xfe
 800062a:	dcb6      	bgt.n	800059a <__aeabi_fdiv+0xc2>
 800062c:	01a4      	lsls	r4, r4, #6
 800062e:	0a64      	lsrs	r4, r4, #9
 8000630:	b2c0      	uxtb	r0, r0
 8000632:	e7a9      	b.n	8000588 <__aeabi_fdiv+0xb0>
 8000634:	2480      	movs	r4, #128	@ 0x80
 8000636:	2200      	movs	r2, #0
 8000638:	20ff      	movs	r0, #255	@ 0xff
 800063a:	03e4      	lsls	r4, r4, #15
 800063c:	e7a4      	b.n	8000588 <__aeabi_fdiv+0xb0>
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	03db      	lsls	r3, r3, #15
 8000642:	421d      	tst	r5, r3
 8000644:	d001      	beq.n	800064a <__aeabi_fdiv+0x172>
 8000646:	421c      	tst	r4, r3
 8000648:	d00b      	beq.n	8000662 <__aeabi_fdiv+0x18a>
 800064a:	2480      	movs	r4, #128	@ 0x80
 800064c:	03e4      	lsls	r4, r4, #15
 800064e:	432c      	orrs	r4, r5
 8000650:	0264      	lsls	r4, r4, #9
 8000652:	4642      	mov	r2, r8
 8000654:	20ff      	movs	r0, #255	@ 0xff
 8000656:	0a64      	lsrs	r4, r4, #9
 8000658:	e796      	b.n	8000588 <__aeabi_fdiv+0xb0>
 800065a:	4646      	mov	r6, r8
 800065c:	002c      	movs	r4, r5
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	03db      	lsls	r3, r3, #15
 8000662:	431c      	orrs	r4, r3
 8000664:	0264      	lsls	r4, r4, #9
 8000666:	0032      	movs	r2, r6
 8000668:	20ff      	movs	r0, #255	@ 0xff
 800066a:	0a64      	lsrs	r4, r4, #9
 800066c:	e78c      	b.n	8000588 <__aeabi_fdiv+0xb0>
 800066e:	016d      	lsls	r5, r5, #5
 8000670:	0160      	lsls	r0, r4, #5
 8000672:	4285      	cmp	r5, r0
 8000674:	d22d      	bcs.n	80006d2 <__aeabi_fdiv+0x1fa>
 8000676:	231b      	movs	r3, #27
 8000678:	2400      	movs	r4, #0
 800067a:	3f01      	subs	r7, #1
 800067c:	2601      	movs	r6, #1
 800067e:	0029      	movs	r1, r5
 8000680:	0064      	lsls	r4, r4, #1
 8000682:	006d      	lsls	r5, r5, #1
 8000684:	2900      	cmp	r1, #0
 8000686:	db01      	blt.n	800068c <__aeabi_fdiv+0x1b4>
 8000688:	4285      	cmp	r5, r0
 800068a:	d301      	bcc.n	8000690 <__aeabi_fdiv+0x1b8>
 800068c:	1a2d      	subs	r5, r5, r0
 800068e:	4334      	orrs	r4, r6
 8000690:	3b01      	subs	r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f3      	bne.n	800067e <__aeabi_fdiv+0x1a6>
 8000696:	1e6b      	subs	r3, r5, #1
 8000698:	419d      	sbcs	r5, r3
 800069a:	432c      	orrs	r4, r5
 800069c:	e7b3      	b.n	8000606 <__aeabi_fdiv+0x12e>
 800069e:	2301      	movs	r3, #1
 80006a0:	1a1b      	subs	r3, r3, r0
 80006a2:	2b1b      	cmp	r3, #27
 80006a4:	dd00      	ble.n	80006a8 <__aeabi_fdiv+0x1d0>
 80006a6:	e76d      	b.n	8000584 <__aeabi_fdiv+0xac>
 80006a8:	0021      	movs	r1, r4
 80006aa:	379e      	adds	r7, #158	@ 0x9e
 80006ac:	40d9      	lsrs	r1, r3
 80006ae:	40bc      	lsls	r4, r7
 80006b0:	000b      	movs	r3, r1
 80006b2:	1e61      	subs	r1, r4, #1
 80006b4:	418c      	sbcs	r4, r1
 80006b6:	4323      	orrs	r3, r4
 80006b8:	0759      	lsls	r1, r3, #29
 80006ba:	d004      	beq.n	80006c6 <__aeabi_fdiv+0x1ee>
 80006bc:	210f      	movs	r1, #15
 80006be:	4019      	ands	r1, r3
 80006c0:	2904      	cmp	r1, #4
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fdiv+0x1ee>
 80006c4:	3304      	adds	r3, #4
 80006c6:	0159      	lsls	r1, r3, #5
 80006c8:	d413      	bmi.n	80006f2 <__aeabi_fdiv+0x21a>
 80006ca:	019b      	lsls	r3, r3, #6
 80006cc:	2000      	movs	r0, #0
 80006ce:	0a5c      	lsrs	r4, r3, #9
 80006d0:	e75a      	b.n	8000588 <__aeabi_fdiv+0xb0>
 80006d2:	231a      	movs	r3, #26
 80006d4:	2401      	movs	r4, #1
 80006d6:	1a2d      	subs	r5, r5, r0
 80006d8:	e7d0      	b.n	800067c <__aeabi_fdiv+0x1a4>
 80006da:	1e98      	subs	r0, r3, #2
 80006dc:	4243      	negs	r3, r0
 80006de:	4158      	adcs	r0, r3
 80006e0:	4240      	negs	r0, r0
 80006e2:	0032      	movs	r2, r6
 80006e4:	2400      	movs	r4, #0
 80006e6:	b2c0      	uxtb	r0, r0
 80006e8:	e74e      	b.n	8000588 <__aeabi_fdiv+0xb0>
 80006ea:	4642      	mov	r2, r8
 80006ec:	20ff      	movs	r0, #255	@ 0xff
 80006ee:	2400      	movs	r4, #0
 80006f0:	e74a      	b.n	8000588 <__aeabi_fdiv+0xb0>
 80006f2:	2001      	movs	r0, #1
 80006f4:	2400      	movs	r4, #0
 80006f6:	e747      	b.n	8000588 <__aeabi_fdiv+0xb0>
 80006f8:	08007c84 	.word	0x08007c84
 80006fc:	08007cc4 	.word	0x08007cc4
 8000700:	f7ffffff 	.word	0xf7ffffff

08000704 <__aeabi_ui2f>:
 8000704:	b510      	push	{r4, lr}
 8000706:	1e04      	subs	r4, r0, #0
 8000708:	d00d      	beq.n	8000726 <__aeabi_ui2f+0x22>
 800070a:	f000 f841 	bl	8000790 <__clzsi2>
 800070e:	239e      	movs	r3, #158	@ 0x9e
 8000710:	1a1b      	subs	r3, r3, r0
 8000712:	2b96      	cmp	r3, #150	@ 0x96
 8000714:	dc0c      	bgt.n	8000730 <__aeabi_ui2f+0x2c>
 8000716:	2808      	cmp	r0, #8
 8000718:	d034      	beq.n	8000784 <__aeabi_ui2f+0x80>
 800071a:	3808      	subs	r0, #8
 800071c:	4084      	lsls	r4, r0
 800071e:	0264      	lsls	r4, r4, #9
 8000720:	0a64      	lsrs	r4, r4, #9
 8000722:	b2d8      	uxtb	r0, r3
 8000724:	e001      	b.n	800072a <__aeabi_ui2f+0x26>
 8000726:	2000      	movs	r0, #0
 8000728:	2400      	movs	r4, #0
 800072a:	05c0      	lsls	r0, r0, #23
 800072c:	4320      	orrs	r0, r4
 800072e:	bd10      	pop	{r4, pc}
 8000730:	2b99      	cmp	r3, #153	@ 0x99
 8000732:	dc13      	bgt.n	800075c <__aeabi_ui2f+0x58>
 8000734:	1f42      	subs	r2, r0, #5
 8000736:	4094      	lsls	r4, r2
 8000738:	4a14      	ldr	r2, [pc, #80]	@ (800078c <__aeabi_ui2f+0x88>)
 800073a:	4022      	ands	r2, r4
 800073c:	0761      	lsls	r1, r4, #29
 800073e:	d01c      	beq.n	800077a <__aeabi_ui2f+0x76>
 8000740:	210f      	movs	r1, #15
 8000742:	4021      	ands	r1, r4
 8000744:	2904      	cmp	r1, #4
 8000746:	d018      	beq.n	800077a <__aeabi_ui2f+0x76>
 8000748:	3204      	adds	r2, #4
 800074a:	08d4      	lsrs	r4, r2, #3
 800074c:	0152      	lsls	r2, r2, #5
 800074e:	d515      	bpl.n	800077c <__aeabi_ui2f+0x78>
 8000750:	239f      	movs	r3, #159	@ 0x9f
 8000752:	0264      	lsls	r4, r4, #9
 8000754:	1a18      	subs	r0, r3, r0
 8000756:	0a64      	lsrs	r4, r4, #9
 8000758:	b2c0      	uxtb	r0, r0
 800075a:	e7e6      	b.n	800072a <__aeabi_ui2f+0x26>
 800075c:	0002      	movs	r2, r0
 800075e:	0021      	movs	r1, r4
 8000760:	321b      	adds	r2, #27
 8000762:	4091      	lsls	r1, r2
 8000764:	000a      	movs	r2, r1
 8000766:	1e51      	subs	r1, r2, #1
 8000768:	418a      	sbcs	r2, r1
 800076a:	2105      	movs	r1, #5
 800076c:	1a09      	subs	r1, r1, r0
 800076e:	40cc      	lsrs	r4, r1
 8000770:	4314      	orrs	r4, r2
 8000772:	4a06      	ldr	r2, [pc, #24]	@ (800078c <__aeabi_ui2f+0x88>)
 8000774:	4022      	ands	r2, r4
 8000776:	0761      	lsls	r1, r4, #29
 8000778:	d1e2      	bne.n	8000740 <__aeabi_ui2f+0x3c>
 800077a:	08d4      	lsrs	r4, r2, #3
 800077c:	0264      	lsls	r4, r4, #9
 800077e:	0a64      	lsrs	r4, r4, #9
 8000780:	b2d8      	uxtb	r0, r3
 8000782:	e7d2      	b.n	800072a <__aeabi_ui2f+0x26>
 8000784:	0264      	lsls	r4, r4, #9
 8000786:	0a64      	lsrs	r4, r4, #9
 8000788:	308e      	adds	r0, #142	@ 0x8e
 800078a:	e7ce      	b.n	800072a <__aeabi_ui2f+0x26>
 800078c:	fbffffff 	.word	0xfbffffff

08000790 <__clzsi2>:
 8000790:	211c      	movs	r1, #28
 8000792:	2301      	movs	r3, #1
 8000794:	041b      	lsls	r3, r3, #16
 8000796:	4298      	cmp	r0, r3
 8000798:	d301      	bcc.n	800079e <__clzsi2+0xe>
 800079a:	0c00      	lsrs	r0, r0, #16
 800079c:	3910      	subs	r1, #16
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	4298      	cmp	r0, r3
 80007a2:	d301      	bcc.n	80007a8 <__clzsi2+0x18>
 80007a4:	0a00      	lsrs	r0, r0, #8
 80007a6:	3908      	subs	r1, #8
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d301      	bcc.n	80007b2 <__clzsi2+0x22>
 80007ae:	0900      	lsrs	r0, r0, #4
 80007b0:	3904      	subs	r1, #4
 80007b2:	a202      	add	r2, pc, #8	@ (adr r2, 80007bc <__clzsi2+0x2c>)
 80007b4:	5c10      	ldrb	r0, [r2, r0]
 80007b6:	1840      	adds	r0, r0, r1
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	02020304 	.word	0x02020304
 80007c0:	01010101 	.word	0x01010101
	...

080007cc <__clzdi2>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d103      	bne.n	80007da <__clzdi2+0xe>
 80007d2:	f7ff ffdd 	bl	8000790 <__clzsi2>
 80007d6:	3020      	adds	r0, #32
 80007d8:	e002      	b.n	80007e0 <__clzdi2+0x14>
 80007da:	0008      	movs	r0, r1
 80007dc:	f7ff ffd8 	bl	8000790 <__clzsi2>
 80007e0:	bd10      	pop	{r4, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)

080007e4 <__divdi3>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	b5c0      	push	{r6, r7, lr}
 80007ee:	0006      	movs	r6, r0
 80007f0:	000f      	movs	r7, r1
 80007f2:	0010      	movs	r0, r2
 80007f4:	0019      	movs	r1, r3
 80007f6:	b082      	sub	sp, #8
 80007f8:	2f00      	cmp	r7, #0
 80007fa:	db5d      	blt.n	80008b8 <__divdi3+0xd4>
 80007fc:	0034      	movs	r4, r6
 80007fe:	003d      	movs	r5, r7
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0b      	blt.n	800081c <__divdi3+0x38>
 8000804:	0016      	movs	r6, r2
 8000806:	001f      	movs	r7, r3
 8000808:	42ab      	cmp	r3, r5
 800080a:	d917      	bls.n	800083c <__divdi3+0x58>
 800080c:	2000      	movs	r0, #0
 800080e:	2100      	movs	r1, #0
 8000810:	b002      	add	sp, #8
 8000812:	bce0      	pop	{r5, r6, r7}
 8000814:	46ba      	mov	sl, r7
 8000816:	46b1      	mov	r9, r6
 8000818:	46a8      	mov	r8, r5
 800081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081c:	2700      	movs	r7, #0
 800081e:	4246      	negs	r6, r0
 8000820:	418f      	sbcs	r7, r1
 8000822:	42af      	cmp	r7, r5
 8000824:	d8f2      	bhi.n	800080c <__divdi3+0x28>
 8000826:	d100      	bne.n	800082a <__divdi3+0x46>
 8000828:	e0a0      	b.n	800096c <__divdi3+0x188>
 800082a:	2301      	movs	r3, #1
 800082c:	425b      	negs	r3, r3
 800082e:	4699      	mov	r9, r3
 8000830:	e009      	b.n	8000846 <__divdi3+0x62>
 8000832:	2700      	movs	r7, #0
 8000834:	4246      	negs	r6, r0
 8000836:	418f      	sbcs	r7, r1
 8000838:	42af      	cmp	r7, r5
 800083a:	d8e7      	bhi.n	800080c <__divdi3+0x28>
 800083c:	42af      	cmp	r7, r5
 800083e:	d100      	bne.n	8000842 <__divdi3+0x5e>
 8000840:	e090      	b.n	8000964 <__divdi3+0x180>
 8000842:	2300      	movs	r3, #0
 8000844:	4699      	mov	r9, r3
 8000846:	0039      	movs	r1, r7
 8000848:	0030      	movs	r0, r6
 800084a:	f7ff ffbf 	bl	80007cc <__clzdi2>
 800084e:	4680      	mov	r8, r0
 8000850:	0029      	movs	r1, r5
 8000852:	0020      	movs	r0, r4
 8000854:	f7ff ffba 	bl	80007cc <__clzdi2>
 8000858:	4643      	mov	r3, r8
 800085a:	1a1b      	subs	r3, r3, r0
 800085c:	4698      	mov	r8, r3
 800085e:	3b20      	subs	r3, #32
 8000860:	d475      	bmi.n	800094e <__divdi3+0x16a>
 8000862:	0031      	movs	r1, r6
 8000864:	4099      	lsls	r1, r3
 8000866:	469a      	mov	sl, r3
 8000868:	000b      	movs	r3, r1
 800086a:	0031      	movs	r1, r6
 800086c:	4640      	mov	r0, r8
 800086e:	4081      	lsls	r1, r0
 8000870:	000a      	movs	r2, r1
 8000872:	42ab      	cmp	r3, r5
 8000874:	d82e      	bhi.n	80008d4 <__divdi3+0xf0>
 8000876:	d02b      	beq.n	80008d0 <__divdi3+0xec>
 8000878:	4651      	mov	r1, sl
 800087a:	1aa4      	subs	r4, r4, r2
 800087c:	419d      	sbcs	r5, r3
 800087e:	2900      	cmp	r1, #0
 8000880:	da00      	bge.n	8000884 <__divdi3+0xa0>
 8000882:	e090      	b.n	80009a6 <__divdi3+0x1c2>
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	2601      	movs	r6, #1
 800088a:	9000      	str	r0, [sp, #0]
 800088c:	9101      	str	r1, [sp, #4]
 800088e:	4651      	mov	r1, sl
 8000890:	408e      	lsls	r6, r1
 8000892:	9601      	str	r6, [sp, #4]
 8000894:	4641      	mov	r1, r8
 8000896:	2601      	movs	r6, #1
 8000898:	408e      	lsls	r6, r1
 800089a:	4641      	mov	r1, r8
 800089c:	9600      	str	r6, [sp, #0]
 800089e:	2900      	cmp	r1, #0
 80008a0:	d11f      	bne.n	80008e2 <__divdi3+0xfe>
 80008a2:	9800      	ldr	r0, [sp, #0]
 80008a4:	9901      	ldr	r1, [sp, #4]
 80008a6:	464b      	mov	r3, r9
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0b1      	beq.n	8000810 <__divdi3+0x2c>
 80008ac:	0003      	movs	r3, r0
 80008ae:	000c      	movs	r4, r1
 80008b0:	2100      	movs	r1, #0
 80008b2:	4258      	negs	r0, r3
 80008b4:	41a1      	sbcs	r1, r4
 80008b6:	e7ab      	b.n	8000810 <__divdi3+0x2c>
 80008b8:	2500      	movs	r5, #0
 80008ba:	4274      	negs	r4, r6
 80008bc:	41bd      	sbcs	r5, r7
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dbb7      	blt.n	8000832 <__divdi3+0x4e>
 80008c2:	0016      	movs	r6, r2
 80008c4:	001f      	movs	r7, r3
 80008c6:	42ab      	cmp	r3, r5
 80008c8:	d8a0      	bhi.n	800080c <__divdi3+0x28>
 80008ca:	42af      	cmp	r7, r5
 80008cc:	d1ad      	bne.n	800082a <__divdi3+0x46>
 80008ce:	e04d      	b.n	800096c <__divdi3+0x188>
 80008d0:	42a1      	cmp	r1, r4
 80008d2:	d9d1      	bls.n	8000878 <__divdi3+0x94>
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	9000      	str	r0, [sp, #0]
 80008da:	9101      	str	r1, [sp, #4]
 80008dc:	4641      	mov	r1, r8
 80008de:	2900      	cmp	r1, #0
 80008e0:	d0df      	beq.n	80008a2 <__divdi3+0xbe>
 80008e2:	07d9      	lsls	r1, r3, #31
 80008e4:	0856      	lsrs	r6, r2, #1
 80008e6:	085f      	lsrs	r7, r3, #1
 80008e8:	430e      	orrs	r6, r1
 80008ea:	4643      	mov	r3, r8
 80008ec:	e00e      	b.n	800090c <__divdi3+0x128>
 80008ee:	42af      	cmp	r7, r5
 80008f0:	d101      	bne.n	80008f6 <__divdi3+0x112>
 80008f2:	42a6      	cmp	r6, r4
 80008f4:	d80c      	bhi.n	8000910 <__divdi3+0x12c>
 80008f6:	1ba4      	subs	r4, r4, r6
 80008f8:	41bd      	sbcs	r5, r7
 80008fa:	2101      	movs	r1, #1
 80008fc:	1924      	adds	r4, r4, r4
 80008fe:	416d      	adcs	r5, r5
 8000900:	2200      	movs	r2, #0
 8000902:	3b01      	subs	r3, #1
 8000904:	1864      	adds	r4, r4, r1
 8000906:	4155      	adcs	r5, r2
 8000908:	2b00      	cmp	r3, #0
 800090a:	d006      	beq.n	800091a <__divdi3+0x136>
 800090c:	42af      	cmp	r7, r5
 800090e:	d9ee      	bls.n	80008ee <__divdi3+0x10a>
 8000910:	3b01      	subs	r3, #1
 8000912:	1924      	adds	r4, r4, r4
 8000914:	416d      	adcs	r5, r5
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f8      	bne.n	800090c <__divdi3+0x128>
 800091a:	9a00      	ldr	r2, [sp, #0]
 800091c:	9b01      	ldr	r3, [sp, #4]
 800091e:	4651      	mov	r1, sl
 8000920:	1912      	adds	r2, r2, r4
 8000922:	416b      	adcs	r3, r5
 8000924:	2900      	cmp	r1, #0
 8000926:	db25      	blt.n	8000974 <__divdi3+0x190>
 8000928:	002e      	movs	r6, r5
 800092a:	002c      	movs	r4, r5
 800092c:	40ce      	lsrs	r6, r1
 800092e:	4641      	mov	r1, r8
 8000930:	40cc      	lsrs	r4, r1
 8000932:	4651      	mov	r1, sl
 8000934:	2900      	cmp	r1, #0
 8000936:	db2d      	blt.n	8000994 <__divdi3+0x1b0>
 8000938:	0034      	movs	r4, r6
 800093a:	408c      	lsls	r4, r1
 800093c:	0021      	movs	r1, r4
 800093e:	4644      	mov	r4, r8
 8000940:	40a6      	lsls	r6, r4
 8000942:	0030      	movs	r0, r6
 8000944:	1a12      	subs	r2, r2, r0
 8000946:	418b      	sbcs	r3, r1
 8000948:	9200      	str	r2, [sp, #0]
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	e7a9      	b.n	80008a2 <__divdi3+0xbe>
 800094e:	4642      	mov	r2, r8
 8000950:	0038      	movs	r0, r7
 8000952:	469a      	mov	sl, r3
 8000954:	2320      	movs	r3, #32
 8000956:	0031      	movs	r1, r6
 8000958:	4090      	lsls	r0, r2
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	40d9      	lsrs	r1, r3
 800095e:	0003      	movs	r3, r0
 8000960:	430b      	orrs	r3, r1
 8000962:	e782      	b.n	800086a <__divdi3+0x86>
 8000964:	42a6      	cmp	r6, r4
 8000966:	d900      	bls.n	800096a <__divdi3+0x186>
 8000968:	e750      	b.n	800080c <__divdi3+0x28>
 800096a:	e76a      	b.n	8000842 <__divdi3+0x5e>
 800096c:	42a6      	cmp	r6, r4
 800096e:	d800      	bhi.n	8000972 <__divdi3+0x18e>
 8000970:	e75b      	b.n	800082a <__divdi3+0x46>
 8000972:	e74b      	b.n	800080c <__divdi3+0x28>
 8000974:	4640      	mov	r0, r8
 8000976:	2120      	movs	r1, #32
 8000978:	1a09      	subs	r1, r1, r0
 800097a:	0028      	movs	r0, r5
 800097c:	4088      	lsls	r0, r1
 800097e:	0026      	movs	r6, r4
 8000980:	0001      	movs	r1, r0
 8000982:	4640      	mov	r0, r8
 8000984:	40c6      	lsrs	r6, r0
 8000986:	002c      	movs	r4, r5
 8000988:	430e      	orrs	r6, r1
 800098a:	4641      	mov	r1, r8
 800098c:	40cc      	lsrs	r4, r1
 800098e:	4651      	mov	r1, sl
 8000990:	2900      	cmp	r1, #0
 8000992:	dad1      	bge.n	8000938 <__divdi3+0x154>
 8000994:	4640      	mov	r0, r8
 8000996:	2120      	movs	r1, #32
 8000998:	0035      	movs	r5, r6
 800099a:	4084      	lsls	r4, r0
 800099c:	1a09      	subs	r1, r1, r0
 800099e:	40cd      	lsrs	r5, r1
 80009a0:	0021      	movs	r1, r4
 80009a2:	4329      	orrs	r1, r5
 80009a4:	e7cb      	b.n	800093e <__divdi3+0x15a>
 80009a6:	4641      	mov	r1, r8
 80009a8:	2620      	movs	r6, #32
 80009aa:	2701      	movs	r7, #1
 80009ac:	1a76      	subs	r6, r6, r1
 80009ae:	2000      	movs	r0, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	40f7      	lsrs	r7, r6
 80009b4:	9000      	str	r0, [sp, #0]
 80009b6:	9101      	str	r1, [sp, #4]
 80009b8:	9701      	str	r7, [sp, #4]
 80009ba:	e76b      	b.n	8000894 <__divdi3+0xb0>

080009bc <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	0018      	movs	r0, r3
 80009c6:	230c      	movs	r3, #12
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f007 f917 	bl	8007bfe <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009d0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009d2:	4a40      	ldr	r2, [pc, #256]	@ (8000ad4 <MX_ADC_Init+0x118>)
 80009d4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009dc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009e8:	4b39      	ldr	r3, [pc, #228]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ee:	4b38      	ldr	r3, [pc, #224]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009f4:	4b36      	ldr	r3, [pc, #216]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009fa:	4b35      	ldr	r3, [pc, #212]	@ (8000ad0 <MX_ADC_Init+0x114>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000a00:	4b33      	ldr	r3, [pc, #204]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b32      	ldr	r3, [pc, #200]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a0e:	22c2      	movs	r2, #194	@ 0xc2
 8000a10:	32ff      	adds	r2, #255	@ 0xff
 8000a12:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a1c:	2224      	movs	r2, #36	@ 0x24
 8000a1e:	2101      	movs	r1, #1
 8000a20:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f002 fae6 	bl	8002ffc <HAL_ADC_Init>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f001 fee4 	bl	8002800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	0152      	lsls	r2, r2, #5
 8000a44:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2207      	movs	r2, #7
 8000a4a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a4c:	1d3a      	adds	r2, r7, #4
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fd22 	bl	800349c <HAL_ADC_ConfigChannel>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000a5c:	f001 fed0 	bl	8002800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a66:	1d3a      	adds	r2, r7, #4
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 fd15 	bl	800349c <HAL_ADC_ConfigChannel>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000a76:	f001 fec3 	bl	8002800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a80:	1d3a      	adds	r2, r7, #4
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fd08 	bl	800349c <HAL_ADC_ConfigChannel>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000a90:	f001 feb6 	bl	8002800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2204      	movs	r2, #4
 8000a98:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a9a:	1d3a      	adds	r2, r7, #4
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 fcfb 	bl	800349c <HAL_ADC_ConfigChannel>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000aaa:	f001 fea9 	bl	8002800 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2211      	movs	r2, #17
 8000ab2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ab4:	1d3a      	adds	r2, r7, #4
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_ADC_Init+0x114>)
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 fcee 	bl	800349c <HAL_ADC_ConfigChannel>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000ac4:	f001 fe9c 	bl	8002800 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000034 	.word	0x20000034
 8000ad4:	40012400 	.word	0x40012400

08000ad8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b08b      	sub	sp, #44	@ 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	2414      	movs	r4, #20
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f007 f887 	bl	8007bfe <memset>
  if(adcHandle->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <HAL_ADC_MspInit+0xd4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d153      	bne.n	8000ba2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0089      	lsls	r1, r1, #2
 8000b04:	430a      	orrs	r2, r1
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000b0a:	699a      	ldr	r2, [r3, #24]
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	0289      	lsls	r1, r1, #10
 8000b20:	430a      	orrs	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	029b      	lsls	r3, r3, #10
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	221b      	movs	r2, #27
 8000b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	193a      	adds	r2, r7, r4
 8000b46:	2390      	movs	r3, #144	@ 0x90
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f003 fb15 	bl	800417c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b56:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b66:	2280      	movs	r2, #128	@ 0x80
 8000b68:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	0052      	lsls	r2, r2, #1
 8000b70:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	00d2      	lsls	r2, r2, #3
 8000b78:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 f8e1 	bl	8003d50 <HAL_DMA_Init>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b92:	f001 fe35 	bl	8002800 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b00b      	add	sp, #44	@ 0x2c
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40012400 	.word	0x40012400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	20000074 	.word	0x20000074
 8000bb8:	40020008 	.word	0x40020008

08000bbc <on_tx_done>:
volatile uint32_t g_frame_count = 0;  // <-- add this line here (global, not static)

//TX Buffer and State
static uint8_t tx_buf[TX_MAX_SIZE];
static volatile uint8_t tx_busy = 0;
static void on_tx_done(void){ tx_busy = 0; }
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <on_tx_done+0x10>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200003c8 	.word	0x200003c8

08000bd0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){ if (huart==g_huart) on_tx_done(); }
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_UART_TxCpltCallback+0x20>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d101      	bne.n	8000be6 <HAL_UART_TxCpltCallback+0x16>
 8000be2:	f7ff ffeb 	bl	8000bbc <on_tx_done>
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	200000b8 	.word	0x200000b8

08000bf4 <put_u16le>:


/*** tiny helpers ***/

// --- little-endian writers ---
static void put_u16le(uint8_t *p, uint16_t v){ p[0]=(uint8_t)v; p[1]=(uint8_t)(v>>8); }
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	1cbb      	adds	r3, r7, #2
 8000c00:	801a      	strh	r2, [r3, #0]
 8000c02:	1cbb      	adds	r3, r7, #2
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	1cbb      	adds	r3, r7, #2
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <put_u32le>:
static void put_u32le(uint8_t *p, uint32_t v){ p[0]=v; p[1]=v>>8; p[2]=v>>16; p[3]=v>>24; }
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	0a1a      	lsrs	r2, r3, #8
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	0c1a      	lsrs	r2, r3, #16
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	0e1a      	lsrs	r2, r3, #24
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3303      	adds	r3, #3
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <tlv_put_u32>:

// --- tiny TLV writer, used for ping payload ---
uint8_t* tlv_put_u32(uint8_t *w, uint8_t type, uint32_t v){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	200b      	movs	r0, #11
 8000c6e:	183b      	adds	r3, r7, r0
 8000c70:	1c0a      	adds	r2, r1, #0
 8000c72:	701a      	strb	r2, [r3, #0]
    *w++ = type; *w++ = 4; *w++ = 0;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60fa      	str	r2, [r7, #12]
 8000c7a:	183a      	adds	r2, r7, r0
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60fa      	str	r2, [r7, #12]
 8000c86:	2204      	movs	r2, #4
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60fa      	str	r2, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)v; *w++ = (uint8_t)(v>>8); *w++ = (uint8_t)(v>>16); *w++ = (uint8_t)(v>>24);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60fa      	str	r2, [r7, #12]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	0a19      	lsrs	r1, r3, #8
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60fa      	str	r2, [r7, #12]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0c19      	lsrs	r1, r3, #16
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60fa      	str	r2, [r7, #12]
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	0e19      	lsrs	r1, r3, #24
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60fa      	str	r2, [r7, #12]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
    return w;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <tlv_put_i32>:

uint8_t* tlv_put_i32(uint8_t *w, uint8_t type, int32_t v){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	200b      	movs	r0, #11
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	1c0a      	adds	r2, r1, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    *w++ = type; *w++ = 4; *w++ = 0;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	183a      	adds	r2, r7, r0
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60fa      	str	r2, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v      );
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	60fa      	str	r2, [r7, #12]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >>  8);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1219      	asrs	r1, r3, #8
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	60fa      	str	r2, [r7, #12]
 8000d1c:	b2ca      	uxtb	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 16);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1419      	asrs	r1, r3, #16
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 24);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	1619      	asrs	r1, r3, #24
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	60fa      	str	r2, [r7, #12]
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
    return w;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <crc32c>:

// --- CRC-32C (Castagnoli), small bitwise version ---
static uint32_t crc32c(const uint8_t *p, size_t n){
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFFu;
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	60fb      	str	r3, [r7, #12]
    while(n--){
 8000d56:	e028      	b.n	8000daa <crc32c+0x64>
        crc ^= *p++;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	001a      	movs	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4053      	eors	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
        for(int k=0;k<8;k++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	e01a      	b.n	8000da4 <crc32c+0x5e>
            crc = (crc>>1) ^ (0x82F63B78u & (-(int)(crc & 1)));
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	0858      	lsrs	r0, r3, #1
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	000b      	movs	r3, r1
 8000d7c:	025b      	lsls	r3, r3, #9
 8000d7e:	1a5b      	subs	r3, r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	009a      	lsls	r2, r3, #2
 8000d86:	189b      	adds	r3, r3, r2
 8000d88:	00da      	lsls	r2, r3, #3
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	1852      	adds	r2, r2, r1
 8000d90:	0152      	lsls	r2, r2, #5
 8000d92:	1852      	adds	r2, r2, r1
 8000d94:	0113      	lsls	r3, r2, #4
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4043      	eors	r3, r0
 8000d9c:	60fb      	str	r3, [r7, #12]
        for(int k=0;k<8;k++)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b07      	cmp	r3, #7
 8000da8:	dde1      	ble.n	8000d6e <crc32c+0x28>
    while(n--){
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	1e5a      	subs	r2, r3, #1
 8000dae:	603a      	str	r2, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1d1      	bne.n	8000d58 <crc32c+0x12>
    }
    return ~crc;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b004      	add	sp, #16
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <dma_head_now>:

// 1) ask the DMA "head" position (where it has written up to)
//    NDTR = remaining transfers; head = (size - NDTR) modulo size
static inline uint16_t dma_head_now(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
    uint16_t remaining = __HAL_DMA_GET_COUNTER(g_huart->hdmarx);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <dma_head_now+0x30>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	801a      	strh	r2, [r3, #0]
    return (uint16_t)((RX_DMA_SIZE - remaining) & (RX_DMA_SIZE - 1));
 8000dd4:	1dbb      	adds	r3, r7, #6
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	0ddb      	lsrs	r3, r3, #23
 8000de4:	b29b      	uxth	r3, r3
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	200000b8 	.word	0x200000b8

08000df4 <circ_peek>:

// 2) read one byte from the circular buffer at index 'idx' (no consume)
static inline uint8_t circ_peek(uint16_t idx){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	801a      	strh	r2, [r3, #0]
    return rx_dma_buf[idx % RX_DMA_SIZE];
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	05db      	lsls	r3, r3, #23
 8000e06:	0ddb      	lsrs	r3, r3, #23
 8000e08:	4a02      	ldr	r2, [pc, #8]	@ (8000e14 <circ_peek+0x20>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b002      	add	sp, #8
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000bc 	.word	0x200000bc

08000e18 <circ_read>:

// copy N bytes from circular buffer at idx into linear dst
static void circ_read(uint16_t idx, uint8_t *dst, uint16_t n){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6039      	str	r1, [r7, #0]
 8000e20:	0011      	movs	r1, r2
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	1c02      	adds	r2, r0, #0
 8000e26:	801a      	strh	r2, [r3, #0]
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	1c0a      	adds	r2, r1, #0
 8000e2c:	801a      	strh	r2, [r3, #0]
    while (n--) { *dst++ = rx_dma_buf[idx++ % RX_DMA_SIZE]; }
 8000e2e:	e00c      	b.n	8000e4a <circ_read+0x32>
 8000e30:	1dbb      	adds	r3, r7, #6
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	1dba      	adds	r2, r7, #6
 8000e36:	1c59      	adds	r1, r3, #1
 8000e38:	8011      	strh	r1, [r2, #0]
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	0dda      	lsrs	r2, r3, #23
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	1c59      	adds	r1, r3, #1
 8000e42:	6039      	str	r1, [r7, #0]
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <circ_read+0x4c>)
 8000e46:	5c8a      	ldrb	r2, [r1, r2]
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	1d3a      	adds	r2, r7, #4
 8000e50:	1e59      	subs	r1, r3, #1
 8000e52:	8011      	strh	r1, [r2, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1eb      	bne.n	8000e30 <circ_read+0x18>
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	200000bc 	.word	0x200000bc

08000e68 <have_bytes>:

// how many bytes are available from 'from' to current head (modulo)
static int have_bytes(uint16_t from, uint16_t need){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	1dbb      	adds	r3, r7, #6
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	1c0a      	adds	r2, r1, #0
 8000e78:	801a      	strh	r2, [r3, #0]
    int32_t avail = (int32_t)((rx_dma_head - from + RX_DMA_SIZE) % RX_DMA_SIZE);
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <have_bytes+0x54>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	001a      	movs	r2, r3
 8000e82:	1dbb      	adds	r3, r7, #6
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2280      	movs	r2, #128	@ 0x80
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	4463      	add	r3, ip
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <have_bytes+0x58>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	d503      	bpl.n	8000e9e <have_bytes+0x36>
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <have_bytes+0x5c>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
    return (avail >= (int32_t)need);
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	17d0      	asrs	r0, r2, #31
 8000ea8:	0fd9      	lsrs	r1, r3, #31
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	4148      	adcs	r0, r1
 8000eae:	0003      	movs	r3, r0
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	200002bc 	.word	0x200002bc
 8000ec0:	800001ff 	.word	0x800001ff
 8000ec4:	fffffe00 	.word	0xfffffe00

08000ec8 <read_u16le_circ>:

// read little-endian u16 at circular position
static uint16_t read_u16le_circ(uint16_t idx){
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1dbb      	adds	r3, r7, #6
 8000ed2:	801a      	strh	r2, [r3, #0]
    uint8_t b0 = circ_peek(idx);
 8000ed4:	250f      	movs	r5, #15
 8000ed6:	197c      	adds	r4, r7, r5
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff89 	bl	8000df4 <circ_peek>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	7023      	strb	r3, [r4, #0]
    uint8_t b1 = circ_peek((uint16_t)(idx+1));
 8000ee6:	1dbb      	adds	r3, r7, #6
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	260e      	movs	r6, #14
 8000ef0:	19bc      	adds	r4, r7, r6
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff ff7e 	bl	8000df4 <circ_peek>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	7023      	strb	r3, [r4, #0]
    return (uint16_t)(b0 | ((uint16_t)b1<<8));
 8000efc:	197b      	adds	r3, r7, r5
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	19bb      	adds	r3, r7, r6
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	b29b      	uxth	r3, r3
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b005      	add	sp, #20
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f1a <tlv_find_u32>:
    }
    return 0;
}

int tlv_find_u32(const uint8_t *p, uint16_t len, uint8_t want_type, uint32_t *out)
{
 8000f1a:	b5b0      	push	{r4, r5, r7, lr}
 8000f1c:	b088      	sub	sp, #32
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	0008      	movs	r0, r1
 8000f24:	0011      	movs	r1, r2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	230a      	movs	r3, #10
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	1c02      	adds	r2, r0, #0
 8000f2e:	801a      	strh	r2, [r3, #0]
 8000f30:	2309      	movs	r3, #9
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	1c0a      	adds	r2, r1, #0
 8000f36:	701a      	strb	r2, [r3, #0]
    uint16_t i = 0;
 8000f38:	231e      	movs	r3, #30
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
    while (i + 3 <= len) {
 8000f40:	e05c      	b.n	8000ffc <tlv_find_u32+0xe2>
        uint8_t t = p[i];
 8000f42:	201e      	movs	r0, #30
 8000f44:	183b      	adds	r3, r7, r0
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	18d2      	adds	r2, r2, r3
 8000f4c:	251d      	movs	r5, #29
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
        uint16_t L = (uint16_t)(p[i+1] | (p[i+2] << 8));
 8000f54:	183b      	adds	r3, r7, r0
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	183b      	adds	r3, r7, r0
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	3302      	adds	r3, #2
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	18cb      	adds	r3, r1, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	241a      	movs	r4, #26
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	801a      	strh	r2, [r3, #0]
        i += 3;
 8000f7e:	0001      	movs	r1, r0
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	187a      	adds	r2, r7, r1
 8000f84:	8812      	ldrh	r2, [r2, #0]
 8000f86:	3203      	adds	r2, #3
 8000f88:	801a      	strh	r2, [r3, #0]
        if (i + L > len) break;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	881a      	ldrh	r2, [r3, #0]
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	18d2      	adds	r2, r2, r3
 8000f94:	230a      	movs	r3, #10
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dc38      	bgt.n	8001010 <tlv_find_u32+0xf6>
        if (t == want_type && L == 4) {
 8000f9e:	197a      	adds	r2, r7, r5
 8000fa0:	2309      	movs	r3, #9
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d11e      	bne.n	8000fea <tlv_find_u32+0xd0>
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d11a      	bne.n	8000fea <tlv_find_u32+0xd0>
            const uint8_t *v = &p[i];
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	18d3      	adds	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
            *out = (uint32_t)v[0] | ((uint32_t)v[1] << 8) | ((uint32_t)v[2] << 16) | ((uint32_t)v[3] << 24);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3303      	adds	r3, #3
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	061b      	lsls	r3, r3, #24
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
            return 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e014      	b.n	8001014 <tlv_find_u32+0xfa>
        }
        i += L;
 8000fea:	221e      	movs	r2, #30
 8000fec:	18bb      	adds	r3, r7, r2
 8000fee:	18b9      	adds	r1, r7, r2
 8000ff0:	221a      	movs	r2, #26
 8000ff2:	18ba      	adds	r2, r7, r2
 8000ff4:	8809      	ldrh	r1, [r1, #0]
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	188a      	adds	r2, r1, r2
 8000ffa:	801a      	strh	r2, [r3, #0]
    while (i + 3 <= len) {
 8000ffc:	231e      	movs	r3, #30
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	1c9a      	adds	r2, r3, #2
 8001004:	230a      	movs	r3, #10
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	db99      	blt.n	8000f42 <tlv_find_u32+0x28>
 800100e:	e000      	b.n	8001012 <tlv_find_u32+0xf8>
        if (i + L > len) break;
 8001010:	46c0      	nop			@ (mov r8, r8)
    }
    return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b008      	add	sp, #32
 800101a:	bdb0      	pop	{r4, r5, r7, pc}

0800101c <tlv_put_u64>:

uint8_t* tlv_put_u64(uint8_t *w, uint8_t type, uint64_t v){
 800101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101e:	b091      	sub	sp, #68	@ 0x44
 8001020:	af00      	add	r7, sp, #0
 8001022:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001024:	633a      	str	r2, [r7, #48]	@ 0x30
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
 8001028:	200b      	movs	r0, #11
 800102a:	2630      	movs	r6, #48	@ 0x30
 800102c:	1983      	adds	r3, r0, r6
 800102e:	19da      	adds	r2, r3, r7
 8001030:	1c0b      	adds	r3, r1, #0
 8001032:	7013      	strb	r3, [r2, #0]
    *w++ = type; *w++ = 8; *w++ = 0;
 8001034:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001036:	1c53      	adds	r3, r2, #1
 8001038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800103a:	1983      	adds	r3, r0, r6
 800103c:	19db      	adds	r3, r3, r7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	7013      	strb	r3, [r2, #0]
 8001042:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001044:	1c53      	adds	r3, r2, #1
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001048:	2308      	movs	r3, #8
 800104a:	7013      	strb	r3, [r2, #0]
 800104c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800104e:	1c53      	adds	r3, r2, #1
 8001050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001052:	2300      	movs	r3, #0
 8001054:	7013      	strb	r3, [r2, #0]
    // little-endian
    *w++ = (uint8_t)(v      );
 8001056:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001058:	1c4b      	adds	r3, r1, #1
 800105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800105c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800105e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001060:	1c13      	adds	r3, r2, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	700b      	strb	r3, [r1, #0]
    *w++ = (uint8_t)(v >>  8);
 8001066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001068:	061a      	lsls	r2, r3, #24
 800106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800106c:	0a1c      	lsrs	r4, r3, #8
 800106e:	4314      	orrs	r4, r2
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	0a1d      	lsrs	r5, r3, #8
 8001074:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001076:	1c53      	adds	r3, r2, #1
 8001078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800107a:	b2e3      	uxtb	r3, r4
 800107c:	7013      	strb	r3, [r2, #0]
    *w++ = (uint8_t)(v >> 16);
 800107e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108a:	4313      	orrs	r3, r2
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800108e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800109a:	2228      	movs	r2, #40	@ 0x28
 800109c:	18ba      	adds	r2, r7, r2
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 24);
 80010a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010a8:	0e12      	lsrs	r2, r2, #24
 80010aa:	623a      	str	r2, [r7, #32]
 80010ac:	6a3a      	ldr	r2, [r7, #32]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	623a      	str	r2, [r7, #32]
 80010b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b4:	0e1b      	lsrs	r3, r3, #24
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80010be:	2220      	movs	r2, #32
 80010c0:	18ba      	adds	r2, r7, r2
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 32);
 80010c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c8:	001b      	movs	r3, r3
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80010d6:	7e3a      	ldrb	r2, [r7, #24]
 80010d8:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 40);
 80010da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80010ea:	7c3a      	ldrb	r2, [r7, #16]
 80010ec:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 48);
 80010ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80010fe:	7a3a      	ldrb	r2, [r7, #8]
 8001100:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 56);
 8001102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001104:	0e1b      	lsrs	r3, r3, #24
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001112:	783a      	ldrb	r2, [r7, #0]
 8001114:	701a      	strb	r2, [r3, #0]
    return w;
 8001116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b011      	add	sp, #68	@ 0x44
 800111e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001120 <tlv_find_u64>:

int tlv_find_u64(const uint8_t *p, uint16_t len, uint8_t want_type, uint64_t *out)
{
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b0b3      	sub	sp, #204	@ 0xcc
 8001124:	af00      	add	r7, sp, #0
 8001126:	26ac      	movs	r6, #172	@ 0xac
 8001128:	19be      	adds	r6, r7, r6
 800112a:	6030      	str	r0, [r6, #0]
 800112c:	0010      	movs	r0, r2
 800112e:	22a4      	movs	r2, #164	@ 0xa4
 8001130:	18ba      	adds	r2, r7, r2
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	230a      	movs	r3, #10
 8001136:	26a0      	movs	r6, #160	@ 0xa0
 8001138:	199b      	adds	r3, r3, r6
 800113a:	19da      	adds	r2, r3, r7
 800113c:	1c0b      	adds	r3, r1, #0
 800113e:	8013      	strh	r3, [r2, #0]
 8001140:	2309      	movs	r3, #9
 8001142:	0031      	movs	r1, r6
 8001144:	185b      	adds	r3, r3, r1
 8001146:	19da      	adds	r2, r3, r7
 8001148:	1c03      	adds	r3, r0, #0
 800114a:	7013      	strb	r3, [r2, #0]
    uint16_t i = 0;
 800114c:	2326      	movs	r3, #38	@ 0x26
 800114e:	185b      	adds	r3, r3, r1
 8001150:	19da      	adds	r2, r3, r7
 8001152:	2300      	movs	r3, #0
 8001154:	8013      	strh	r3, [r2, #0]
    while (i + 3 <= len) {
 8001156:	e141      	b.n	80013dc <tlv_find_u64+0x2bc>
        uint8_t t = p[i];
 8001158:	2026      	movs	r0, #38	@ 0x26
 800115a:	26a0      	movs	r6, #160	@ 0xa0
 800115c:	1983      	adds	r3, r0, r6
 800115e:	19db      	adds	r3, r3, r7
 8001160:	881a      	ldrh	r2, [r3, #0]
 8001162:	21ac      	movs	r1, #172	@ 0xac
 8001164:	187b      	adds	r3, r7, r1
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	189b      	adds	r3, r3, r2
 800116a:	2225      	movs	r2, #37	@ 0x25
 800116c:	1992      	adds	r2, r2, r6
 800116e:	19d2      	adds	r2, r2, r7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	7013      	strb	r3, [r2, #0]
        uint16_t L = (uint16_t)(p[i+1] | (p[i+2] << 8));
 8001174:	1983      	adds	r3, r0, r6
 8001176:	19db      	adds	r3, r3, r7
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	187b      	adds	r3, r7, r1
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	189b      	adds	r3, r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b219      	sxth	r1, r3
 8001186:	1983      	adds	r3, r0, r6
 8001188:	19db      	adds	r3, r3, r7
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	1c9a      	adds	r2, r3, #2
 800118e:	23ac      	movs	r3, #172	@ 0xac
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	189b      	adds	r3, r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b21b      	sxth	r3, r3
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21b      	sxth	r3, r3
 800119e:	430b      	orrs	r3, r1
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	2622      	movs	r6, #34	@ 0x22
 80011a4:	22a0      	movs	r2, #160	@ 0xa0
 80011a6:	18b2      	adds	r2, r6, r2
 80011a8:	19d2      	adds	r2, r2, r7
 80011aa:	8013      	strh	r3, [r2, #0]
        i += 3;
 80011ac:	0001      	movs	r1, r0
 80011ae:	20a0      	movs	r0, #160	@ 0xa0
 80011b0:	180a      	adds	r2, r1, r0
 80011b2:	19d2      	adds	r2, r2, r7
 80011b4:	180b      	adds	r3, r1, r0
 80011b6:	19db      	adds	r3, r3, r7
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	3303      	adds	r3, #3
 80011bc:	8013      	strh	r3, [r2, #0]
        if (i + L > len) break;
 80011be:	180a      	adds	r2, r1, r0
 80011c0:	19d3      	adds	r3, r2, r7
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	1833      	adds	r3, r6, r0
 80011c6:	19db      	adds	r3, r3, r7
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	18d2      	adds	r2, r2, r3
 80011cc:	230a      	movs	r3, #10
 80011ce:	181b      	adds	r3, r3, r0
 80011d0:	19db      	adds	r3, r3, r7
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dd00      	ble.n	80011da <tlv_find_u64+0xba>
 80011d8:	e10e      	b.n	80013f8 <tlv_find_u64+0x2d8>
        if (t == want_type && L == 8) {
 80011da:	2225      	movs	r2, #37	@ 0x25
 80011dc:	1812      	adds	r2, r2, r0
 80011de:	19d2      	adds	r2, r2, r7
 80011e0:	2309      	movs	r3, #9
 80011e2:	181b      	adds	r3, r3, r0
 80011e4:	19db      	adds	r3, r3, r7
 80011e6:	7812      	ldrb	r2, [r2, #0]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d000      	beq.n	80011f0 <tlv_find_u64+0xd0>
 80011ee:	e0e7      	b.n	80013c0 <tlv_find_u64+0x2a0>
 80011f0:	0002      	movs	r2, r0
 80011f2:	18b0      	adds	r0, r6, r2
 80011f4:	19c3      	adds	r3, r0, r7
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d000      	beq.n	80011fe <tlv_find_u64+0xde>
 80011fc:	e0e0      	b.n	80013c0 <tlv_find_u64+0x2a0>
            const uint8_t *v = &p[i];
 80011fe:	188a      	adds	r2, r1, r2
 8001200:	19d3      	adds	r3, r2, r7
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	21ac      	movs	r1, #172	@ 0xac
 8001206:	187b      	adds	r3, r7, r1
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	189b      	adds	r3, r3, r2
 800120c:	26bc      	movs	r6, #188	@ 0xbc
 800120e:	19ba      	adds	r2, r7, r6
 8001210:	6013      	str	r3, [r2, #0]
            uint64_t x =  ((uint64_t)v[0])        |
 8001212:	19bb      	adds	r3, r7, r6
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2290      	movs	r2, #144	@ 0x90
 800121a:	18b9      	adds	r1, r7, r2
 800121c:	600b      	str	r3, [r1, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	2194      	movs	r1, #148	@ 0x94
 8001222:	1879      	adds	r1, r7, r1
 8001224:	600b      	str	r3, [r1, #0]
                         (((uint64_t)v[1]) <<  8) |
 8001226:	19b9      	adds	r1, r7, r6
 8001228:	680b      	ldr	r3, [r1, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2288      	movs	r2, #136	@ 0x88
 8001230:	18b9      	adds	r1, r7, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	218c      	movs	r1, #140	@ 0x8c
 8001238:	1879      	adds	r1, r7, r1
 800123a:	600b      	str	r3, [r1, #0]
 800123c:	18b9      	adds	r1, r7, r2
 800123e:	684a      	ldr	r2, [r1, #4]
 8001240:	6809      	ldr	r1, [r1, #0]
 8001242:	000b      	movs	r3, r1
 8001244:	0e1b      	lsrs	r3, r3, #24
 8001246:	0010      	movs	r0, r2
 8001248:	0205      	lsls	r5, r0, #8
 800124a:	431d      	orrs	r5, r3
 800124c:	000b      	movs	r3, r1
 800124e:	021c      	lsls	r4, r3, #8
            uint64_t x =  ((uint64_t)v[0])        |
 8001250:	2390      	movs	r3, #144	@ 0x90
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	0011      	movs	r1, r2
 800125a:	4321      	orrs	r1, r4
 800125c:	2080      	movs	r0, #128	@ 0x80
 800125e:	1838      	adds	r0, r7, r0
 8001260:	6001      	str	r1, [r0, #0]
 8001262:	432b      	orrs	r3, r5
 8001264:	2284      	movs	r2, #132	@ 0x84
 8001266:	18ba      	adds	r2, r7, r2
 8001268:	6013      	str	r3, [r2, #0]
                         (((uint64_t)v[2]) << 16) |
 800126a:	19ba      	adds	r2, r7, r6
 800126c:	6813      	ldr	r3, [r2, #0]
 800126e:	3302      	adds	r3, #2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001274:	2300      	movs	r3, #0
 8001276:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001278:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800127a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800127c:	000b      	movs	r3, r1
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	0010      	movs	r0, r2
 8001282:	0400      	lsls	r0, r0, #16
 8001284:	249c      	movs	r4, #156	@ 0x9c
 8001286:	193d      	adds	r5, r7, r4
 8001288:	6028      	str	r0, [r5, #0]
 800128a:	193d      	adds	r5, r7, r4
 800128c:	6828      	ldr	r0, [r5, #0]
 800128e:	4318      	orrs	r0, r3
 8001290:	193c      	adds	r4, r7, r4
 8001292:	6020      	str	r0, [r4, #0]
 8001294:	000b      	movs	r3, r1
 8001296:	041b      	lsls	r3, r3, #16
 8001298:	2498      	movs	r4, #152	@ 0x98
 800129a:	193a      	adds	r2, r7, r4
 800129c:	6013      	str	r3, [r2, #0]
                         (((uint64_t)v[1]) <<  8) |
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	0008      	movs	r0, r1
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	685c      	ldr	r4, [r3, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	001d      	movs	r5, r3
 80012b0:	4328      	orrs	r0, r5
 80012b2:	6738      	str	r0, [r7, #112]	@ 0x70
 80012b4:	0023      	movs	r3, r4
 80012b6:	431a      	orrs	r2, r3
 80012b8:	677a      	str	r2, [r7, #116]	@ 0x74
                         (((uint64_t)v[3]) << 24) |
 80012ba:	19bb      	adds	r3, r7, r6
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3303      	adds	r3, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012c4:	2300      	movs	r3, #0
 80012c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012ca:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 80012cc:	001a      	movs	r2, r3
 80012ce:	0a12      	lsrs	r2, r2, #8
 80012d0:	667a      	str	r2, [r7, #100]	@ 0x64
 80012d2:	061b      	lsls	r3, r3, #24
 80012d4:	663b      	str	r3, [r7, #96]	@ 0x60
                         (((uint64_t)v[2]) << 16) |
 80012d6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80012d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80012da:	0008      	movs	r0, r1
 80012dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012de:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 80012e0:	001d      	movs	r5, r3
 80012e2:	4328      	orrs	r0, r5
 80012e4:	65b8      	str	r0, [r7, #88]	@ 0x58
 80012e6:	0023      	movs	r3, r4
 80012e8:	431a      	orrs	r2, r3
 80012ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
                         (((uint64_t)v[4]) << 32) |
 80012ec:	19bb      	adds	r3, r7, r6
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80012f6:	2300      	movs	r3, #0
 80012f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80012fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012fc:	001b      	movs	r3, r3
 80012fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001300:	2300      	movs	r3, #0
 8001302:	64bb      	str	r3, [r7, #72]	@ 0x48
                         (((uint64_t)v[3]) << 24) |
 8001304:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001306:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001308:	0008      	movs	r0, r1
 800130a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800130c:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800130e:	001d      	movs	r5, r3
 8001310:	4328      	orrs	r0, r5
 8001312:	6438      	str	r0, [r7, #64]	@ 0x40
 8001314:	0023      	movs	r3, r4
 8001316:	431a      	orrs	r2, r3
 8001318:	647a      	str	r2, [r7, #68]	@ 0x44
                         (((uint64_t)v[5]) << 40) |
 800131a:	19bb      	adds	r3, r7, r6
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
 800132e:	2300      	movs	r3, #0
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
                         (((uint64_t)v[4]) << 32) |
 8001332:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001336:	0008      	movs	r0, r1
 8001338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800133a:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800133c:	001d      	movs	r5, r3
 800133e:	4328      	orrs	r0, r5
 8001340:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001342:	0023      	movs	r3, r4
 8001344:	431a      	orrs	r2, r3
 8001346:	62fa      	str	r2, [r7, #44]	@ 0x2c
                         (((uint64_t)v[6]) << 48) |
 8001348:	19bb      	adds	r3, r7, r6
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3306      	adds	r3, #6
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
                         (((uint64_t)v[5]) << 40) |
 8001360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001364:	0008      	movs	r0, r1
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	69fc      	ldr	r4, [r7, #28]
 800136a:	001d      	movs	r5, r3
 800136c:	4328      	orrs	r0, r5
 800136e:	6138      	str	r0, [r7, #16]
 8001370:	0023      	movs	r3, r4
 8001372:	431a      	orrs	r2, r3
 8001374:	617a      	str	r2, [r7, #20]
                         (((uint64_t)v[7]) << 56);
 8001376:	19bb      	adds	r3, r7, r6
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3307      	adds	r3, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	061b      	lsls	r3, r3, #24
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
            uint64_t x =  ((uint64_t)v[0])        |
 800138e:	693c      	ldr	r4, [r7, #16]
 8001390:	697d      	ldr	r5, [r7, #20]
 8001392:	0023      	movs	r3, r4
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	0008      	movs	r0, r1
 800139a:	4303      	orrs	r3, r0
 800139c:	20b0      	movs	r0, #176	@ 0xb0
 800139e:	183e      	adds	r6, r7, r0
 80013a0:	6033      	str	r3, [r6, #0]
 80013a2:	002b      	movs	r3, r5
 80013a4:	4313      	orrs	r3, r2
 80013a6:	22b4      	movs	r2, #180	@ 0xb4
 80013a8:	18ba      	adds	r2, r7, r2
 80013aa:	6013      	str	r3, [r2, #0]
            *out = x;
 80013ac:	23a4      	movs	r3, #164	@ 0xa4
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	183b      	adds	r3, r7, r0
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	600a      	str	r2, [r1, #0]
 80013ba:	604b      	str	r3, [r1, #4]
            return 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01d      	b.n	80013fc <tlv_find_u64+0x2dc>
        }
        i += L;
 80013c0:	2326      	movs	r3, #38	@ 0x26
 80013c2:	22a0      	movs	r2, #160	@ 0xa0
 80013c4:	1899      	adds	r1, r3, r2
 80013c6:	19c9      	adds	r1, r1, r7
 80013c8:	0010      	movs	r0, r2
 80013ca:	189b      	adds	r3, r3, r2
 80013cc:	19da      	adds	r2, r3, r7
 80013ce:	2322      	movs	r3, #34	@ 0x22
 80013d0:	181b      	adds	r3, r3, r0
 80013d2:	19db      	adds	r3, r3, r7
 80013d4:	8812      	ldrh	r2, [r2, #0]
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	800b      	strh	r3, [r1, #0]
    while (i + 3 <= len) {
 80013dc:	2326      	movs	r3, #38	@ 0x26
 80013de:	21a0      	movs	r1, #160	@ 0xa0
 80013e0:	185b      	adds	r3, r3, r1
 80013e2:	19db      	adds	r3, r3, r7
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	1c9a      	adds	r2, r3, #2
 80013e8:	230a      	movs	r3, #10
 80013ea:	185b      	adds	r3, r3, r1
 80013ec:	19db      	adds	r3, r3, r7
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	da00      	bge.n	80013f6 <tlv_find_u64+0x2d6>
 80013f4:	e6b0      	b.n	8001158 <tlv_find_u64+0x38>
 80013f6:	e000      	b.n	80013fa <tlv_find_u64+0x2da>
        if (i + L > len) break;
 80013f8:	46c0      	nop			@ (mov r8, r8)
    }
    return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b033      	add	sp, #204	@ 0xcc
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001404 <next_seq>:


/*** public API ***/

static uint8_t next_seq(void){ static uint8_t s=0; return ++s; }
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <next_seq+0x1c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <next_seq+0x1c>)
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	4b02      	ldr	r3, [pc, #8]	@ (8001420 <next_seq+0x1c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	200003c9 	.word	0x200003c9

08001424 <comm_send>:
enum { COMM_START_BYTE = 0x45, COMM_HDR_SIZE = 8, COMM_VER = 0x01 };

int comm_send(uint8_t rx_id, uint8_t tx_id, uint8_t msg_type,
              uint8_t flags, uint8_t reqid,
              const uint8_t *payload, uint16_t payload_len)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	0005      	movs	r5, r0
 800142c:	000c      	movs	r4, r1
 800142e:	0010      	movs	r0, r2
 8001430:	0019      	movs	r1, r3
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	1c2a      	adds	r2, r5, #0
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	1c22      	adds	r2, r4, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	1d7b      	adds	r3, r7, #5
 8001440:	1c02      	adds	r2, r0, #0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	1c0a      	adds	r2, r1, #0
 8001448:	701a      	strb	r2, [r3, #0]
    const uint16_t total = 1 + 2 + COMM_HDR_SIZE + payload_len + 4;
 800144a:	2116      	movs	r1, #22
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2230      	movs	r2, #48	@ 0x30
 8001450:	18ba      	adds	r2, r7, r2
 8001452:	8812      	ldrh	r2, [r2, #0]
 8001454:	320f      	adds	r2, #15
 8001456:	801a      	strh	r2, [r3, #0]
    if (total > TX_MAX_SIZE) return -1;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	429a      	cmp	r2, r3
 8001462:	d902      	bls.n	800146a <comm_send+0x46>
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	e086      	b.n	8001578 <comm_send+0x154>

    // ---> reserve the TX buffer BEFORE writing into it
	while (tx_busy) { /* spin or yield */ }
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	4b44      	ldr	r3, [pc, #272]	@ (8001580 <comm_send+0x15c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1fa      	bne.n	800146c <comm_send+0x48>
	tx_busy = 1;
 8001476:	4b42      	ldr	r3, [pc, #264]	@ (8001580 <comm_send+0x15c>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]

    uint8_t *w = tx_buf;
 800147c:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <comm_send+0x160>)
 800147e:	613b      	str	r3, [r7, #16]
    *w++ = COMM_START_BYTE;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	613a      	str	r2, [r7, #16]
 8001486:	2245      	movs	r2, #69	@ 0x45
 8001488:	701a      	strb	r2, [r3, #0]
    put_u16le(w, total); w += 2;
 800148a:	2316      	movs	r3, #22
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fbad 	bl	8000bf4 <put_u16le>
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	3302      	adds	r3, #2
 800149e:	613b      	str	r3, [r7, #16]

    const uint8_t seq = next_seq();
 80014a0:	250f      	movs	r5, #15
 80014a2:	197c      	adds	r4, r7, r5
 80014a4:	f7ff ffae 	bl	8001404 <next_seq>
 80014a8:	0003      	movs	r3, r0
 80014aa:	7023      	strb	r3, [r4, #0]
    *w++ = rx_id; *w++ = tx_id; *w++ = msg_type; *w++ = COMM_VER;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	613a      	str	r2, [r7, #16]
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	613a      	str	r2, [r7, #16]
 80014be:	1dba      	adds	r2, r7, #6
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	613a      	str	r2, [r7, #16]
 80014ca:	1d7a      	adds	r2, r7, #5
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	613a      	str	r2, [r7, #16]
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
    *w++ = 0x01;  /* flags: FINAL bit set */
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	613a      	str	r2, [r7, #16]
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
    *w++ = seq;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	613a      	str	r2, [r7, #16]
 80014ea:	197a      	adds	r2, r7, r5
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	701a      	strb	r2, [r3, #0]
    *w++ = reqid;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	613a      	str	r2, [r7, #16]
 80014f6:	2228      	movs	r2, #40	@ 0x28
 80014f8:	18ba      	adds	r2, r7, r2
 80014fa:	7812      	ldrb	r2, [r2, #0]
 80014fc:	701a      	strb	r2, [r3, #0]
    *w++ = 0;     /* reserved */
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	613a      	str	r2, [r7, #16]
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]

    if (payload_len && payload) memcpy(w, payload, payload_len);
 8001508:	2230      	movs	r2, #48	@ 0x30
 800150a:	18bb      	adds	r3, r7, r2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <comm_send+0x102>
 8001512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <comm_send+0x102>
 8001518:	18bb      	adds	r3, r7, r2
 800151a:	881a      	ldrh	r2, [r3, #0]
 800151c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	0018      	movs	r0, r3
 8001522:	f006 fb99 	bl	8007c58 <memcpy>

    uint32_t crc = crc32c(tx_buf, 1+2+COMM_HDR_SIZE+payload_len);
 8001526:	2430      	movs	r4, #48	@ 0x30
 8001528:	193b      	adds	r3, r7, r4
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	330b      	adds	r3, #11
 800152e:	001a      	movs	r2, r3
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <comm_send+0x160>)
 8001532:	0011      	movs	r1, r2
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff fc06 	bl	8000d46 <crc32c>
 800153a:	0003      	movs	r3, r0
 800153c:	60bb      	str	r3, [r7, #8]
    put_u32le(tx_buf + (1+2+COMM_HDR_SIZE+payload_len), crc);
 800153e:	193b      	adds	r3, r7, r4
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	330b      	adds	r3, #11
 8001544:	001a      	movs	r2, r3
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <comm_send+0x160>)
 8001548:	18d3      	adds	r3, r2, r3
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	0011      	movs	r1, r2
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff fb68 	bl	8000c24 <put_u32le>

    if (HAL_UART_Transmit_DMA(g_huart, tx_buf, total) != HAL_OK){
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <comm_send+0x164>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	2316      	movs	r3, #22
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <comm_send+0x160>)
 8001560:	0019      	movs	r1, r3
 8001562:	f005 f99f 	bl	80068a4 <HAL_UART_Transmit_DMA>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d005      	beq.n	8001576 <comm_send+0x152>
        tx_busy = 0; return -2;
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <comm_send+0x15c>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	2302      	movs	r3, #2
 8001572:	425b      	negs	r3, r3
 8001574:	e000      	b.n	8001578 <comm_send+0x154>
    }
    return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b006      	add	sp, #24
 800157e:	bdb0      	pop	{r4, r5, r7, pc}
 8001580:	200003c8 	.word	0x200003c8
 8001584:	200002c8 	.word	0x200002c8
 8001588:	200000b8 	.word	0x200000b8

0800158c <comm_init>:

void comm_init(UART_HandleTypeDef *huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <comm_init+0x48>)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
    rx_dma_head = 0;
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <comm_init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	801a      	strh	r2, [r3, #0]
    rx_cons = 0;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <comm_init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	801a      	strh	r2, [r3, #0]

    // start continuous RX into our circular buffer
    HAL_UART_Receive_DMA(g_huart, rx_dma_buf, RX_DMA_SIZE);
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <comm_init+0x48>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <comm_init+0x54>)
 80015b0:	0018      	movs	r0, r3
 80015b2:	f005 fa07 	bl	80069c4 <HAL_UART_Receive_DMA>

    // enable IDLE-line interrupt so we get poked when a burst of bytes ends
    __HAL_UART_ENABLE_IT(g_huart, UART_IT_IDLE);
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <comm_init+0x48>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <comm_init+0x48>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2110      	movs	r1, #16
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	200002bc 	.word	0x200002bc
 80015dc:	200002be 	.word	0x200002be
 80015e0:	200000bc 	.word	0x200000bc

080015e4 <comm_on_uart_idle_irq>:

void comm_on_uart_idle_irq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    // acknowledge the IDLE event and snapshot the new DMA head
    __HAL_UART_CLEAR_IDLEFLAG(g_huart);
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <comm_on_uart_idle_irq+0x20>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2210      	movs	r2, #16
 80015f0:	621a      	str	r2, [r3, #32]
    rx_dma_head = dma_head_now();
 80015f2:	f7ff fbe5 	bl	8000dc0 <dma_head_now>
 80015f6:	0003      	movs	r3, r0
 80015f8:	001a      	movs	r2, r3
 80015fa:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <comm_on_uart_idle_irq+0x24>)
 80015fc:	801a      	strh	r2, [r3, #0]

    // (nothing else yet — we’ll parse in comm_poll() in a later step)
}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200000b8 	.word	0x200000b8
 8001608:	200002bc 	.word	0x200002bc

0800160c <deliver_checked>:

static void deliver_checked(const uint8_t *frame, uint16_t len){
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	000a      	movs	r2, r1
 8001616:	1cbb      	adds	r3, r7, #2
 8001618:	801a      	strh	r2, [r3, #0]
    if (len < (1+2+COMM_HDR_SIZE+4)) return;            // min size check
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	2b0e      	cmp	r3, #14
 8001620:	d800      	bhi.n	8001624 <deliver_checked+0x18>
 8001622:	e082      	b.n	800172a <deliver_checked+0x11e>
    if (frame[0] != COMM_START_BYTE) return;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b45      	cmp	r3, #69	@ 0x45
 800162a:	d000      	beq.n	800162e <deliver_checked+0x22>
 800162c:	e07f      	b.n	800172e <deliver_checked+0x122>

    uint16_t L = (uint16_t)(frame[1] | (frame[2]<<8));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3301      	adds	r3, #1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b21a      	sxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3302      	adds	r3, #2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b21b      	sxth	r3, r3
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21a      	sxth	r2, r3
 8001646:	2126      	movs	r1, #38	@ 0x26
 8001648:	187b      	adds	r3, r7, r1
 800164a:	801a      	strh	r2, [r3, #0]
    if (L != len) return;
 800164c:	187a      	adds	r2, r7, r1
 800164e:	1cbb      	adds	r3, r7, #2
 8001650:	8812      	ldrh	r2, [r2, #0]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d16c      	bne.n	8001732 <deliver_checked+0x126>

    // CRC check: over Start..end-of-payload
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 8001658:	1cbb      	adds	r3, r7, #2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	3b04      	subs	r3, #4
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	0019      	movs	r1, r3
 8001666:	1cbb      	adds	r3, r7, #2
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	3b03      	subs	r3, #3
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	18d3      	adds	r3, r2, r3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	000a      	movs	r2, r1
 8001676:	431a      	orrs	r2, r3
                      ((uint32_t)frame[len-2]<<16) | ((uint32_t)frame[len-1]<<24);
 8001678:	1cbb      	adds	r3, r7, #2
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	3b02      	subs	r3, #2
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	18cb      	adds	r3, r1, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	041b      	lsls	r3, r3, #16
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 8001686:	431a      	orrs	r2, r3
                      ((uint32_t)frame[len-2]<<16) | ((uint32_t)frame[len-1]<<24);
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	3b01      	subs	r3, #1
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	18cb      	adds	r3, r1, r3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	061b      	lsls	r3, r3, #24
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 8001696:	4313      	orrs	r3, r2
 8001698:	623b      	str	r3, [r7, #32]
    uint32_t crc = crc32c(frame, len-4);
 800169a:	1cbb      	adds	r3, r7, #2
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	3b04      	subs	r3, #4
 80016a0:	001a      	movs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0011      	movs	r1, r2
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fb4d 	bl	8000d46 <crc32c>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61fb      	str	r3, [r7, #28]
    if (crc != crc_rx) return;
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d13e      	bne.n	8001736 <deliver_checked+0x12a>

    // Build parsed view
    comm_frame_t f;
    f.rx_id = frame[3]; f.tx_id = frame[4]; f.msg_type = frame[5]; f.ver = frame[6];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3303      	adds	r3, #3
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	210c      	movs	r1, #12
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	705a      	strb	r2, [r3, #1]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3305      	adds	r3, #5
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	709a      	strb	r2, [r3, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3306      	adds	r3, #6
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	70da      	strb	r2, [r3, #3]
    f.flags = frame[7]; f.seq = frame[8]; f.reqid = frame[9]; f.rsv = frame[10];
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3307      	adds	r3, #7
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	711a      	strb	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3308      	adds	r3, #8
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	715a      	strb	r2, [r3, #5]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3309      	adds	r3, #9
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	719a      	strb	r2, [r3, #6]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	330a      	adds	r3, #10
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	187b      	adds	r3, r7, r1
 8001708:	71da      	strb	r2, [r3, #7]
    f.payload = &frame[11];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	330b      	adds	r3, #11
 800170e:	001a      	movs	r2, r3
 8001710:	187b      	adds	r3, r7, r1
 8001712:	609a      	str	r2, [r3, #8]
    f.payload_len = (uint16_t)(len - (1+2+COMM_HDR_SIZE) - 4);
 8001714:	1cbb      	adds	r3, r7, #2
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	3b0f      	subs	r3, #15
 800171a:	b29a      	uxth	r2, r3
 800171c:	187b      	adds	r3, r7, r1
 800171e:	819a      	strh	r2, [r3, #12]

    comm_on_frame(&f);
 8001720:	187b      	adds	r3, r7, r1
 8001722:	0018      	movs	r0, r3
 8001724:	f000 fcce 	bl	80020c4 <comm_on_frame>
 8001728:	e006      	b.n	8001738 <deliver_checked+0x12c>
    if (len < (1+2+COMM_HDR_SIZE+4)) return;            // min size check
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	e004      	b.n	8001738 <deliver_checked+0x12c>
    if (frame[0] != COMM_START_BYTE) return;
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	e002      	b.n	8001738 <deliver_checked+0x12c>
    if (L != len) return;
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	e000      	b.n	8001738 <deliver_checked+0x12c>
    if (crc != crc_rx) return;
 8001736:	46c0      	nop			@ (mov r8, r8)
}
 8001738:	46bd      	mov	sp, r7
 800173a:	b00a      	add	sp, #40	@ 0x28
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <comm_poll>:

void comm_poll(void)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
	// Fallback: keep DMA head fresh even if IDLE interrupt doesn’t fire
	rx_dma_head = dma_head_now();
 8001746:	f7ff fb3b 	bl	8000dc0 <dma_head_now>
 800174a:	0003      	movs	r3, r0
 800174c:	001a      	movs	r2, r3
 800174e:	4b58      	ldr	r3, [pc, #352]	@ (80018b0 <comm_poll+0x170>)
 8001750:	801a      	strh	r2, [r3, #0]
	while (rx_cons != rx_dma_head){
 8001752:	e09d      	b.n	8001890 <comm_poll+0x150>
	        switch (pstate){
 8001754:	4b57      	ldr	r3, [pc, #348]	@ (80018b4 <comm_poll+0x174>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d100      	bne.n	800175e <comm_poll+0x1e>
 800175c:	e069      	b.n	8001832 <comm_poll+0xf2>
 800175e:	dd00      	ble.n	8001762 <comm_poll+0x22>
 8001760:	e096      	b.n	8001890 <comm_poll+0x150>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <comm_poll+0x2c>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d02d      	beq.n	80017c6 <comm_poll+0x86>
 800176a:	e091      	b.n	8001890 <comm_poll+0x150>

	        case S_FIND_START: {
	            uint8_t b = circ_peek(rx_cons);
 800176c:	4b52      	ldr	r3, [pc, #328]	@ (80018b8 <comm_poll+0x178>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	1d7c      	adds	r4, r7, #5
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff fb3e 	bl	8000df4 <circ_peek>
 8001778:	0003      	movs	r3, r0
 800177a:	7023      	strb	r3, [r4, #0]
	            rx_cons = (uint16_t)((rx_cons + 1) % RX_DMA_SIZE);
 800177c:	4b4e      	ldr	r3, [pc, #312]	@ (80018b8 <comm_poll+0x178>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	4a4e      	ldr	r2, [pc, #312]	@ (80018bc <comm_poll+0x17c>)
 8001784:	4013      	ands	r3, r2
 8001786:	d503      	bpl.n	8001790 <comm_poll+0x50>
 8001788:	3b01      	subs	r3, #1
 800178a:	4a4d      	ldr	r2, [pc, #308]	@ (80018c0 <comm_poll+0x180>)
 800178c:	4313      	orrs	r3, r2
 800178e:	3301      	adds	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <comm_poll+0x178>)
 8001794:	801a      	strh	r2, [r3, #0]
	            if (b == 0x45) {  // COMM_START_BYTE later
 8001796:	1d7b      	adds	r3, r7, #5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b45      	cmp	r3, #69	@ 0x45
 800179c:	d000      	beq.n	80017a0 <comm_poll+0x60>
 800179e:	e076      	b.n	800188e <comm_poll+0x14e>
	                start_pos = (uint16_t)((rx_cons - 1 + RX_DMA_SIZE) % RX_DMA_SIZE);
 80017a0:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <comm_poll+0x178>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <comm_poll+0x184>)
 80017a6:	4694      	mov	ip, r2
 80017a8:	4463      	add	r3, ip
 80017aa:	4a44      	ldr	r2, [pc, #272]	@ (80018bc <comm_poll+0x17c>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	d503      	bpl.n	80017b8 <comm_poll+0x78>
 80017b0:	3b01      	subs	r3, #1
 80017b2:	4a43      	ldr	r2, [pc, #268]	@ (80018c0 <comm_poll+0x180>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	3301      	adds	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <comm_poll+0x188>)
 80017bc:	801a      	strh	r2, [r3, #0]
	                pstate = S_READ_LEN;
 80017be:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <comm_poll+0x174>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
	            }
	        } break;
 80017c4:	e063      	b.n	800188e <comm_poll+0x14e>

	        case S_READ_LEN: {
	            // need Start + 2 bytes of length available
	            if (!have_bytes(start_pos, 3)) return;  // wait for more
 80017c6:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <comm_poll+0x188>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	2103      	movs	r1, #3
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fb4b 	bl	8000e68 <have_bytes>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d100      	bne.n	80017d8 <comm_poll+0x98>
 80017d6:	e064      	b.n	80018a2 <comm_poll+0x162>
	            uint16_t L = read_u16le_circ((uint16_t)(start_pos + 1));
 80017d8:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <comm_poll+0x188>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b29b      	uxth	r3, r3
 80017e0:	1dbc      	adds	r4, r7, #6
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff fb70 	bl	8000ec8 <read_u16le_circ>
 80017e8:	0003      	movs	r3, r0
 80017ea:	8023      	strh	r3, [r4, #0]

	            // sanity window: min 15 bytes (Start+Len+8B header+4B CRC), max 512 for now
	            if (L < 15 || L > 512){
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	2b0e      	cmp	r3, #14
 80017f2:	d905      	bls.n	8001800 <comm_poll+0xc0>
 80017f4:	1dbb      	adds	r3, r7, #6
 80017f6:	881a      	ldrh	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d910      	bls.n	8001822 <comm_poll+0xe2>
	                // bad length -> resync by shifting one byte
	                start_pos = (uint16_t)((start_pos + 1) % RX_DMA_SIZE);
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <comm_poll+0x188>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a2d      	ldr	r2, [pc, #180]	@ (80018bc <comm_poll+0x17c>)
 8001808:	4013      	ands	r3, r2
 800180a:	d503      	bpl.n	8001814 <comm_poll+0xd4>
 800180c:	3b01      	subs	r3, #1
 800180e:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <comm_poll+0x180>)
 8001810:	4313      	orrs	r3, r2
 8001812:	3301      	adds	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b2c      	ldr	r3, [pc, #176]	@ (80018c8 <comm_poll+0x188>)
 8001818:	801a      	strh	r2, [r3, #0]
	                pstate = S_FIND_START;
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <comm_poll+0x174>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
	                break;
 8001820:	e036      	b.n	8001890 <comm_poll+0x150>
	            }
	            want_len = L;
 8001822:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <comm_poll+0x18c>)
 8001824:	1dba      	adds	r2, r7, #6
 8001826:	8812      	ldrh	r2, [r2, #0]
 8001828:	801a      	strh	r2, [r3, #0]
	            pstate = S_READ_FRAME;
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <comm_poll+0x174>)
 800182c:	2202      	movs	r2, #2
 800182e:	701a      	strb	r2, [r3, #0]
	        } break;
 8001830:	e02e      	b.n	8001890 <comm_poll+0x150>

	        case S_READ_FRAME: {
	            if (!have_bytes(start_pos, want_len)) return;  // not all bytes here yet
 8001832:	4b25      	ldr	r3, [pc, #148]	@ (80018c8 <comm_poll+0x188>)
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <comm_poll+0x18c>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	0019      	movs	r1, r3
 800183c:	0010      	movs	r0, r2
 800183e:	f7ff fb13 	bl	8000e68 <have_bytes>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d02f      	beq.n	80018a6 <comm_poll+0x166>

	            static uint8_t scratch[TX_MAX_SIZE];
	            if (want_len <= sizeof(scratch)){
 8001846:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <comm_poll+0x18c>)
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	429a      	cmp	r2, r3
 8001850:	d80e      	bhi.n	8001870 <comm_poll+0x130>
	                circ_read(start_pos, scratch, want_len);
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <comm_poll+0x188>)
 8001854:	8818      	ldrh	r0, [r3, #0]
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <comm_poll+0x18c>)
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <comm_poll+0x190>)
 800185c:	0019      	movs	r1, r3
 800185e:	f7ff fadb 	bl	8000e18 <circ_read>
	                deliver_checked(scratch, want_len);
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <comm_poll+0x18c>)
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <comm_poll+0x190>)
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f7ff fece 	bl	800160c <deliver_checked>
	            }

	            // advance past the frame and search again
	            rx_cons = (uint16_t)((start_pos + want_len) % RX_DMA_SIZE);
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <comm_poll+0x188>)
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <comm_poll+0x18c>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	0ddb      	lsrs	r3, r3, #23
 8001880:	b29a      	uxth	r2, r3
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <comm_poll+0x178>)
 8001884:	801a      	strh	r2, [r3, #0]
	            pstate = S_FIND_START;
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <comm_poll+0x174>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
	        } break;
 800188c:	e000      	b.n	8001890 <comm_poll+0x150>
	        } break;
 800188e:	46c0      	nop			@ (mov r8, r8)
	while (rx_cons != rx_dma_head){
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <comm_poll+0x178>)
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <comm_poll+0x170>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	429a      	cmp	r2, r3
 800189c:	d000      	beq.n	80018a0 <comm_poll+0x160>
 800189e:	e759      	b.n	8001754 <comm_poll+0x14>
 80018a0:	e002      	b.n	80018a8 <comm_poll+0x168>
	            if (!have_bytes(start_pos, 3)) return;  // wait for more
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	e000      	b.n	80018a8 <comm_poll+0x168>
	            if (!have_bytes(start_pos, want_len)) return;  // not all bytes here yet
 80018a6:	46c0      	nop			@ (mov r8, r8)

	        } // switch
	    }
}
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b003      	add	sp, #12
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	200002bc 	.word	0x200002bc
 80018b4:	200002c0 	.word	0x200002c0
 80018b8:	200002be 	.word	0x200002be
 80018bc:	800001ff 	.word	0x800001ff
 80018c0:	fffffe00 	.word	0xfffffe00
 80018c4:	000001ff 	.word	0x000001ff
 80018c8:	200002c2 	.word	0x200002c2
 80018cc:	200002c4 	.word	0x200002c4
 80018d0:	200003cc 	.word	0x200003cc

080018d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <MX_DMA_Init+0x48>)
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_DMA_Init+0x48>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <MX_DMA_Init+0x48>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2009      	movs	r0, #9
 80018f8:	f002 f9f8 	bl	8003cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018fc:	2009      	movs	r0, #9
 80018fe:	f002 fa0a 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	200a      	movs	r0, #10
 8001908:	f002 f9f0 	bl	8003cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800190c:	200a      	movs	r0, #10
 800190e:	f002 fa02 	bl	8003d16 <HAL_NVIC_EnableIRQ>

}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	40021000 	.word	0x40021000

08001920 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	240c      	movs	r4, #12
 8001928:	193b      	adds	r3, r7, r4
 800192a:	0018      	movs	r0, r3
 800192c:	2314      	movs	r3, #20
 800192e:	001a      	movs	r2, r3
 8001930:	2100      	movs	r1, #0
 8001932:	f006 f964 	bl	8007bfe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 800193c:	2180      	movs	r1, #128	@ 0x80
 800193e:	03c9      	lsls	r1, r1, #15
 8001940:	430a      	orrs	r2, r1
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	2380      	movs	r3, #128	@ 0x80
 800194a:	03db      	lsls	r3, r3, #15
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	0289      	lsls	r1, r1, #10
 800195c:	430a      	orrs	r2, r1
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	4013      	ands	r3, r2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 8001974:	2180      	movs	r1, #128	@ 0x80
 8001976:	02c9      	lsls	r1, r1, #11
 8001978:	430a      	orrs	r2, r1
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <MX_GPIO_Init+0xc4>)
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	4013      	ands	r3, r2
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <MX_GPIO_Init+0xc8>)
 800198c:	2200      	movs	r2, #0
 800198e:	2101      	movs	r1, #1
 8001990:	0018      	movs	r0, r3
 8001992:	f002 fd78 	bl	8004486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2201      	movs	r2, #1
 80019a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <MX_GPIO_Init+0xc8>)
 80019b2:	0019      	movs	r1, r3
 80019b4:	0010      	movs	r0, r2
 80019b6:	f002 fbe1 	bl	800417c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019ba:	0021      	movs	r1, r4
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2201      	movs	r2, #1
 80019cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <MX_GPIO_Init+0xc8>)
 80019d2:	0019      	movs	r1, r3
 80019d4:	0010      	movs	r0, r2
 80019d6:	f002 fbd1 	bl	800417c <HAL_GPIO_Init>

}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b009      	add	sp, #36	@ 0x24
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <hx711_udelay_ticks>:

#include "hx711.h"

// small ~sub-microsecond delay; exact value not critical.
// We only need to ensure SCK high time is short (<60us).
static inline void hx711_udelay_ticks(int n){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  for (volatile int i = 0; i < n; i++) __NOP();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e003      	b.n	8001a02 <hx711_udelay_ticks+0x16>
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dcf7      	bgt.n	80019fa <hx711_udelay_ticks+0xe>
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46c0      	nop			@ (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <hx711_sck_high>:
static inline void hx711_sck_high(void){ HAL_GPIO_WritePin(HX711_SCK_GPIO, HX711_SCK_PIN, GPIO_PIN_SET); }
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <hx711_sck_high+0x18>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f002 fd31 	bl	8004486 <HAL_GPIO_WritePin>
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	48000400 	.word	0x48000400

08001a30 <hx711_sck_low>:
static inline void hx711_sck_low (void){ HAL_GPIO_WritePin(HX711_SCK_GPIO, HX711_SCK_PIN, GPIO_PIN_RESET); }
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <hx711_sck_low+0x18>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	2101      	movs	r1, #1
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f002 fd23 	bl	8004486 <HAL_GPIO_WritePin>
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	48000400 	.word	0x48000400

08001a4c <hx711_dout>:
static inline int  hx711_dout(void){ return HAL_GPIO_ReadPin(HX711_DOUT_GPIO, HX711_DOUT_PIN) ? 1 : 0; }
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <hx711_dout+0x1c>)
 8001a52:	2102      	movs	r1, #2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f002 fcf9 	bl	800444c <HAL_GPIO_ReadPin>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	4193      	sbcs	r3, r2
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	48000400 	.word	0x48000400

08001a6c <hx711_dout_level>:

// public: simple pin read (used by telemetry_service)
int hx711_dout_level(void){ return hx711_dout(); }
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	f7ff ffec 	bl	8001a4c <hx711_dout>
 8001a74:	0003      	movs	r3, r0
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <hx711_init>:

static inline void short_pulse(void){
  for (volatile int i=0;i<30;i++) __NOP();
}

void hx711_init(void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  // Ensure SCK is low at idle; high >60us would power down the HX711.
  hx711_sck_low();
 8001a80:	f7ff ffd6 	bl	8001a30 <hx711_sck_low>
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <hx711_read_raw>:

int hx711_read_raw(int32_t *out, uint32_t timeout_ms)
{
 8001a8a:	b590      	push	{r4, r7, lr}
 8001a8c:	b087      	sub	sp, #28
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  uint32_t t0 = HAL_GetTick();
 8001a94:	f001 faa8 	bl	8002fe8 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]

  // 1) wait for data ready (DOUT low) or timeout
  while (hx711_dout()){
 8001a9c:	e009      	b.n	8001ab2 <hx711_read_raw+0x28>
    if ((HAL_GetTick() - t0) >= timeout_ms) return 0;
 8001a9e:	f001 faa3 	bl	8002fe8 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d801      	bhi.n	8001ab2 <hx711_read_raw+0x28>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e03b      	b.n	8001b2a <hx711_read_raw+0xa0>
  while (hx711_dout()){
 8001ab2:	f7ff ffcb 	bl	8001a4c <hx711_dout>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d1f1      	bne.n	8001a9e <hx711_read_raw+0x14>
  }

  // 2) clock out 24 bits, MSB first
  uint32_t v = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 24; i++){
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e017      	b.n	8001af4 <hx711_read_raw+0x6a>
    hx711_sck_high();
 8001ac4:	f7ff ffa6 	bl	8001a14 <hx711_sck_high>
    hx711_udelay_ticks(30);            // short high pulse
 8001ac8:	201e      	movs	r0, #30
 8001aca:	f7ff ff8f 	bl	80019ec <hx711_udelay_ticks>
    v = (v << 1) | (hx711_dout() ? 1u : 0u);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005c      	lsls	r4, r3, #1
 8001ad2:	f7ff ffbb 	bl	8001a4c <hx711_dout>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <hx711_read_raw+0x54>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <hx711_read_raw+0x56>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	4323      	orrs	r3, r4
 8001ae2:	617b      	str	r3, [r7, #20]
    hx711_sck_low();
 8001ae4:	f7ff ffa4 	bl	8001a30 <hx711_sck_low>
    hx711_udelay_ticks(30);
 8001ae8:	201e      	movs	r0, #30
 8001aea:	f7ff ff7f 	bl	80019ec <hx711_udelay_ticks>
  for (int i = 0; i < 24; i++){
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3301      	adds	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b17      	cmp	r3, #23
 8001af8:	dde4      	ble.n	8001ac4 <hx711_read_raw+0x3a>
  }

  // 3) set GAIN for NEXT conversion (128 = +1 extra clock)
  hx711_sck_high();
 8001afa:	f7ff ff8b 	bl	8001a14 <hx711_sck_high>
  hx711_udelay_ticks(30);
 8001afe:	201e      	movs	r0, #30
 8001b00:	f7ff ff74 	bl	80019ec <hx711_udelay_ticks>
  hx711_sck_low();
 8001b04:	f7ff ff94 	bl	8001a30 <hx711_sck_low>
  hx711_udelay_ticks(30);
 8001b08:	201e      	movs	r0, #30
 8001b0a:	f7ff ff6f 	bl	80019ec <hx711_udelay_ticks>

  // 4) sign-extend 24-bit two's complement to 32-bit
  if (v & 0x800000u) v |= 0xFF000000u;
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	4013      	ands	r3, r2
 8001b16:	d004      	beq.n	8001b22 <hx711_read_raw+0x98>
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	0612      	lsls	r2, r2, #24
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
  *out = (int32_t)v;
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	601a      	str	r2, [r3, #0]
  return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b007      	add	sp, #28
 8001b30:	bd90      	pop	{r4, r7, pc}
	...

08001b34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <MX_I2C1_Init+0x78>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b40:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <MX_I2C1_Init+0x7c>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b70:	0018      	movs	r0, r3
 8001b72:	f002 fca5 	bl	80044c0 <HAL_I2C_Init>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d001      	beq.n	8001b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b7a:	f000 fe41 	bl	8002800 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b80:	2100      	movs	r1, #0
 8001b82:	0018      	movs	r0, r3
 8001b84:	f002 fd42 	bl	800460c <HAL_I2CEx_ConfigAnalogFilter>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b8c:	f000 fe38 	bl	8002800 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <MX_I2C1_Init+0x74>)
 8001b92:	2100      	movs	r1, #0
 8001b94:	0018      	movs	r0, r3
 8001b96:	f002 fd85 	bl	80046a4 <HAL_I2CEx_ConfigDigitalFilter>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b9e:	f000 fe2f 	bl	8002800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200004cc 	.word	0x200004cc
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	00201d2b 	.word	0x00201d2b

08001bb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08b      	sub	sp, #44	@ 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	2414      	movs	r4, #20
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	2314      	movs	r3, #20
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f006 f819 	bl	8007bfe <memset>
  if(i2cHandle->Instance==I2C1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c8c <HAL_I2C_MspInit+0xd8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d156      	bne.n	8001c84 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	0289      	lsls	r1, r1, #10
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	02c9      	lsls	r1, r1, #11
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	02db      	lsls	r3, r3, #11
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2212      	movs	r2, #18
 8001c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	2203      	movs	r2, #3
 8001c26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	193a      	adds	r2, r7, r4
 8001c30:	2390      	movs	r3, #144	@ 0x90
 8001c32:	05db      	lsls	r3, r3, #23
 8001c34:	0011      	movs	r1, r2
 8001c36:	0018      	movs	r0, r3
 8001c38:	f002 faa0 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c3c:	0021      	movs	r1, r4
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2280      	movs	r2, #128	@ 0x80
 8001c42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2212      	movs	r2, #18
 8001c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2203      	movs	r2, #3
 8001c54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2201      	movs	r2, #1
 8001c5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_I2C_MspInit+0xe0>)
 8001c60:	0019      	movs	r1, r3
 8001c62:	0010      	movs	r0, r2
 8001c64:	f002 fa8a 	bl	800417c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001c6a:	69da      	ldr	r2, [r3, #28]
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001c6e:	2180      	movs	r1, #128	@ 0x80
 8001c70:	0389      	lsls	r1, r1, #14
 8001c72:	430a      	orrs	r2, r1
 8001c74:	61da      	str	r2, [r3, #28]
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_I2C_MspInit+0xdc>)
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	2380      	movs	r3, #128	@ 0x80
 8001c7c:	039b      	lsls	r3, r3, #14
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b00b      	add	sp, #44	@ 0x2c
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	40021000 	.word	0x40021000
 8001c94:	48000400 	.word	0x48000400

08001c98 <esc_apply_hw>:
static volatile uint16_t ic_last = 0;
static volatile uint32_t ic_period_us = 0;   // last measured period in microseconds
static volatile uint32_t ic_irq_count = 0;
static volatile uint8_t  ic_has_lock = 0;    // 1 once we got a valid period

static inline void esc_apply_hw(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g_esc1_us);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <esc_apply_hw+0x20>)
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <esc_apply_hw+0x24>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, g_esc2_us);
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <esc_apply_hw+0x28>)
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <esc_apply_hw+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	20000006 	.word	0x20000006
 8001cbc:	2000056c 	.word	0x2000056c
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <esc_init>:

static void esc_init(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  // start PWM outputs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cc8:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <esc_init+0x24>)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f003 fb0b 	bl	80052e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <esc_init+0x24>)
 8001cd4:	210c      	movs	r1, #12
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f003 fb06 	bl	80052e8 <HAL_TIM_PWM_Start>
  esc_apply_hw();
 8001cdc:	f7ff ffdc 	bl	8001c98 <esc_apply_hw>
}
 8001ce0:	46c0      	nop			@ (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	2000056c 	.word	0x2000056c

08001cec <esc_set_us>:

static void esc_set_us(uint32_t ch, uint32_t us){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  if (us < 1050) us = 1050;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <esc_set_us+0x48>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d801      	bhi.n	8001d02 <esc_set_us+0x16>
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <esc_set_us+0x4c>)
 8001d00:	603b      	str	r3, [r7, #0]
  if (us > 1940) us = 1940;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <esc_set_us+0x50>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <esc_set_us+0x22>
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <esc_set_us+0x50>)
 8001d0c:	603b      	str	r3, [r7, #0]
  if (ch == 1) g_esc1_us = (uint16_t)us;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d104      	bne.n	8001d1e <esc_set_us+0x32>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <esc_set_us+0x54>)
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	e003      	b.n	8001d26 <esc_set_us+0x3a>
  else         g_esc2_us = (uint16_t)us;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <esc_set_us+0x58>)
 8001d24:	801a      	strh	r2, [r3, #0]
  esc_apply_hw();
 8001d26:	f7ff ffb7 	bl	8001c98 <esc_apply_hw>
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	00000419 	.word	0x00000419
 8001d38:	0000041a 	.word	0x0000041a
 8001d3c:	00000794 	.word	0x00000794
 8001d40:	20000006 	.word	0x20000006
 8001d44:	20000008 	.word	0x20000008

08001d48 <adc_try_start>:
#define VREFINT_CAL_ADDR  ((uint16_t*)0x1FFFF7BA)  // STM32F0 ref manual
#endif
#define ADC_FULL_SCALE 4095u


static inline void adc_try_start(void){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc);  // in case something was half-started
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <adc_try_start+0x58>)
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f001 fb16 	bl	8003380 <HAL_ADC_Stop_DMA>
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK) { g_adc_ok = 0; return; }
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <adc_try_start+0x58>)
 8001d56:	0018      	movs	r0, r3
 8001d58:	f001 fe74 	bl	8003a44 <HAL_ADCEx_Calibration_Start>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d003      	beq.n	8001d68 <adc_try_start+0x20>
 8001d60:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <adc_try_start+0x5c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e018      	b.n	8001d9a <adc_try_start+0x52>
    if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)g_adc, ADC_COUNT) != HAL_OK)   { g_adc_ok = 0; return; }
 8001d68:	490f      	ldr	r1, [pc, #60]	@ (8001da8 <adc_try_start+0x60>)
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <adc_try_start+0x58>)
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f001 fa84 	bl	800327c <HAL_ADC_Start_DMA>
 8001d74:	1e03      	subs	r3, r0, #0
 8001d76:	d003      	beq.n	8001d80 <adc_try_start+0x38>
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <adc_try_start+0x5c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e00c      	b.n	8001d9a <adc_try_start+0x52>
    __HAL_DMA_DISABLE_IT(hadc.DMA_Handle, DMA_IT_HT | DMA_IT_TC | DMA_IT_TE);
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <adc_try_start+0x58>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <adc_try_start+0x58>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	210e      	movs	r1, #14
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
    g_adc_ok = 1;
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <adc_try_start+0x5c>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
}
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	20000034 	.word	0x20000034
 8001da4:	2000054e 	.word	0x2000054e
 8001da8:	20000544 	.word	0x20000544

08001dac <adc_compute_mv>:

static inline void adc_compute_mv(void)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b0a9      	sub	sp, #164	@ 0xa4
 8001db0:	af00      	add	r7, sp, #0
    if (!g_adc_ok) return;
 8001db2:	4bb4      	ldr	r3, [pc, #720]	@ (8002084 <adc_compute_mv+0x2d8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d100      	bne.n	8001dbc <adc_compute_mv+0x10>
 8001dba:	e15d      	b.n	8002078 <adc_compute_mv+0x2cc>

    // Fixed order: [0]=PA0, [1]=PA1, [2]=PA3, [3]=PA4, [4]=VREFINT
    uint16_t raw_i1  = g_adc[ADC_IDX_I1];
 8001dbc:	2332      	movs	r3, #50	@ 0x32
 8001dbe:	2068      	movs	r0, #104	@ 0x68
 8001dc0:	181b      	adds	r3, r3, r0
 8001dc2:	19da      	adds	r2, r3, r7
 8001dc4:	4bb0      	ldr	r3, [pc, #704]	@ (8002088 <adc_compute_mv+0x2dc>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	8013      	strh	r3, [r2, #0]
    uint16_t raw_i2  = g_adc[ADC_IDX_I2];
 8001dca:	2330      	movs	r3, #48	@ 0x30
 8001dcc:	181b      	adds	r3, r3, r0
 8001dce:	19da      	adds	r2, r3, r7
 8001dd0:	4bad      	ldr	r3, [pc, #692]	@ (8002088 <adc_compute_mv+0x2dc>)
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	8013      	strh	r3, [r2, #0]
    uint16_t raw_v1  = g_adc[ADC_IDX_V1];
 8001dd6:	232e      	movs	r3, #46	@ 0x2e
 8001dd8:	181b      	adds	r3, r3, r0
 8001dda:	19da      	adds	r2, r3, r7
 8001ddc:	4baa      	ldr	r3, [pc, #680]	@ (8002088 <adc_compute_mv+0x2dc>)
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	8013      	strh	r3, [r2, #0]
    uint16_t raw_v2  = g_adc[ADC_IDX_V2];
 8001de2:	232c      	movs	r3, #44	@ 0x2c
 8001de4:	181b      	adds	r3, r3, r0
 8001de6:	19da      	adds	r2, r3, r7
 8001de8:	4ba7      	ldr	r3, [pc, #668]	@ (8002088 <adc_compute_mv+0x2dc>)
 8001dea:	88db      	ldrh	r3, [r3, #6]
 8001dec:	8013      	strh	r3, [r2, #0]
    uint16_t raw_ref = g_adc[ADC_IDX_VREF];
 8001dee:	212a      	movs	r1, #42	@ 0x2a
 8001df0:	180b      	adds	r3, r1, r0
 8001df2:	19da      	adds	r2, r3, r7
 8001df4:	4ba4      	ldr	r3, [pc, #656]	@ (8002088 <adc_compute_mv+0x2dc>)
 8001df6:	891b      	ldrh	r3, [r3, #8]
 8001df8:	8013      	strh	r3, [r2, #0]
    if (raw_ref == 0) return;  // avoid div/0 while VREFINT wakes up
 8001dfa:	180b      	adds	r3, r1, r0
 8001dfc:	19db      	adds	r3, r3, r7
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <adc_compute_mv+0x5a>
 8001e04:	e13a      	b.n	800207c <adc_compute_mv+0x2d0>

    // --- VDD from factory calibration (same approach you already use) ---
    uint32_t vref_cal = *VREFINT_CAL_ADDR;           // ~1500 @ 3.3V
 8001e06:	4ba1      	ldr	r3, [pc, #644]	@ (800208c <adc_compute_mv+0x2e0>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	219c      	movs	r1, #156	@ 0x9c
 8001e0c:	187a      	adds	r2, r7, r1
 8001e0e:	6013      	str	r3, [r2, #0]
    if (vref_cal < 1000 || vref_cal > 3000) vref_cal = 1500;
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	23fa      	movs	r3, #250	@ 0xfa
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d304      	bcc.n	8001e26 <adc_compute_mv+0x7a>
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b9b      	ldr	r3, [pc, #620]	@ (8002090 <adc_compute_mv+0x2e4>)
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d903      	bls.n	8001e2e <adc_compute_mv+0x82>
 8001e26:	4b9b      	ldr	r3, [pc, #620]	@ (8002094 <adc_compute_mv+0x2e8>)
 8001e28:	229c      	movs	r2, #156	@ 0x9c
 8001e2a:	18ba      	adds	r2, r7, r2
 8001e2c:	6013      	str	r3, [r2, #0]
    uint32_t vdd_mV = (3300u * vref_cal) / raw_ref;
 8001e2e:	239c      	movs	r3, #156	@ 0x9c
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b98      	ldr	r3, [pc, #608]	@ (8002098 <adc_compute_mv+0x2ec>)
 8001e36:	435a      	muls	r2, r3
 8001e38:	232a      	movs	r3, #42	@ 0x2a
 8001e3a:	2168      	movs	r1, #104	@ 0x68
 8001e3c:	185b      	adds	r3, r3, r1
 8001e3e:	19db      	adds	r3, r3, r7
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	0019      	movs	r1, r3
 8001e44:	0010      	movs	r0, r2
 8001e46:	f7fe f95f 	bl	8000108 <__udivsi3>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	268c      	movs	r6, #140	@ 0x8c
 8001e4e:	19b8      	adds	r0, r7, r6
 8001e50:	6003      	str	r3, [r0, #0]

    // --- Node voltages (mV) at each ADC pin (64-bit to avoid overflow later) ---
    uint32_t node_i1_mV = (uint32_t)(((uint64_t)raw_i1 * vdd_mV + 2047) / 4095u);
 8001e52:	2332      	movs	r3, #50	@ 0x32
 8001e54:	2268      	movs	r2, #104	@ 0x68
 8001e56:	189b      	adds	r3, r3, r2
 8001e58:	19db      	adds	r3, r3, r7
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e60:	2300      	movs	r3, #0
 8001e62:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e64:	19bb      	adds	r3, r7, r6
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	001c      	movs	r4, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	001d      	movs	r5, r3
 8001e6e:	0022      	movs	r2, r4
 8001e70:	002b      	movs	r3, r5
 8001e72:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e74:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001e76:	f7fe fa17 	bl	80002a8 <__aeabi_lmul>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	000b      	movs	r3, r1
 8001e7e:	0010      	movs	r0, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	4a86      	ldr	r2, [pc, #536]	@ (800209c <adc_compute_mv+0x2f0>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	1880      	adds	r0, r0, r2
 8001e88:	4159      	adcs	r1, r3
 8001e8a:	4a85      	ldr	r2, [pc, #532]	@ (80020a0 <adc_compute_mv+0x2f4>)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f7fe f9eb 	bl	8000268 <__aeabi_uldivmod>
 8001e92:	0002      	movs	r2, r0
 8001e94:	000b      	movs	r3, r1
 8001e96:	0013      	movs	r3, r2
 8001e98:	2188      	movs	r1, #136	@ 0x88
 8001e9a:	1878      	adds	r0, r7, r1
 8001e9c:	6003      	str	r3, [r0, #0]
    uint32_t node_i2_mV = (uint32_t)(((uint64_t)raw_i2 * vdd_mV + 2047) / 4095u);
 8001e9e:	2330      	movs	r3, #48	@ 0x30
 8001ea0:	2568      	movs	r5, #104	@ 0x68
 8001ea2:	195b      	adds	r3, r3, r5
 8001ea4:	19db      	adds	r3, r3, r7
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001eac:	2300      	movs	r3, #0
 8001eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001eb0:	0034      	movs	r4, r6
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eb8:	2300      	movs	r3, #0
 8001eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ebc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001ec2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ec4:	f7fe f9f0 	bl	80002a8 <__aeabi_lmul>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	000b      	movs	r3, r1
 8001ecc:	0010      	movs	r0, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	4a72      	ldr	r2, [pc, #456]	@ (800209c <adc_compute_mv+0x2f0>)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	1880      	adds	r0, r0, r2
 8001ed6:	4159      	adcs	r1, r3
 8001ed8:	4a71      	ldr	r2, [pc, #452]	@ (80020a0 <adc_compute_mv+0x2f4>)
 8001eda:	2300      	movs	r3, #0
 8001edc:	f7fe f9c4 	bl	8000268 <__aeabi_uldivmod>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	000b      	movs	r3, r1
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	2284      	movs	r2, #132	@ 0x84
 8001ee8:	18b8      	adds	r0, r7, r2
 8001eea:	6003      	str	r3, [r0, #0]
    uint32_t node_v1_mV = (uint32_t)(((uint64_t)raw_v1 * vdd_mV + 2047) / 4095u);
 8001eec:	232e      	movs	r3, #46	@ 0x2e
 8001eee:	1958      	adds	r0, r3, r5
 8001ef0:	19c3      	adds	r3, r0, r7
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001efc:	1938      	adds	r0, r7, r4
 8001efe:	6803      	ldr	r3, [r0, #0]
 8001f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f02:	2300      	movs	r3, #0
 8001f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001f0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f0e:	f7fe f9cb 	bl	80002a8 <__aeabi_lmul>
 8001f12:	0002      	movs	r2, r0
 8001f14:	000b      	movs	r3, r1
 8001f16:	0010      	movs	r0, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4a60      	ldr	r2, [pc, #384]	@ (800209c <adc_compute_mv+0x2f0>)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	1880      	adds	r0, r0, r2
 8001f20:	4159      	adcs	r1, r3
 8001f22:	4a5f      	ldr	r2, [pc, #380]	@ (80020a0 <adc_compute_mv+0x2f4>)
 8001f24:	2300      	movs	r3, #0
 8001f26:	f7fe f99f 	bl	8000268 <__aeabi_uldivmod>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	000b      	movs	r3, r1
 8001f2e:	0013      	movs	r3, r2
 8001f30:	2680      	movs	r6, #128	@ 0x80
 8001f32:	19b8      	adds	r0, r7, r6
 8001f34:	6003      	str	r3, [r0, #0]
    uint32_t node_v2_mV = (uint32_t)(((uint64_t)raw_v2 * vdd_mV + 2047) / 4095u);
 8001f36:	232c      	movs	r3, #44	@ 0x2c
 8001f38:	1958      	adds	r0, r3, r5
 8001f3a:	19c3      	adds	r3, r0, r7
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f42:	2300      	movs	r3, #0
 8001f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f46:	1938      	adds	r0, r7, r4
 8001f48:	6803      	ldr	r3, [r0, #0]
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f58:	f7fe f9a6 	bl	80002a8 <__aeabi_lmul>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	000b      	movs	r3, r1
 8001f60:	0010      	movs	r0, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <adc_compute_mv+0x2f0>)
 8001f66:	2300      	movs	r3, #0
 8001f68:	1880      	adds	r0, r0, r2
 8001f6a:	4159      	adcs	r1, r3
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	@ (80020a0 <adc_compute_mv+0x2f4>)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f7fe f97a 	bl	8000268 <__aeabi_uldivmod>
 8001f74:	0002      	movs	r2, r0
 8001f76:	000b      	movs	r3, r1
 8001f78:	0013      	movs	r3, r2
 8001f7a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // --- External voltages through dividers (19:1) ---
    const uint32_t k1 = (R_HIGH1 + R_LOW1), k2 = (R_HIGH2 + R_LOW2);
 8001f7c:	4b49      	ldr	r3, [pc, #292]	@ (80020a4 <adc_compute_mv+0x2f8>)
 8001f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f80:	4b48      	ldr	r3, [pc, #288]	@ (80020a4 <adc_compute_mv+0x2f8>)
 8001f82:	677b      	str	r3, [r7, #116]	@ 0x74
    g_vin1_mV = (uint32_t)(((uint64_t)node_v1_mV * k1 + R_LOW1/2) / R_LOW1);
 8001f84:	19b8      	adds	r0, r7, r6
 8001f86:	6803      	ldr	r3, [r0, #0]
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f96:	6a3a      	ldr	r2, [r7, #32]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f9e:	f7fe f983 	bl	80002a8 <__aeabi_lmul>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	000b      	movs	r3, r1
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	4a3f      	ldr	r2, [pc, #252]	@ (80020a8 <adc_compute_mv+0x2fc>)
 8001fac:	2300      	movs	r3, #0
 8001fae:	1880      	adds	r0, r0, r2
 8001fb0:	4159      	adcs	r1, r3
 8001fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80020ac <adc_compute_mv+0x300>)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f7fe f957 	bl	8000268 <__aeabi_uldivmod>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80020b0 <adc_compute_mv+0x304>)
 8001fc0:	601a      	str	r2, [r3, #0]
    g_vin2_mV = (uint32_t)(((uint64_t)node_v2_mV * k2 + R_LOW2/2) / R_LOW2);
 8001fc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	69b8      	ldr	r0, [r7, #24]
 8001fd8:	69f9      	ldr	r1, [r7, #28]
 8001fda:	f7fe f965 	bl	80002a8 <__aeabi_lmul>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	000b      	movs	r3, r1
 8001fe2:	0010      	movs	r0, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	4a30      	ldr	r2, [pc, #192]	@ (80020a8 <adc_compute_mv+0x2fc>)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	1880      	adds	r0, r0, r2
 8001fec:	4159      	adcs	r1, r3
 8001fee:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <adc_compute_mv+0x300>)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f7fe f939 	bl	8000268 <__aeabi_uldivmod>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	000b      	movs	r3, r1
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <adc_compute_mv+0x308>)
 8001ffc:	601a      	str	r2, [r3, #0]


    //Current Calculation
    int32_t dv1_mV = (int32_t)node_i1_mV - (int32_t)g_i1_zero_mV;
 8001ffe:	2188      	movs	r1, #136	@ 0x88
 8002000:	1879      	adds	r1, r7, r1
 8002002:	680a      	ldr	r2, [r1, #0]
 8002004:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <adc_compute_mv+0x30c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	673b      	str	r3, [r7, #112]	@ 0x70
    int32_t dv2_mV = (int32_t)node_i2_mV - (int32_t)g_i1_zero_mV;
 800200c:	2384      	movs	r3, #132	@ 0x84
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b29      	ldr	r3, [pc, #164]	@ (80020b8 <adc_compute_mv+0x30c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // I(mA) = (dv_mV * 1000) / (mV per A)
    g_i1_mA = (int32_t)(((int64_t)dv1_mV * 1000) / I1_SENS_mV_PER_A);
 800201a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	22fa      	movs	r2, #250	@ 0xfa
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	2300      	movs	r3, #0
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	f7fe f93c 	bl	80002a8 <__aeabi_lmul>
 8002030:	0002      	movs	r2, r0
 8002032:	000b      	movs	r3, r1
 8002034:	0010      	movs	r0, r2
 8002036:	0019      	movs	r1, r3
 8002038:	2218      	movs	r2, #24
 800203a:	2300      	movs	r3, #0
 800203c:	f7fe f8f0 	bl	8000220 <__aeabi_ldivmod>
 8002040:	0002      	movs	r2, r0
 8002042:	000b      	movs	r3, r1
 8002044:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <adc_compute_mv+0x310>)
 8002046:	601a      	str	r2, [r3, #0]
    g_i2_mA = (int32_t)(((int64_t)dv2_mV * 1000) / I2_SENS_mV_PER_A);
 8002048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	17db      	asrs	r3, r3, #31
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	22fa      	movs	r2, #250	@ 0xfa
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	2300      	movs	r3, #0
 8002056:	6838      	ldr	r0, [r7, #0]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	f7fe f925 	bl	80002a8 <__aeabi_lmul>
 800205e:	0002      	movs	r2, r0
 8002060:	000b      	movs	r3, r1
 8002062:	0010      	movs	r0, r2
 8002064:	0019      	movs	r1, r3
 8002066:	2218      	movs	r2, #24
 8002068:	2300      	movs	r3, #0
 800206a:	f7fe f8d9 	bl	8000220 <__aeabi_ldivmod>
 800206e:	0002      	movs	r2, r0
 8002070:	000b      	movs	r3, r1
 8002072:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <adc_compute_mv+0x314>)
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e002      	b.n	800207e <adc_compute_mv+0x2d2>
    if (!g_adc_ok) return;
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	e000      	b.n	800207e <adc_compute_mv+0x2d2>
    if (raw_ref == 0) return;  // avoid div/0 while VREFINT wakes up
 800207c:	46c0      	nop			@ (mov r8, r8)
}
 800207e:	46bd      	mov	sp, r7
 8002080:	b029      	add	sp, #164	@ 0xa4
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	2000054e 	.word	0x2000054e
 8002088:	20000544 	.word	0x20000544
 800208c:	1ffff7ba 	.word	0x1ffff7ba
 8002090:	00000bb8 	.word	0x00000bb8
 8002094:	000005dc 	.word	0x000005dc
 8002098:	00000ce4 	.word	0x00000ce4
 800209c:	000007ff 	.word	0x000007ff
 80020a0:	00000fff 	.word	0x00000fff
 80020a4:	0002e630 	.word	0x0002e630
 80020a8:	00001388 	.word	0x00001388
 80020ac:	00002710 	.word	0x00002710
 80020b0:	20000550 	.word	0x20000550
 80020b4:	20000554 	.word	0x20000554
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000534 	.word	0x20000534
 80020c0:	20000538 	.word	0x20000538

080020c4 <comm_on_frame>:


void comm_on_frame(const comm_frame_t *f)
{
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b0aa      	sub	sp, #168	@ 0xa8
 80020c8:	af04      	add	r7, sp, #16
 80020ca:	6078      	str	r0, [r7, #4]
	// Handle Ping
    if (f->msg_type == MT_PING) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	789b      	ldrb	r3, [r3, #2]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d133      	bne.n	800213c <comm_on_frame+0x78>
        uint64_t host_ms64 = 0;
 80020d4:	2200      	movs	r2, #0
 80020d6:	2300      	movs	r3, #0
 80020d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80020da:	677b      	str	r3, [r7, #116]	@ 0x74
        (void)tlv_find_u64(f->payload, f->payload_len, TLV_TS_HOST_MS, &host_ms64);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8999      	ldrh	r1, [r3, #12]
 80020e4:	2370      	movs	r3, #112	@ 0x70
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	2202      	movs	r2, #2
 80020ea:	f7ff f819 	bl	8001120 <tlv_find_u64>

        uint8_t buf[24]; uint8_t *w = buf;
 80020ee:	2458      	movs	r4, #88	@ 0x58
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
        w = tlv_put_u64(w, TLV_TS_HOST_MS, host_ms64);   // echo host 64-bit time
 80020f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80020f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020f8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80020fa:	2102      	movs	r1, #2
 80020fc:	f7fe ff8e 	bl	800101c <tlv_put_u64>
 8002100:	0003      	movs	r3, r0
 8002102:	67fb      	str	r3, [r7, #124]	@ 0x7c
        w = tlv_put_u32(w, TLV_TS_MS, HAL_GetTick());    // device uptime (u32)
 8002104:	f000 ff70 	bl	8002fe8 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800210c:	2101      	movs	r1, #1
 800210e:	0018      	movs	r0, r3
 8002110:	f7fe fda7 	bl	8000c62 <tlv_put_u32>
 8002114:	0003      	movs	r3, r0
 8002116:	67fb      	str	r3, [r7, #124]	@ 0x7c

        comm_send(f->tx_id, f->rx_id, MT_PING, 0x01, 0, buf, (uint16_t)(w - buf));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7858      	ldrb	r0, [r3, #1]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7819      	ldrb	r1, [r3, #0]
 8002120:	193b      	adds	r3, r7, r4
 8002122:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	b29b      	uxth	r3, r3
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	193b      	adds	r3, r7, r4
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	2205      	movs	r2, #5
 8002136:	f7ff f975 	bl	8001424 <comm_send>
 800213a:	e131      	b.n	80023a0 <comm_on_frame+0x2dc>
        return;
    }
    // Handle Command
    if (f->msg_type == MT_COMMAND) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	789b      	ldrb	r3, [r3, #2]
 8002140:	2b0a      	cmp	r3, #10
 8002142:	d000      	beq.n	8002146 <comm_on_frame+0x82>
 8002144:	e12c      	b.n	80023a0 <comm_on_frame+0x2dc>
            // Parse the command code (u32)
            uint32_t cmd = 0xFFFFFFFFu;
 8002146:	2301      	movs	r3, #1
 8002148:	425b      	negs	r3, r3
 800214a:	657b      	str	r3, [r7, #84]	@ 0x54
            (void)tlv_find_u32(f->payload, f->payload_len, TLV_CMD_CODE, &cmd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6898      	ldr	r0, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8999      	ldrh	r1, [r3, #12]
 8002154:	2354      	movs	r3, #84	@ 0x54
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	224f      	movs	r2, #79	@ 0x4f
 800215a:	f7fe fede 	bl	8000f1a <tlv_find_u32>

            uint32_t result = 0; // OK by default
 800215e:	2300      	movs	r3, #0
 8002160:	2294      	movs	r2, #148	@ 0x94
 8002162:	18ba      	adds	r2, r7, r2
 8002164:	6013      	str	r3, [r2, #0]

			if (cmd == CMD_ECHO) {
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	2b00      	cmp	r3, #0
 800216a:	d100      	bne.n	800216e <comm_on_frame+0xaa>
 800216c:	e0e5      	b.n	800233a <comm_on_frame+0x276>
				// nothing else to do
			}
			else if (cmd == CMD_SNAPSHOT) {
 800216e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002170:	2b01      	cmp	r3, #1
 8002172:	d13f      	bne.n	80021f4 <comm_on_frame+0x130>
				// Build one telemetry frame (MT_TEL_A) with a timestamp TLV for now
				uint8_t t[16]; uint8_t *tw = t;
 8002174:	2334      	movs	r3, #52	@ 0x34
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2490      	movs	r4, #144	@ 0x90
 800217a:	193a      	adds	r2, r7, r4
 800217c:	6013      	str	r3, [r2, #0]

				// Read HX711 (timeout e.g. 50ms; pick 10SPS or 80SPS rate on your module pin)
				int32_t raw = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	633b      	str	r3, [r7, #48]	@ 0x30
				int ok = hx711_read_raw(&raw, 50);
 8002182:	2330      	movs	r3, #48	@ 0x30
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2132      	movs	r1, #50	@ 0x32
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fc7e 	bl	8001a8a <hx711_read_raw>
 800218e:	0003      	movs	r3, r0
 8002190:	2584      	movs	r5, #132	@ 0x84
 8002192:	197a      	adds	r2, r7, r5
 8002194:	6013      	str	r3, [r2, #0]

				tw = tlv_put_u32(tw, TLV_TS_MS, HAL_GetTick());
 8002196:	f000 ff27 	bl	8002fe8 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	193b      	adds	r3, r7, r4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7fe fd5d 	bl	8000c62 <tlv_put_u32>
 80021a8:	0003      	movs	r3, r0
 80021aa:	193a      	adds	r2, r7, r4
 80021ac:	6013      	str	r3, [r2, #0]

				if (ok) {
 80021ae:	197b      	adds	r3, r7, r5
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <comm_on_frame+0x106>
					// reuse u32 helper but cast the bytes of raw (two's complement)
					tw = tlv_put_i32(tw, TLV_LOAD_RAW, raw);  // if you don’t have tlv_put_i32 yet, I can add it; else use tlv_put_u32 on (uint32_t)raw
 80021b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021b8:	193b      	adds	r3, r7, r4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2130      	movs	r1, #48	@ 0x30
 80021be:	0018      	movs	r0, r3
 80021c0:	f7fe fd88 	bl	8000cd4 <tlv_put_i32>
 80021c4:	0003      	movs	r3, r0
 80021c6:	193a      	adds	r2, r7, r4
 80021c8:	6013      	str	r3, [r2, #0]
				}
				// Send telemetry to the command sender
				comm_send(f->tx_id, f->rx_id, MT_TEL_A, 0x01, /*reqid=*/0, t, (uint16_t)(tw - t));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7858      	ldrb	r0, [r3, #1]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7819      	ldrb	r1, [r3, #0]
 80021d2:	2434      	movs	r4, #52	@ 0x34
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2290      	movs	r2, #144	@ 0x90
 80021d8:	18ba      	adds	r2, r7, r2
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	2265      	movs	r2, #101	@ 0x65
 80021ee:	f7ff f919 	bl	8001424 <comm_send>
 80021f2:	e0a2      	b.n	800233a <comm_on_frame+0x276>
			}
			else if (cmd == CMD_STREAM) {
 80021f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d118      	bne.n	800222c <comm_on_frame+0x168>
			    uint32_t per = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_STREAM_PERIOD_MS, &per);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6898      	ldr	r0, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8999      	ldrh	r1, [r3, #12]
 8002206:	232c      	movs	r3, #44	@ 0x2c
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2240      	movs	r2, #64	@ 0x40
 800220c:	f7fe fe85 	bl	8000f1a <tlv_find_u32>

			    g_stream_period_ms = per;
 8002210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002212:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <comm_on_frame+0x2e4>)
 8002214:	601a      	str	r2, [r3, #0]
			    g_next_stream_ms   = HAL_GetTick() + 1;
 8002216:	f000 fee7 	bl	8002fe8 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	4b63      	ldr	r3, [pc, #396]	@ (80023ac <comm_on_frame+0x2e8>)
 8002220:	601a      	str	r2, [r3, #0]
			    g_stream_dest_id   = f->tx_id;          // send to whoever asked
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	785a      	ldrb	r2, [r3, #1]
 8002226:	4b62      	ldr	r3, [pc, #392]	@ (80023b0 <comm_on_frame+0x2ec>)
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e086      	b.n	800233a <comm_on_frame+0x276>

			    // result = OK (0)
			}
			else if (cmd == CMD_SET_ESC) {
 800222c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222e:	2b10      	cmp	r3, #16
 8002230:	d000      	beq.n	8002234 <comm_on_frame+0x170>
 8002232:	e07e      	b.n	8002332 <comm_on_frame+0x26e>
			    uint32_t ch = 0, us = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_ESC_CH, &ch);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6898      	ldr	r0, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	8999      	ldrh	r1, [r3, #12]
 8002244:	2328      	movs	r3, #40	@ 0x28
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2260      	movs	r2, #96	@ 0x60
 800224a:	f7fe fe66 	bl	8000f1a <tlv_find_u32>
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_ESC_US, &us);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6898      	ldr	r0, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	8999      	ldrh	r1, [r3, #12]
 8002256:	2324      	movs	r3, #36	@ 0x24
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2261      	movs	r2, #97	@ 0x61
 800225c:	f7fe fe5d 	bl	8000f1a <tlv_find_u32>

			    uint32_t result = 0; // OK
 8002260:	2300      	movs	r3, #0
 8002262:	228c      	movs	r2, #140	@ 0x8c
 8002264:	18b9      	adds	r1, r7, r2
 8002266:	600b      	str	r3, [r1, #0]
			    if ((ch != 1u) && (ch != 2u)) {
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	2b01      	cmp	r3, #1
 800226c:	d006      	beq.n	800227c <comm_on_frame+0x1b8>
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	2b02      	cmp	r3, #2
 8002272:	d003      	beq.n	800227c <comm_on_frame+0x1b8>
			        result = 2; // invalid channel
 8002274:	2302      	movs	r3, #2
 8002276:	18ba      	adds	r2, r7, r2
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e013      	b.n	80022a4 <comm_on_frame+0x1e0>
			    } else if (us < 800 || us > 2200) { // loose input guard; hard clamp to 1050..1940
 800227c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227e:	23c8      	movs	r3, #200	@ 0xc8
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	429a      	cmp	r2, r3
 8002284:	d303      	bcc.n	800228e <comm_on_frame+0x1ca>
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	4a4a      	ldr	r2, [pc, #296]	@ (80023b4 <comm_on_frame+0x2f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d904      	bls.n	8002298 <comm_on_frame+0x1d4>
			        result = 1; // out of plausible range
 800228e:	2301      	movs	r3, #1
 8002290:	228c      	movs	r2, #140	@ 0x8c
 8002292:	18ba      	adds	r2, r7, r2
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e005      	b.n	80022a4 <comm_on_frame+0x1e0>
			    } else {
			        esc_set_us(ch, us); // clamps internally to 1050..1940
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800229c:	0011      	movs	r1, r2
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff fd24 	bl	8001cec <esc_set_us>
			    }

			    uint8_t ack[24]; uint8_t *aw = ack;
 80022a4:	250c      	movs	r5, #12
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	2488      	movs	r4, #136	@ 0x88
 80022aa:	193a      	adds	r2, r7, r4
 80022ac:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 80022ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	214f      	movs	r1, #79	@ 0x4f
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7fe fcd3 	bl	8000c62 <tlv_put_u32>
 80022bc:	0003      	movs	r3, r0
 80022be:	0021      	movs	r1, r4
 80022c0:	187a      	adds	r2, r7, r1
 80022c2:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_RESULT, result);
 80022c4:	238c      	movs	r3, #140	@ 0x8c
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	000c      	movs	r4, r1
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2150      	movs	r1, #80	@ 0x50
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe fcc5 	bl	8000c62 <tlv_put_u32>
 80022d8:	0003      	movs	r3, r0
 80022da:	193a      	adds	r2, r7, r4
 80022dc:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_ESC_CH,     ch);
 80022de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2160      	movs	r1, #96	@ 0x60
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7fe fcbb 	bl	8000c62 <tlv_put_u32>
 80022ec:	0003      	movs	r3, r0
 80022ee:	193a      	adds	r2, r7, r4
 80022f0:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_ESC_US,     us);
 80022f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2161      	movs	r1, #97	@ 0x61
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fe fcb1 	bl	8000c62 <tlv_put_u32>
 8002300:	0003      	movs	r3, r0
 8002302:	0021      	movs	r1, r4
 8002304:	187a      	adds	r2, r7, r1
 8002306:	6013      	str	r3, [r2, #0]
			    comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7858      	ldrb	r0, [r3, #1]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	781c      	ldrb	r4, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	799b      	ldrb	r3, [r3, #6]
 8002314:	197a      	adds	r2, r7, r5
 8002316:	1879      	adds	r1, r7, r1
 8002318:	6809      	ldr	r1, [r1, #0]
 800231a:	1a8a      	subs	r2, r1, r2
 800231c:	b292      	uxth	r2, r2
 800231e:	9202      	str	r2, [sp, #8]
 8002320:	197a      	adds	r2, r7, r5
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2301      	movs	r3, #1
 8002328:	220b      	movs	r2, #11
 800232a:	0021      	movs	r1, r4
 800232c:	f7ff f87a 	bl	8001424 <comm_send>
 8002330:	e036      	b.n	80023a0 <comm_on_frame+0x2dc>
			    return;
			}

			else {
				result = 3; // BAD/unknown command
 8002332:	2303      	movs	r3, #3
 8002334:	2294      	movs	r2, #148	@ 0x94
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	6013      	str	r3, [r2, #0]
			}

			// Always send an ACK for MT_COMMAND, echoing the CMD_CODE
			uint8_t ack[16]; uint8_t *aw = ack;
 800233a:	2544      	movs	r5, #68	@ 0x44
 800233c:	197b      	adds	r3, r7, r5
 800233e:	2480      	movs	r4, #128	@ 0x80
 8002340:	193a      	adds	r2, r7, r4
 8002342:	6013      	str	r3, [r2, #0]
			aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 8002344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002346:	193b      	adds	r3, r7, r4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	214f      	movs	r1, #79	@ 0x4f
 800234c:	0018      	movs	r0, r3
 800234e:	f7fe fc88 	bl	8000c62 <tlv_put_u32>
 8002352:	0003      	movs	r3, r0
 8002354:	0021      	movs	r1, r4
 8002356:	187a      	adds	r2, r7, r1
 8002358:	6013      	str	r3, [r2, #0]
			aw = tlv_put_u32(aw, TLV_CMD_RESULT, result);
 800235a:	2394      	movs	r3, #148	@ 0x94
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	000c      	movs	r4, r1
 8002362:	187b      	adds	r3, r7, r1
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2150      	movs	r1, #80	@ 0x50
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe fc7a 	bl	8000c62 <tlv_put_u32>
 800236e:	0003      	movs	r3, r0
 8002370:	0021      	movs	r1, r4
 8002372:	187a      	adds	r2, r7, r1
 8002374:	6013      	str	r3, [r2, #0]
			comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7858      	ldrb	r0, [r3, #1]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	781c      	ldrb	r4, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	799b      	ldrb	r3, [r3, #6]
 8002382:	197a      	adds	r2, r7, r5
 8002384:	1879      	adds	r1, r7, r1
 8002386:	6809      	ldr	r1, [r1, #0]
 8002388:	1a8a      	subs	r2, r1, r2
 800238a:	b292      	uxth	r2, r2
 800238c:	9202      	str	r2, [sp, #8]
 800238e:	197a      	adds	r2, r7, r5
 8002390:	9201      	str	r2, [sp, #4]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	220b      	movs	r2, #11
 8002398:	0021      	movs	r1, r4
 800239a:	f7ff f843 	bl	8001424 <comm_send>
			return;
 800239e:	46c0      	nop			@ (mov r8, r8)

        }
    // ...
}
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b026      	add	sp, #152	@ 0x98
 80023a4:	bdb0      	pop	{r4, r5, r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	2000053c 	.word	0x2000053c
 80023ac:	20000540 	.word	0x20000540
 80023b0:	20000004 	.word	0x20000004
 80023b4:	00000898 	.word	0x00000898

080023b8 <telemetry_service>:

static void telemetry_service(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0a4      	sub	sp, #144	@ 0x90
 80023bc:	af04      	add	r7, sp, #16
    if (g_stream_period_ms == 0) return;
 80023be:	4b77      	ldr	r3, [pc, #476]	@ (800259c <telemetry_service+0x1e4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d100      	bne.n	80023c8 <telemetry_service+0x10>
 80023c6:	e0e3      	b.n	8002590 <telemetry_service+0x1d8>

    uint32_t now = HAL_GetTick();
 80023c8:	f000 fe0e 	bl	8002fe8 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    // not time yet?
    if ((int32_t)(now - g_next_stream_ms) < 0) return;
 80023d0:	4b73      	ldr	r3, [pc, #460]	@ (80025a0 <telemetry_service+0x1e8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	d500      	bpl.n	80023dc <telemetry_service+0x24>
 80023da:	e0db      	b.n	8002594 <telemetry_service+0x1dc>
    g_next_stream_ms = now + g_stream_period_ms;
 80023dc:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <telemetry_service+0x1e4>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e2:	18d2      	adds	r2, r2, r3
 80023e4:	4b6e      	ldr	r3, [pc, #440]	@ (80025a0 <telemetry_service+0x1e8>)
 80023e6:	601a      	str	r2, [r3, #0]

    extern int hx711_dout_level(void);

    // read HX711 if ready (non-blocking)
    int32_t raw = 0; int ok = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80023ec:	2300      	movs	r3, #0
 80023ee:	677b      	str	r3, [r7, #116]	@ 0x74
    if (hx711_dout_level() == 0) {        // data ready low
 80023f0:	f7ff fb3c 	bl	8001a6c <hx711_dout_level>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d110      	bne.n	800241a <telemetry_service+0x62>
        ok = hx711_read_raw(&raw, 0);     // no wait
 80023f8:	2364      	movs	r3, #100	@ 0x64
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2100      	movs	r1, #0
 80023fe:	0018      	movs	r0, r3
 8002400:	f7ff fb43 	bl	8001a8a <hx711_read_raw>
 8002404:	0003      	movs	r3, r0
 8002406:	677b      	str	r3, [r7, #116]	@ 0x74
        if (ok) { g_last_raw = raw; g_last_raw_valid = 1; }
 8002408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <telemetry_service+0x62>
 800240e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002410:	4b64      	ldr	r3, [pc, #400]	@ (80025a4 <telemetry_service+0x1ec>)
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4b64      	ldr	r3, [pc, #400]	@ (80025a8 <telemetry_service+0x1f0>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
    }

    uint8_t t[96]; uint8_t *tw = t;
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_TS_MS, now);
 800241e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002420:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002422:	2101      	movs	r1, #1
 8002424:	0018      	movs	r0, r3
 8002426:	f7fe fc1c 	bl	8000c62 <tlv_put_u32>
 800242a:	0003      	movs	r3, r0
 800242c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC1_US, g_esc1_us);
 800242e:	4b5f      	ldr	r3, [pc, #380]	@ (80025ac <telemetry_service+0x1f4>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	001a      	movs	r2, r3
 8002434:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002436:	2162      	movs	r1, #98	@ 0x62
 8002438:	0018      	movs	r0, r3
 800243a:	f7fe fc12 	bl	8000c62 <tlv_put_u32>
 800243e:	0003      	movs	r3, r0
 8002440:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC2_US, g_esc2_us);
 8002442:	4b5b      	ldr	r3, [pc, #364]	@ (80025b0 <telemetry_service+0x1f8>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	001a      	movs	r2, r3
 8002448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800244a:	2163      	movs	r1, #99	@ 0x63
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe fc08 	bl	8000c62 <tlv_put_u32>
 8002452:	0003      	movs	r3, r0
 8002454:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_IC_IRQS,      ic_irq_count);
 8002456:	4b57      	ldr	r3, [pc, #348]	@ (80025b4 <telemetry_service+0x1fc>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245c:	2172      	movs	r1, #114	@ 0x72
 800245e:	0018      	movs	r0, r3
 8002460:	f7fe fbff 	bl	8000c62 <tlv_put_u32>
 8002464:	0003      	movs	r3, r0
 8002466:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_IC_PERIOD_US, ic_period_us);
 8002468:	4b53      	ldr	r3, [pc, #332]	@ (80025b8 <telemetry_service+0x200>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800246e:	2173      	movs	r1, #115	@ 0x73
 8002470:	0018      	movs	r0, r3
 8002472:	f7fe fbf6 	bl	8000c62 <tlv_put_u32>
 8002476:	0003      	movs	r3, r0
 8002478:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (g_last_raw_valid) tw = tlv_put_i32(tw, TLV_LOAD_RAW, g_last_raw);
 800247a:	4b4b      	ldr	r3, [pc, #300]	@ (80025a8 <telemetry_service+0x1f0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <telemetry_service+0xdc>
 8002482:	4b48      	ldr	r3, [pc, #288]	@ (80025a4 <telemetry_service+0x1ec>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002488:	2130      	movs	r1, #48	@ 0x30
 800248a:	0018      	movs	r0, r3
 800248c:	f7fe fc22 	bl	8000cd4 <tlv_put_i32>
 8002490:	0003      	movs	r3, r0
 8002492:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // RPM from capture
    if (ic_has_lock && ic_period_us) {
 8002494:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <telemetry_service+0x204>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d020      	beq.n	80024e0 <telemetry_service+0x128>
 800249e:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <telemetry_service+0x200>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01c      	beq.n	80024e0 <telemetry_service+0x128>
        const uint32_t P = 14; // rotor magnets (try 7 if you discover they mean pole pairs)
 80024a6:	230e      	movs	r3, #14
 80024a8:	673b      	str	r3, [r7, #112]	@ 0x70
        uint32_t hz  = 1000000u / ic_period_us;
 80024aa:	4b43      	ldr	r3, [pc, #268]	@ (80025b8 <telemetry_service+0x200>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0019      	movs	r1, r3
 80024b0:	4843      	ldr	r0, [pc, #268]	@ (80025c0 <telemetry_service+0x208>)
 80024b2:	f7fd fe29 	bl	8000108 <__udivsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        uint32_t rpm = (hz * 60u) / (P);
 80024ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024bc:	0013      	movs	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7fd fe1e 	bl	8000108 <__udivsi3>
 80024cc:	0003      	movs	r3, r0
 80024ce:	66bb      	str	r3, [r7, #104]	@ 0x68
        tw = tlv_put_u32(tw, TLV_ESC_RPM1, rpm);
 80024d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80024d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024d4:	2170      	movs	r1, #112	@ 0x70
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7fe fbc3 	bl	8000c62 <tlv_put_u32>
 80024dc:	0003      	movs	r3, r0
 80024de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }


    // new voltage TLVs (always include)
    adc_compute_mv();
 80024e0:	f7ff fc64 	bl	8001dac <adc_compute_mv>
    tw = tlv_put_u32(tw, TLV_VIN1_MV, g_vin1_mV);
 80024e4:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <telemetry_service+0x20c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ea:	2180      	movs	r1, #128	@ 0x80
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7fe fbb8 	bl	8000c62 <tlv_put_u32>
 80024f2:	0003      	movs	r3, r0
 80024f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_VIN2_MV, g_vin2_mV);
 80024f6:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <telemetry_service+0x210>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024fc:	2181      	movs	r1, #129	@ 0x81
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fe fbaf 	bl	8000c62 <tlv_put_u32>
 8002504:	0003      	movs	r3, r0
 8002506:	67fb      	str	r3, [r7, #124]	@ 0x7c

    tw = tlv_put_u32(tw, 0x90, g_adc[0]); // RAW_PA3
 8002508:	4b30      	ldr	r3, [pc, #192]	@ (80025cc <telemetry_service+0x214>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	001a      	movs	r2, r3
 8002510:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002512:	2190      	movs	r1, #144	@ 0x90
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe fba4 	bl	8000c62 <tlv_put_u32>
 800251a:	0003      	movs	r3, r0
 800251c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0x91, g_adc[1]); // RAW_PA4
 800251e:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <telemetry_service+0x214>)
 8002520:	885b      	ldrh	r3, [r3, #2]
 8002522:	b29b      	uxth	r3, r3
 8002524:	001a      	movs	r2, r3
 8002526:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002528:	2191      	movs	r1, #145	@ 0x91
 800252a:	0018      	movs	r0, r3
 800252c:	f7fe fb99 	bl	8000c62 <tlv_put_u32>
 8002530:	0003      	movs	r3, r0
 8002532:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0x92, g_adc[2]); // RAW_VREFINT
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <telemetry_service+0x214>)
 8002536:	889b      	ldrh	r3, [r3, #4]
 8002538:	b29b      	uxth	r3, r3
 800253a:	001a      	movs	r2, r3
 800253c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800253e:	2192      	movs	r1, #146	@ 0x92
 8002540:	0018      	movs	r0, r3
 8002542:	f7fe fb8e 	bl	8000c62 <tlv_put_u32>
 8002546:	0003      	movs	r3, r0
 8002548:	67fb      	str	r3, [r7, #124]	@ 0x7c

    tw = tlv_put_i32(tw, TLV_I1_MA, g_i1_mA);
 800254a:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <telemetry_service+0x218>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002550:	2182      	movs	r1, #130	@ 0x82
 8002552:	0018      	movs	r0, r3
 8002554:	f7fe fbbe 	bl	8000cd4 <tlv_put_i32>
 8002558:	0003      	movs	r3, r0
 800255a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_i32(tw, TLV_I2_MA, g_i2_mA);
 800255c:	4b1d      	ldr	r3, [pc, #116]	@ (80025d4 <telemetry_service+0x21c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002562:	2183      	movs	r1, #131	@ 0x83
 8002564:	0018      	movs	r0, r3
 8002566:	f7fe fbb5 	bl	8000cd4 <tlv_put_i32>
 800256a:	0003      	movs	r3, r0
 800256c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // send telemetry to whoever requested streaming
    extern int comm_send(uint8_t rx_id, uint8_t tx_id, uint8_t msg_type,
                         uint8_t flags, uint8_t reqid, const uint8_t *payload, uint16_t payload_len);

    comm_send(g_stream_dest_id, 0x20/*MCU id*/, MT_TEL_A, 0x01, 0, t, (uint16_t)(tw - t));
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <telemetry_service+0x220>)
 8002570:	7818      	ldrb	r0, [r3, #0]
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	b29b      	uxth	r3, r3
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2301      	movs	r3, #1
 8002586:	2265      	movs	r2, #101	@ 0x65
 8002588:	2120      	movs	r1, #32
 800258a:	f7fe ff4b 	bl	8001424 <comm_send>
 800258e:	e002      	b.n	8002596 <telemetry_service+0x1de>
    if (g_stream_period_ms == 0) return;
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	e000      	b.n	8002596 <telemetry_service+0x1de>
    if ((int32_t)(now - g_next_stream_ms) < 0) return;
 8002594:	46c0      	nop			@ (mov r8, r8)
}
 8002596:	46bd      	mov	sp, r7
 8002598:	b020      	add	sp, #128	@ 0x80
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000053c 	.word	0x2000053c
 80025a0:	20000540 	.word	0x20000540
 80025a4:	20000558 	.word	0x20000558
 80025a8:	2000055c 	.word	0x2000055c
 80025ac:	20000006 	.word	0x20000006
 80025b0:	20000008 	.word	0x20000008
 80025b4:	20000564 	.word	0x20000564
 80025b8:	20000560 	.word	0x20000560
 80025bc:	20000568 	.word	0x20000568
 80025c0:	000f4240 	.word	0x000f4240
 80025c4:	20000550 	.word	0x20000550
 80025c8:	20000554 	.word	0x20000554
 80025cc:	20000544 	.word	0x20000544
 80025d0:	20000534 	.word	0x20000534
 80025d4:	20000538 	.word	0x20000538
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7f1b      	ldrb	r3, [r3, #28]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d14a      	bne.n	8002682 <HAL_TIM_IC_CaptureCallback+0xa6>
	{
		if(first_cap_flagMot1 == 0)
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_TIM_IC_CaptureCallback+0x30>
		{
			IC_Val1Mot1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2104      	movs	r1, #4
 80025f8:	0018      	movs	r0, r3
 80025fa:	f003 fba5 	bl	8005d48 <HAL_TIM_ReadCapturedValue>
 80025fe:	0002      	movs	r2, r0
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002602:	601a      	str	r2, [r3, #0]
			first_cap_flagMot1 = 1;
 8002604:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
			first_cap_flagMot2 = 0;
		}
	}
	*/
}
 800260a:	e03a      	b.n	8002682 <HAL_TIM_IC_CaptureCallback+0xa6>
			IC_Val2Mot1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2104      	movs	r1, #4
 8002610:	0018      	movs	r0, r3
 8002612:	f003 fb99 	bl	8005d48 <HAL_TIM_ReadCapturedValue>
 8002616:	0002      	movs	r2, r0
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800261a:	601a      	str	r2, [r3, #0]
			if(IC_Val2Mot1 > IC_Val1Mot1)
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d907      	bls.n	8002638 <HAL_TIM_IC_CaptureCallback+0x5c>
				DiffMot1 = IC_Val2Mot1 - IC_Val1Mot1;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1ad2      	subs	r2, r2, r3
 8002632:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e00d      	b.n	8002654 <HAL_TIM_IC_CaptureCallback+0x78>
			else if(IC_Val1Mot1 > IC_Val2Mot1)
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d907      	bls.n	8002654 <HAL_TIM_IC_CaptureCallback+0x78>
				DiffMot1 = (0xffffffff - IC_Val1Mot1) + IC_Val2Mot1;
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002652:	601a      	str	r2, [r3, #0]
			float refClock = TIMCLK/(PRESCALER);
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002656:	60fb      	str	r3, [r7, #12]
			freqMot1 = refClock/DiffMot1;
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0018      	movs	r0, r3
 800265e:	f7fe f851 	bl	8000704 <__aeabi_ui2f>
 8002662:	1c03      	adds	r3, r0, #0
 8002664:	1c19      	adds	r1, r3, #0
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7fd ff36 	bl	80004d8 <__aeabi_fdiv>
 800266c:	1c03      	adds	r3, r0, #0
 800266e:	1c1a      	adds	r2, r3, #0
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002672:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
			first_cap_flagMot1 = 0;
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	2000052c 	.word	0x2000052c
 8002690:	20000520 	.word	0x20000520
 8002694:	20000524 	.word	0x20000524
 8002698:	20000528 	.word	0x20000528
 800269c:	47c35000 	.word	0x47c35000
 80026a0:	20000530 	.word	0x20000530

080026a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026aa:	f000 fc43 	bl	8002f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ae:	f000 f83d 	bl	800272c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b2:	f7ff f935 	bl	8001920 <MX_GPIO_Init>
  MX_DMA_Init();
 80026b6:	f7ff f90d 	bl	80018d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026ba:	f000 fb35 	bl	8002d28 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80026be:	f7ff fa39 	bl	8001b34 <MX_I2C1_Init>
  MX_TIM1_Init();
 80026c2:	f000 f92f 	bl	8002924 <MX_TIM1_Init>
  MX_ADC_Init();
 80026c6:	f7fe f979 	bl	80009bc <MX_ADC_Init>
  MX_TIM2_Init();
 80026ca:	f000 f9ed 	bl	8002aa8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <main+0x78>)
 80026d0:	2100      	movs	r1, #0
 80026d2:	0018      	movs	r0, r3
 80026d4:	f002 ff04 	bl	80054e0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <main+0x78>)
 80026da:	2104      	movs	r1, #4
 80026dc:	0018      	movs	r0, r3
 80026de:	f002 feff 	bl	80054e0 <HAL_TIM_IC_Start_IT>
  esc_init();
 80026e2:	f7ff faef 	bl	8001cc4 <esc_init>

  // apply initial µs (will be overwritten by commands)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1050);
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <main+0x7c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <main+0x80>)
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1050);
 80026ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <main+0x7c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <main+0x80>)
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40

  adc_try_start();          // non-fatal start (sets g_adc_ok)
 80026f6:	f7ff fb27 	bl	8001d48 <adc_try_start>

  comm_init(&huart1);
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <main+0x84>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7fe ff45 	bl	800158c <comm_init>
  uint32_t last_hello = HAL_GetTick();
 8002702:	f000 fc71 	bl	8002fe8 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	607b      	str	r3, [r7, #4]

  hx711_init();
 800270a:	f7ff f9b7 	bl	8001a7c <hx711_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  comm_poll();
 800270e:	f7ff f817 	bl	8001740 <comm_poll>
	  telemetry_service();
 8002712:	f7ff fe51 	bl	80023b8 <telemetry_service>
	  comm_poll();
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	e7f9      	b.n	800270e <main+0x6a>
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	200005b4 	.word	0x200005b4
 8002720:	2000056c 	.word	0x2000056c
 8002724:	0000041a 	.word	0x0000041a
 8002728:	200005fc 	.word	0x200005fc

0800272c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b095      	sub	sp, #84	@ 0x54
 8002730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002732:	2420      	movs	r4, #32
 8002734:	193b      	adds	r3, r7, r4
 8002736:	0018      	movs	r0, r3
 8002738:	2330      	movs	r3, #48	@ 0x30
 800273a:	001a      	movs	r2, r3
 800273c:	2100      	movs	r1, #0
 800273e:	f005 fa5e 	bl	8007bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002742:	2310      	movs	r3, #16
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	0018      	movs	r0, r3
 8002748:	2310      	movs	r3, #16
 800274a:	001a      	movs	r2, r3
 800274c:	2100      	movs	r1, #0
 800274e:	f005 fa56 	bl	8007bfe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002752:	003b      	movs	r3, r7
 8002754:	0018      	movs	r0, r3
 8002756:	2310      	movs	r3, #16
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f005 fa4f 	bl	8007bfe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002760:	0021      	movs	r1, r4
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2212      	movs	r2, #18
 8002766:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2201      	movs	r2, #1
 800276c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800276e:	187b      	adds	r3, r7, r1
 8002770:	2201      	movs	r2, #1
 8002772:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002774:	187b      	adds	r3, r7, r1
 8002776:	2210      	movs	r2, #16
 8002778:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2210      	movs	r2, #16
 800277e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2202      	movs	r2, #2
 8002784:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	22a0      	movs	r2, #160	@ 0xa0
 8002790:	0392      	lsls	r2, r2, #14
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2200      	movs	r2, #0
 8002798:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800279a:	187b      	adds	r3, r7, r1
 800279c:	0018      	movs	r0, r3
 800279e:	f001 ffcd 	bl	800473c <HAL_RCC_OscConfig>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d001      	beq.n	80027aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80027a6:	f000 f82b 	bl	8002800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027aa:	2110      	movs	r1, #16
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	2207      	movs	r2, #7
 80027b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2202      	movs	r2, #2
 80027b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2200      	movs	r2, #0
 80027c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2101      	movs	r1, #1
 80027c8:	0018      	movs	r0, r3
 80027ca:	f002 fad1 	bl	8004d70 <HAL_RCC_ClockConfig>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80027d2:	f000 f815 	bl	8002800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80027d6:	003b      	movs	r3, r7
 80027d8:	2221      	movs	r2, #33	@ 0x21
 80027da:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80027dc:	003b      	movs	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80027e2:	003b      	movs	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e8:	003b      	movs	r3, r7
 80027ea:	0018      	movs	r0, r3
 80027ec:	f002 fc06 	bl	8004ffc <HAL_RCCEx_PeriphCLKConfig>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80027f4:	f000 f804 	bl	8002800 <Error_Handler>
  }
}
 80027f8:	46c0      	nop			@ (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b015      	add	sp, #84	@ 0x54
 80027fe:	bd90      	pop	{r4, r7, pc}

08002800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002804:	b672      	cpsid	i
}
 8002806:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	e7fd      	b.n	8002808 <Error_Handler+0x8>

0800280c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <HAL_MspInit+0x44>)
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_MspInit+0x44>)
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <HAL_MspInit+0x44>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2201      	movs	r2, #1
 8002824:	4013      	ands	r3, r2
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_MspInit+0x44>)
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_MspInit+0x44>)
 8002830:	2180      	movs	r1, #128	@ 0x80
 8002832:	0549      	lsls	r1, r1, #21
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_MspInit+0x44>)
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4013      	ands	r3, r2
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	40021000 	.word	0x40021000

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	e7fd      	b.n	8002858 <NMI_Handler+0x4>

0800285c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	e7fd      	b.n	8002860 <HardFault_Handler+0x4>

08002864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002868:	46c0      	nop			@ (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800287c:	f000 fba2 	bl	8002fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800288c:	4b03      	ldr	r3, [pc, #12]	@ (800289c <DMA1_Channel1_IRQHandler+0x14>)
 800288e:	0018      	movs	r0, r3
 8002890:	f001 fb89 	bl	8003fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	20000074 	.word	0x20000074

080028a0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80028a6:	0018      	movs	r0, r3
 80028a8:	f001 fb7d 	bl	8003fa6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80028ae:	0018      	movs	r0, r3
 80028b0:	f001 fb79 	bl	8003fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80028b4:	46c0      	nop			@ (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	200006c8 	.word	0x200006c8
 80028c0:	20000684 	.word	0x20000684

080028c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <TIM2_IRQHandler+0x14>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f002 ff10 	bl	80056f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	200005b4 	.word	0x200005b4

080028dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) &&
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <USART1_IRQHandler+0x38>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2210      	movs	r2, #16
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d10b      	bne.n	8002906 <USART1_IRQHandler+0x2a>
	    __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE)) {
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <USART1_IRQHandler+0x38>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2210      	movs	r2, #16
 80028f6:	4013      	ands	r3, r2
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) &&
 80028f8:	d005      	beq.n	8002906 <USART1_IRQHandler+0x2a>
	    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <USART1_IRQHandler+0x38>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2210      	movs	r2, #16
 8002900:	621a      	str	r2, [r3, #32]
	    comm_on_uart_idle_irq();   // <- tells the parser new bytes arrived
 8002902:	f7fe fe6f 	bl	80015e4 <comm_on_uart_idle_irq>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002906:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <USART1_IRQHandler+0x38>)
 8002908:	0018      	movs	r0, r3
 800290a:	f004 f8b3 	bl	8006a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200005fc 	.word	0x200005fc

08002918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b096      	sub	sp, #88	@ 0x58
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	2348      	movs	r3, #72	@ 0x48
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	0018      	movs	r0, r3
 8002930:	2310      	movs	r3, #16
 8002932:	001a      	movs	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	f005 f962 	bl	8007bfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293a:	2340      	movs	r3, #64	@ 0x40
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	0018      	movs	r0, r3
 8002940:	2308      	movs	r3, #8
 8002942:	001a      	movs	r2, r3
 8002944:	2100      	movs	r1, #0
 8002946:	f005 f95a 	bl	8007bfe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294a:	2324      	movs	r3, #36	@ 0x24
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	0018      	movs	r0, r3
 8002950:	231c      	movs	r3, #28
 8002952:	001a      	movs	r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	f005 f952 	bl	8007bfe <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	0018      	movs	r0, r3
 800295e:	2320      	movs	r3, #32
 8002960:	001a      	movs	r2, r3
 8002962:	2100      	movs	r1, #0
 8002964:	f005 f94b 	bl	8007bfe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <MX_TIM1_Init+0x174>)
 800296a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a9c <MX_TIM1_Init+0x178>)
 800296c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 800296e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002970:	222f      	movs	r2, #47	@ 0x2f
 8002972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b48      	ldr	r3, [pc, #288]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <MX_TIM1_Init+0x174>)
 800297c:	4a48      	ldr	r2, [pc, #288]	@ (8002aa0 <MX_TIM1_Init+0x17c>)
 800297e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002980:	4b45      	ldr	r3, [pc, #276]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002986:	4b44      	ldr	r3, [pc, #272]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800298c:	4b42      	ldr	r3, [pc, #264]	@ (8002a98 <MX_TIM1_Init+0x174>)
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002992:	4b41      	ldr	r3, [pc, #260]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002994:	0018      	movs	r0, r3
 8002996:	f002 fbff 	bl	8005198 <HAL_TIM_Base_Init>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800299e:	f7ff ff2f 	bl	8002800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a2:	2148      	movs	r1, #72	@ 0x48
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	0152      	lsls	r2, r2, #5
 80029aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029ac:	187a      	adds	r2, r7, r1
 80029ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <MX_TIM1_Init+0x174>)
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f003 f8f4 	bl	8005ba0 <HAL_TIM_ConfigClockSource>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80029bc:	f7ff ff20 	bl	8002800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029c0:	4b35      	ldr	r3, [pc, #212]	@ (8002a98 <MX_TIM1_Init+0x174>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f002 fc38 	bl	8005238 <HAL_TIM_PWM_Init>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80029cc:	f7ff ff18 	bl	8002800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d0:	2140      	movs	r1, #64	@ 0x40
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029de:	187a      	adds	r2, r7, r1
 80029e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <MX_TIM1_Init+0x174>)
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f003 fe43 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80029ee:	f7ff ff07 	bl	8002800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f2:	2124      	movs	r1, #36	@ 0x24
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2260      	movs	r2, #96	@ 0x60
 80029f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1050;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	4a29      	ldr	r2, [pc, #164]	@ (8002aa4 <MX_TIM1_Init+0x180>)
 80029fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	2200      	movs	r2, #0
 8002a0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2200      	movs	r2, #0
 8002a16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a1e:	1879      	adds	r1, r7, r1
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	0018      	movs	r0, r3
 8002a26:	f002 fff5 	bl	8005a14 <HAL_TIM_PWM_ConfigChannel>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002a2e:	f7ff fee7 	bl	8002800 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a32:	2324      	movs	r3, #36	@ 0x24
 8002a34:	18f9      	adds	r1, r7, r3
 8002a36:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002a38:	220c      	movs	r2, #12
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f002 ffea 	bl	8005a14 <HAL_TIM_PWM_ConfigChannel>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002a44:	f7ff fedc 	bl	8002800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2280      	movs	r2, #128	@ 0x80
 8002a6a:	0192      	lsls	r2, r2, #6
 8002a6c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	2200      	movs	r2, #0
 8002a72:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a74:	1d3a      	adds	r2, r7, #4
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f003 fe50 	bl	8006720 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8002a84:	f7ff febc 	bl	8002800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <MX_TIM1_Init+0x174>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 f90c 	bl	8002ca8 <HAL_TIM_MspPostInit>

}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b016      	add	sp, #88	@ 0x58
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000056c 	.word	0x2000056c
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	00004e1f 	.word	0x00004e1f
 8002aa4:	0000041a 	.word	0x0000041a

08002aa8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aae:	2310      	movs	r3, #16
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f005 f8a0 	bl	8007bfe <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002abe:	003b      	movs	r3, r7
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f005 f899 	bl	8007bfe <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002acc:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002ace:	2280      	movs	r2, #128	@ 0x80
 8002ad0:	05d2      	lsls	r2, r2, #23
 8002ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800-1;
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002ad6:	4a28      	ldr	r2, [pc, #160]	@ (8002b78 <MX_TIM2_Init+0xd0>)
 8002ad8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b26      	ldr	r3, [pc, #152]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4252      	negs	r2, r2
 8002ae6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae8:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002af6:	0018      	movs	r0, r3
 8002af8:	f002 fca2 	bl	8005440 <HAL_TIM_IC_Init>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002b00:	f7ff fe7e 	bl	8002800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b04:	2110      	movs	r1, #16
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b12:	187a      	adds	r2, r7, r1
 8002b14:	4b17      	ldr	r3, [pc, #92]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002b16:	0011      	movs	r1, r2
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f003 fda9 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b22:	f7ff fe6d 	bl	8002800 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b26:	003b      	movs	r3, r7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b2c:	003b      	movs	r3, r7
 8002b2e:	2201      	movs	r2, #1
 8002b30:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b32:	003b      	movs	r3, r7
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 4;
 8002b38:	003b      	movs	r3, r7
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b3e:	0039      	movs	r1, r7
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	0018      	movs	r0, r3
 8002b46:	f002 fec1 	bl	80058cc <HAL_TIM_IC_ConfigChannel>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002b4e:	f7ff fe57 	bl	8002800 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 8002b52:	003b      	movs	r3, r7
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b58:	0039      	movs	r1, r7
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_TIM2_Init+0xcc>)
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f002 feb4 	bl	80058cc <HAL_TIM_IC_ConfigChannel>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002b68:	f7ff fe4a 	bl	8002800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b006      	add	sp, #24
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200005b4 	.word	0x200005b4
 8002b78:	000012bf 	.word	0x000012bf

08002b7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <HAL_TIM_Base_MspInit+0x38>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10d      	bne.n	8002baa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8002b94:	2180      	movs	r1, #128	@ 0x80
 8002b96:	0109      	lsls	r1, r1, #4
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b08b      	sub	sp, #44	@ 0x2c
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	2414      	movs	r4, #20
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	0018      	movs	r0, r3
 8002bca:	2314      	movs	r3, #20
 8002bcc:	001a      	movs	r2, r3
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f005 f815 	bl	8007bfe <memset>
  if(tim_icHandle->Instance==TIM2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	05db      	lsls	r3, r3, #23
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d15b      	bne.n	8002c98 <HAL_TIM_IC_MspInit+0xdc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be0:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	61da      	str	r2, [r3, #28]
 8002bec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf8:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	0289      	lsls	r1, r1, #10
 8002c02:	430a      	orrs	r2, r1
 8002c04:	615a      	str	r2, [r3, #20]
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c14:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002c1a:	2180      	movs	r1, #128	@ 0x80
 8002c1c:	02c9      	lsls	r1, r1, #11
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <HAL_TIM_IC_MspInit+0xe4>)
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	02db      	lsls	r3, r3, #11
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	2220      	movs	r2, #32
 8002c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	2202      	movs	r2, #2
 8002c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2201      	movs	r2, #1
 8002c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	193a      	adds	r2, r7, r4
 8002c50:	2390      	movs	r3, #144	@ 0x90
 8002c52:	05db      	lsls	r3, r3, #23
 8002c54:	0011      	movs	r1, r2
 8002c56:	0018      	movs	r0, r3
 8002c58:	f001 fa90 	bl	800417c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c5c:	0021      	movs	r1, r4
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2208      	movs	r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2202      	movs	r2, #2
 8002c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2202      	movs	r2, #2
 8002c7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <HAL_TIM_IC_MspInit+0xe8>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f001 fa7a 	bl	800417c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	200f      	movs	r0, #15
 8002c8e:	f001 f82d 	bl	8003cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c92:	200f      	movs	r0, #15
 8002c94:	f001 f83f 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b00b      	add	sp, #44	@ 0x2c
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48000400 	.word	0x48000400

08002ca8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	240c      	movs	r4, #12
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	2314      	movs	r3, #20
 8002cb8:	001a      	movs	r2, r3
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f004 ff9f 	bl	8007bfe <memset>
  if(timHandle->Instance==TIM1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	@ (8002d20 <HAL_TIM_MspPostInit+0x78>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d125      	bne.n	8002d16 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <HAL_TIM_MspPostInit+0x7c>)
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <HAL_TIM_MspPostInit+0x7c>)
 8002cd0:	2180      	movs	r1, #128	@ 0x80
 8002cd2:	0289      	lsls	r1, r1, #10
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	615a      	str	r2, [r3, #20]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_TIM_MspPostInit+0x7c>)
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	2380      	movs	r3, #128	@ 0x80
 8002cde:	029b      	lsls	r3, r3, #10
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	2290      	movs	r2, #144	@ 0x90
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	0021      	movs	r1, r4
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2202      	movs	r2, #2
 8002d06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	187a      	adds	r2, r7, r1
 8002d0a:	2390      	movs	r3, #144	@ 0x90
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f001 fa33 	bl	800417c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b009      	add	sp, #36	@ 0x24
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40021000 	.word	0x40021000

08002d28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d2e:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <MX_USART1_UART_Init+0x5c>)
 8002d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002d32:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d34:	22e1      	movs	r2, #225	@ 0xe1
 8002d36:	0312      	lsls	r2, r2, #12
 8002d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d4e:	220c      	movs	r2, #12
 8002d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d58:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <MX_USART1_UART_Init+0x58>)
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f003 fd45 	bl	80067fc <HAL_UART_Init>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d001      	beq.n	8002d7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d76:	f7ff fd43 	bl	8002800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200005fc 	.word	0x200005fc
 8002d84:	40013800 	.word	0x40013800

08002d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b08b      	sub	sp, #44	@ 0x2c
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	2414      	movs	r4, #20
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	0018      	movs	r0, r3
 8002d96:	2314      	movs	r3, #20
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f004 ff2f 	bl	8007bfe <memset>
  if(uartHandle->Instance==USART1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a47      	ldr	r2, [pc, #284]	@ (8002ec4 <HAL_UART_MspInit+0x13c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d000      	beq.n	8002dac <HAL_UART_MspInit+0x24>
 8002daa:	e087      	b.n	8002ebc <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dac:	4b46      	ldr	r3, [pc, #280]	@ (8002ec8 <HAL_UART_MspInit+0x140>)
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	4b45      	ldr	r3, [pc, #276]	@ (8002ec8 <HAL_UART_MspInit+0x140>)
 8002db2:	2180      	movs	r1, #128	@ 0x80
 8002db4:	01c9      	lsls	r1, r1, #7
 8002db6:	430a      	orrs	r2, r1
 8002db8:	619a      	str	r2, [r3, #24]
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_UART_MspInit+0x140>)
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	01db      	lsls	r3, r3, #7
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec8 <HAL_UART_MspInit+0x140>)
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec8 <HAL_UART_MspInit+0x140>)
 8002dce:	2180      	movs	r1, #128	@ 0x80
 8002dd0:	0289      	lsls	r1, r1, #10
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	615a      	str	r2, [r3, #20]
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec8 <HAL_UART_MspInit+0x140>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002de4:	0021      	movs	r1, r4
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	4a38      	ldr	r2, [pc, #224]	@ (8002ecc <HAL_UART_MspInit+0x144>)
 8002dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2202      	movs	r2, #2
 8002df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2201      	movs	r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	187a      	adds	r2, r7, r1
 8002e06:	2390      	movs	r3, #144	@ 0x90
 8002e08:	05db      	lsls	r3, r3, #23
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f001 f9b5 	bl	800417c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002e12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e14:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed4 <HAL_UART_MspInit+0x14c>)
 8002e16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e26:	2280      	movs	r2, #128	@ 0x80
 8002e28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e30:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e36:	4b26      	ldr	r3, [pc, #152]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e38:	2220      	movs	r2, #32
 8002e3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	0152      	lsls	r2, r2, #5
 8002e42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e44:	4b22      	ldr	r3, [pc, #136]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 ff82 	bl	8003d50 <HAL_DMA_Init>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002e50:	f7ff fcd6 	bl	8002800 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e58:	675a      	str	r2, [r3, #116]	@ 0x74
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <HAL_UART_MspInit+0x148>)
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e62:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <HAL_UART_MspInit+0x154>)
 8002e64:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e68:	2210      	movs	r2, #16
 8002e6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e72:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e78:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 ff5c 	bl	8003d50 <HAL_DMA_Init>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8002e9c:	f7ff fcb0 	bl	8002800 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002ea4:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <HAL_UART_MspInit+0x150>)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2100      	movs	r1, #0
 8002eb0:	201b      	movs	r0, #27
 8002eb2:	f000 ff1b 	bl	8003cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eb6:	201b      	movs	r0, #27
 8002eb8:	f000 ff2d 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ebc:	46c0      	nop			@ (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b00b      	add	sp, #44	@ 0x2c
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	00008004 	.word	0x00008004
 8002ed0:	20000684 	.word	0x20000684
 8002ed4:	40020030 	.word	0x40020030
 8002ed8:	200006c8 	.word	0x200006c8
 8002edc:	4002001c 	.word	0x4002001c

08002ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ee2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ee4:	f7ff fd18 	bl	8002918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee8:	480c      	ldr	r0, [pc, #48]	@ (8002f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002eea:	490d      	ldr	r1, [pc, #52]	@ (8002f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eec:	4a0d      	ldr	r2, [pc, #52]	@ (8002f24 <LoopForever+0xe>)
  movs r3, #0
 8002eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef0:	e002      	b.n	8002ef8 <LoopCopyDataInit>

08002ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef6:	3304      	adds	r3, #4

08002ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002efc:	d3f9      	bcc.n	8002ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efe:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f00:	4c0a      	ldr	r4, [pc, #40]	@ (8002f2c <LoopForever+0x16>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f04:	e001      	b.n	8002f0a <LoopFillZerobss>

08002f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f08:	3204      	adds	r2, #4

08002f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f0c:	d3fb      	bcc.n	8002f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f0e:	f004 fe7f 	bl	8007c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f12:	f7ff fbc7 	bl	80026a4 <main>

08002f16 <LoopForever>:

LoopForever:
    b LoopForever
 8002f16:	e7fe      	b.n	8002f16 <LoopForever>
  ldr   r0, =_estack
 8002f18:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f20:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002f24:	08007d48 	.word	0x08007d48
  ldr r2, =_sbss
 8002f28:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002f2c:	20000710 	.word	0x20000710

08002f30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f30:	e7fe      	b.n	8002f30 <ADC1_IRQHandler>
	...

08002f34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <HAL_Init+0x24>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_Init+0x24>)
 8002f3e:	2110      	movs	r1, #16
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 f809 	bl	8002f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f4a:	f7ff fc5f 	bl	800280c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	40022000 	.word	0x40022000

08002f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <HAL_InitTick+0x5c>)
 8002f66:	681c      	ldr	r4, [r3, #0]
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_InitTick+0x60>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	23fa      	movs	r3, #250	@ 0xfa
 8002f70:	0098      	lsls	r0, r3, #2
 8002f72:	f7fd f8c9 	bl	8000108 <__udivsi3>
 8002f76:	0003      	movs	r3, r0
 8002f78:	0019      	movs	r1, r3
 8002f7a:	0020      	movs	r0, r4
 8002f7c:	f7fd f8c4 	bl	8000108 <__udivsi3>
 8002f80:	0003      	movs	r3, r0
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fed7 	bl	8003d36 <HAL_SYSTICK_Config>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e00f      	b.n	8002fb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d80b      	bhi.n	8002fae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	425b      	negs	r3, r3
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 fea4 	bl	8003cec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_InitTick+0x64>)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b003      	add	sp, #12
 8002fb6:	bd90      	pop	{r4, r7, pc}
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	20000014 	.word	0x20000014
 8002fc0:	20000010 	.word	0x20000010

08002fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_IncTick+0x1c>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	001a      	movs	r2, r3
 8002fce:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <HAL_IncTick+0x20>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	18d2      	adds	r2, r2, r3
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_IncTick+0x20>)
 8002fd6:	601a      	str	r2, [r3, #0]
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	20000014 	.word	0x20000014
 8002fe4:	2000070c 	.word	0x2000070c

08002fe8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b02      	ldr	r3, [pc, #8]	@ (8002ff8 <HAL_GetTick+0x10>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	2000070c 	.word	0x2000070c

08002ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003004:	230f      	movs	r3, #15
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e125      	b.n	8003266 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2234      	movs	r2, #52	@ 0x34
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f7fd fd50 	bl	8000ad8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	2210      	movs	r2, #16
 800303e:	4013      	ands	r3, r2
 8003040:	d000      	beq.n	8003044 <HAL_ADC_Init+0x48>
 8003042:	e103      	b.n	800324c <HAL_ADC_Init+0x250>
 8003044:	230f      	movs	r3, #15
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d000      	beq.n	8003050 <HAL_ADC_Init+0x54>
 800304e:	e0fd      	b.n	800324c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800305a:	d000      	beq.n	800305e <HAL_ADC_Init+0x62>
 800305c:	e0f6      	b.n	800324c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003062:	4a83      	ldr	r2, [pc, #524]	@ (8003270 <HAL_ADC_Init+0x274>)
 8003064:	4013      	ands	r3, r2
 8003066:	2202      	movs	r2, #2
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2203      	movs	r2, #3
 8003076:	4013      	ands	r3, r2
 8003078:	2b01      	cmp	r3, #1
 800307a:	d112      	bne.n	80030a2 <HAL_ADC_Init+0xa6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	2b01      	cmp	r3, #1
 8003088:	d009      	beq.n	800309e <HAL_ADC_Init+0xa2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	401a      	ands	r2, r3
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	429a      	cmp	r2, r3
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_Init+0xa6>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_Init+0xa8>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d116      	bne.n	80030d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2218      	movs	r2, #24
 80030b0:	4393      	bics	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	0899      	lsrs	r1, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4964      	ldr	r1, [pc, #400]	@ (8003274 <HAL_ADC_Init+0x278>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7e1b      	ldrb	r3, [r3, #24]
 80030ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e5b      	ldrb	r3, [r3, #25]
 80030f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7e9b      	ldrb	r3, [r3, #26]
 80030f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	2b01      	cmp	r3, #1
 8003102:	d002      	beq.n	800310a <HAL_ADC_Init+0x10e>
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	015b      	lsls	r3, r3, #5
 8003108:	e000      	b.n	800310c <HAL_ADC_Init+0x110>
 800310a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800310c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003112:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d101      	bne.n	8003120 <HAL_ADC_Init+0x124>
 800311c:	2304      	movs	r3, #4
 800311e:	e000      	b.n	8003122 <HAL_ADC_Init+0x126>
 8003120:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003122:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2124      	movs	r1, #36	@ 0x24
 8003128:	5c5b      	ldrb	r3, [r3, r1]
 800312a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800312c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7edb      	ldrb	r3, [r3, #27]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d115      	bne.n	8003168 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7e9b      	ldrb	r3, [r3, #26]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	0252      	lsls	r2, r2, #9
 800314a:	4313      	orrs	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	e00b      	b.n	8003168 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003154:	2220      	movs	r2, #32
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	2201      	movs	r2, #1
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	23c2      	movs	r3, #194	@ 0xc2
 800316e:	33ff      	adds	r3, #255	@ 0xff
 8003170:	429a      	cmp	r2, r3
 8003172:	d007      	beq.n	8003184 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800317c:	4313      	orrs	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	055b      	lsls	r3, r3, #21
 800319c:	429a      	cmp	r2, r3
 800319e:	d01b      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d017      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d013      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d00f      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d00b      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d007      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d003      	beq.n	80031d8 <HAL_ADC_Init+0x1dc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	2b07      	cmp	r3, #7
 80031d6:	d112      	bne.n	80031fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2107      	movs	r1, #7
 80031e4:	438a      	bics	r2, r1
 80031e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6959      	ldr	r1, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	2207      	movs	r2, #7
 80031f4:	401a      	ands	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <HAL_ADC_Init+0x27c>)
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d10b      	bne.n	8003226 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	2203      	movs	r2, #3
 800321a:	4393      	bics	r3, r2
 800321c:	2201      	movs	r2, #1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003224:	e01c      	b.n	8003260 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322a:	2212      	movs	r2, #18
 800322c:	4393      	bics	r3, r2
 800322e:	2210      	movs	r2, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	2201      	movs	r2, #1
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800324a:	e009      	b.n	8003260 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	2210      	movs	r2, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003260:	230f      	movs	r3, #15
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
}
 8003266:	0018      	movs	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	b004      	add	sp, #16
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	fffffefd 	.word	0xfffffefd
 8003274:	fffe0219 	.word	0xfffe0219
 8003278:	833fffe7 	.word	0x833fffe7

0800327c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003288:	2317      	movs	r3, #23
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2204      	movs	r2, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d15e      	bne.n	800335a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2234      	movs	r2, #52	@ 0x34
 80032a0:	5c9b      	ldrb	r3, [r3, r2]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_Start_DMA+0x2e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e05e      	b.n	8003368 <HAL_ADC_Start_DMA+0xec>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2234      	movs	r2, #52	@ 0x34
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	7e5b      	ldrb	r3, [r3, #25]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d007      	beq.n	80032ca <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80032ba:	2317      	movs	r3, #23
 80032bc:	18fc      	adds	r4, r7, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 f9f9 	bl	80036b8 <ADC_Enable>
 80032c6:	0003      	movs	r3, r0
 80032c8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032ca:	2317      	movs	r3, #23
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d146      	bne.n	8003362 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	4a25      	ldr	r2, [pc, #148]	@ (8003370 <HAL_ADC_Start_DMA+0xf4>)
 80032da:	4013      	ands	r3, r2
 80032dc:	2280      	movs	r2, #128	@ 0x80
 80032de:	0052      	lsls	r2, r2, #1
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2234      	movs	r2, #52	@ 0x34
 80032f0:	2100      	movs	r1, #0
 80032f2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003374 <HAL_ADC_Start_DMA+0xf8>)
 80032fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <HAL_ADC_Start_DMA+0xfc>)
 8003302:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <HAL_ADC_Start_DMA+0x100>)
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	221c      	movs	r2, #28
 8003312:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2110      	movs	r1, #16
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2101      	movs	r1, #1
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3340      	adds	r3, #64	@ 0x40
 800333e:	0019      	movs	r1, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f000 fd4c 	bl	8003de0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2104      	movs	r1, #4
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e003      	b.n	8003362 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800335a:	2317      	movs	r3, #23
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003362:	2317      	movs	r3, #23
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	781b      	ldrb	r3, [r3, #0]
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b007      	add	sp, #28
 800336e:	bd90      	pop	{r4, r7, pc}
 8003370:	fffff0fe 	.word	0xfffff0fe
 8003374:	0800393d 	.word	0x0800393d
 8003378:	080039f1 	.word	0x080039f1
 800337c:	08003a0f 	.word	0x08003a0f

08003380 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003380:	b5b0      	push	{r4, r5, r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2234      	movs	r2, #52	@ 0x34
 8003394:	5c9b      	ldrb	r3, [r3, r2]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_ADC_Stop_DMA+0x1e>
 800339a:	2302      	movs	r3, #2
 800339c:	e05f      	b.n	800345e <HAL_ADC_Stop_DMA+0xde>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2234      	movs	r2, #52	@ 0x34
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80033a6:	250f      	movs	r5, #15
 80033a8:	197c      	adds	r4, r7, r5
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 fa78 	bl	80038a2 <ADC_ConversionStop>
 80033b2:	0003      	movs	r3, r0
 80033b4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80033b6:	0028      	movs	r0, r5
 80033b8:	183b      	adds	r3, r7, r0
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d147      	bne.n	8003450 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	438a      	bics	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	2221      	movs	r2, #33	@ 0x21
 80033d6:	5c9b      	ldrb	r3, [r3, r2]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d112      	bne.n	8003404 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	0005      	movs	r5, r0
 80033e4:	183c      	adds	r4, r7, r0
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 fd60 	bl	8003eac <HAL_DMA_Abort>
 80033ec:	0003      	movs	r3, r0
 80033ee:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80033f0:	197b      	adds	r3, r7, r5
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	2240      	movs	r2, #64	@ 0x40
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2110      	movs	r1, #16
 8003410:	438a      	bics	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003414:	220f      	movs	r2, #15
 8003416:	18bb      	adds	r3, r7, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800341e:	18bc      	adds	r4, r7, r2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0018      	movs	r0, r3
 8003424:	f000 f9cc 	bl	80037c0 <ADC_Disable>
 8003428:	0003      	movs	r3, r0
 800342a:	7023      	strb	r3, [r4, #0]
 800342c:	e003      	b.n	8003436 <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f9c5 	bl	80037c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003436:	230f      	movs	r3, #15
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	4a08      	ldr	r2, [pc, #32]	@ (8003468 <HAL_ADC_Stop_DMA+0xe8>)
 8003446:	4013      	ands	r3, r2
 8003448:	2201      	movs	r2, #1
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2234      	movs	r2, #52	@ 0x34
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	fffffefe 	.word	0xfffffefe

0800346c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a6:	230f      	movs	r3, #15
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d011      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x46>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00d      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x46>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d009      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x46>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d005      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x46>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d001      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x46>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2234      	movs	r2, #52	@ 0x34
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x54>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0d0      	b.n	8003692 <HAL_ADC_ConfigChannel+0x1f6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2234      	movs	r2, #52	@ 0x34
 80034f4:	2101      	movs	r1, #1
 80034f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2204      	movs	r2, #4
 8003500:	4013      	ands	r3, r2
 8003502:	d000      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x6a>
 8003504:	e0b4      	b.n	8003670 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a64      	ldr	r2, [pc, #400]	@ (800369c <HAL_ADC_ConfigChannel+0x200>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x76>
 8003510:	e082      	b.n	8003618 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	409a      	lsls	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	055b      	lsls	r3, r3, #21
 8003530:	429a      	cmp	r2, r3
 8003532:	d037      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d033      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	2b02      	cmp	r3, #2
 8003542:	d02f      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	2b03      	cmp	r3, #3
 800354a:	d02b      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	2b04      	cmp	r3, #4
 8003552:	d027      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	2b05      	cmp	r3, #5
 800355a:	d023      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	2b06      	cmp	r3, #6
 8003562:	d01f      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	2b07      	cmp	r3, #7
 800356a:	d01b      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2107      	movs	r1, #7
 8003578:	400b      	ands	r3, r1
 800357a:	429a      	cmp	r2, r3
 800357c:	d012      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2107      	movs	r1, #7
 800358a:	438a      	bics	r2, r1
 800358c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6959      	ldr	r1, [r3, #20]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2207      	movs	r2, #7
 800359a:	401a      	ands	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d007      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x120>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b11      	cmp	r3, #17
 80035b2:	d003      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x120>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b12      	cmp	r3, #18
 80035ba:	d163      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80035bc:	4b38      	ldr	r3, [pc, #224]	@ (80036a0 <HAL_ADC_ConfigChannel+0x204>)
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d009      	beq.n	80035dc <HAL_ADC_ConfigChannel+0x140>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b11      	cmp	r3, #17
 80035ce:	d102      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x13a>
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	03db      	lsls	r3, r3, #15
 80035d4:	e004      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x144>
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	045b      	lsls	r3, r3, #17
 80035da:	e001      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x144>
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	4a2f      	ldr	r2, [pc, #188]	@ (80036a0 <HAL_ADC_ConfigChannel+0x204>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d14a      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ee:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <HAL_ADC_ConfigChannel+0x208>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	492d      	ldr	r1, [pc, #180]	@ (80036a8 <HAL_ADC_ConfigChannel+0x20c>)
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7fc fd87 	bl	8000108 <__udivsi3>
 80035fa:	0003      	movs	r3, r0
 80035fc:	001a      	movs	r2, r3
 80035fe:	0013      	movs	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	189b      	adds	r3, r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003608:	e002      	b.n	8003610 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3b01      	subs	r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f9      	bne.n	800360a <HAL_ADC_ConfigChannel+0x16e>
 8003616:	e035      	b.n	8003684 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	4099      	lsls	r1, r3
 8003626:	000b      	movs	r3, r1
 8003628:	43d9      	mvns	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	400a      	ands	r2, r1
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b10      	cmp	r3, #16
 8003638:	d007      	beq.n	800364a <HAL_ADC_ConfigChannel+0x1ae>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b11      	cmp	r3, #17
 8003640:	d003      	beq.n	800364a <HAL_ADC_ConfigChannel+0x1ae>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b12      	cmp	r3, #18
 8003648:	d11c      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <HAL_ADC_ConfigChannel+0x204>)
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b10      	cmp	r3, #16
 8003654:	d007      	beq.n	8003666 <HAL_ADC_ConfigChannel+0x1ca>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b11      	cmp	r3, #17
 800365c:	d101      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x1c6>
 800365e:	4b13      	ldr	r3, [pc, #76]	@ (80036ac <HAL_ADC_ConfigChannel+0x210>)
 8003660:	e002      	b.n	8003668 <HAL_ADC_ConfigChannel+0x1cc>
 8003662:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <HAL_ADC_ConfigChannel+0x214>)
 8003664:	e000      	b.n	8003668 <HAL_ADC_ConfigChannel+0x1cc>
 8003666:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <HAL_ADC_ConfigChannel+0x218>)
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <HAL_ADC_ConfigChannel+0x204>)
 800366a:	400b      	ands	r3, r1
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e009      	b.n	8003684 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	2220      	movs	r2, #32
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800367c:	230f      	movs	r3, #15
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2234      	movs	r2, #52	@ 0x34
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	00001001 	.word	0x00001001
 80036a0:	40012708 	.word	0x40012708
 80036a4:	2000000c 	.word	0x2000000c
 80036a8:	000f4240 	.word	0x000f4240
 80036ac:	ffbfffff 	.word	0xffbfffff
 80036b0:	feffffff 	.word	0xfeffffff
 80036b4:	ff7fffff 	.word	0xff7fffff

080036b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2203      	movs	r2, #3
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d112      	bne.n	80036fc <ADC_Enable+0x44>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	4013      	ands	r3, r2
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d009      	beq.n	80036f8 <ADC_Enable+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	401a      	ands	r2, r3
 80036f0:	2380      	movs	r3, #128	@ 0x80
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d101      	bne.n	80036fc <ADC_Enable+0x44>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <ADC_Enable+0x46>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d152      	bne.n	80037a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a2a      	ldr	r2, [pc, #168]	@ (80037b4 <ADC_Enable+0xfc>)
 800370a:	4013      	ands	r3, r2
 800370c:	d00d      	beq.n	800372a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	2210      	movs	r2, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371e:	2201      	movs	r2, #1
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03f      	b.n	80037aa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2101      	movs	r1, #1
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800373a:	4b1f      	ldr	r3, [pc, #124]	@ (80037b8 <ADC_Enable+0x100>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	491f      	ldr	r1, [pc, #124]	@ (80037bc <ADC_Enable+0x104>)
 8003740:	0018      	movs	r0, r3
 8003742:	f7fc fce1 	bl	8000108 <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800374a:	e002      	b.n	8003752 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3b01      	subs	r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003758:	f7ff fc46 	bl	8002fe8 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003760:	e01b      	b.n	800379a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003762:	f7ff fc41 	bl	8002fe8 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d914      	bls.n	800379a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	2b01      	cmp	r3, #1
 800377c:	d00d      	beq.n	800379a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	2210      	movs	r2, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	2201      	movs	r2, #1
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2201      	movs	r2, #1
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d1dc      	bne.n	8003762 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b004      	add	sp, #16
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	80000017 	.word	0x80000017
 80037b8:	2000000c 	.word	0x2000000c
 80037bc:	000f4240 	.word	0x000f4240

080037c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2203      	movs	r2, #3
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d112      	bne.n	8003800 <ADC_Disable+0x40>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d009      	beq.n	80037fc <ADC_Disable+0x3c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	401a      	ands	r2, r3
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d101      	bne.n	8003800 <ADC_Disable+0x40>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <ADC_Disable+0x42>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d048      	beq.n	8003898 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2205      	movs	r2, #5
 800380e:	4013      	ands	r3, r2
 8003810:	2b01      	cmp	r3, #1
 8003812:	d110      	bne.n	8003836 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2102      	movs	r1, #2
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2203      	movs	r2, #3
 800382a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800382c:	f7ff fbdc 	bl	8002fe8 <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003834:	e029      	b.n	800388a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	2210      	movs	r2, #16
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	2201      	movs	r2, #1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e023      	b.n	800389a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003852:	f7ff fbc9 	bl	8002fe8 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d914      	bls.n	800388a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2201      	movs	r2, #1
 8003868:	4013      	ands	r3, r2
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10d      	bne.n	800388a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003872:	2210      	movs	r2, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387e:	2201      	movs	r2, #1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e007      	b.n	800389a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	2b01      	cmp	r3, #1
 8003896:	d0dc      	beq.n	8003852 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2204      	movs	r2, #4
 80038b6:	4013      	ands	r3, r2
 80038b8:	d03a      	beq.n	8003930 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2204      	movs	r2, #4
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d10d      	bne.n	80038e4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2202      	movs	r2, #2
 80038d0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038d2:	d107      	bne.n	80038e4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2110      	movs	r1, #16
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038e4:	f7ff fb80 	bl	8002fe8 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038ec:	e01a      	b.n	8003924 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038ee:	f7ff fb7b 	bl	8002fe8 <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d913      	bls.n	8003924 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2204      	movs	r2, #4
 8003904:	4013      	ands	r3, r2
 8003906:	d00d      	beq.n	8003924 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	2210      	movs	r2, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	2201      	movs	r2, #1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e006      	b.n	8003932 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2204      	movs	r2, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d1de      	bne.n	80038ee <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	2250      	movs	r2, #80	@ 0x50
 8003950:	4013      	ands	r3, r2
 8003952:	d140      	bne.n	80039d6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2280      	movs	r2, #128	@ 0x80
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	23c0      	movs	r3, #192	@ 0xc0
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	4013      	ands	r3, r2
 800396e:	d12d      	bne.n	80039cc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003974:	2b00      	cmp	r3, #0
 8003976:	d129      	bne.n	80039cc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	4013      	ands	r3, r2
 8003982:	2b08      	cmp	r3, #8
 8003984:	d122      	bne.n	80039cc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2204      	movs	r2, #4
 800398e:	4013      	ands	r3, r2
 8003990:	d110      	bne.n	80039b4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	210c      	movs	r1, #12
 800399e:	438a      	bics	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <ADC_DMAConvCplt+0xb0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	2201      	movs	r2, #1
 80039ac:	431a      	orrs	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80039b2:	e00b      	b.n	80039cc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	2220      	movs	r2, #32
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	2201      	movs	r2, #1
 80039c6:	431a      	orrs	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7ff fd4c 	bl	800346c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80039d4:	e005      	b.n	80039e2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	0010      	movs	r0, r2
 80039e0:	4798      	blx	r3
}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	fffffefe 	.word	0xfffffefe

080039f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff fd3b 	bl	800347c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a20:	2240      	movs	r2, #64	@ 0x40
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7ff fd28 	bl	800348c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4c:	2317      	movs	r3, #23
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2234      	movs	r2, #52	@ 0x34
 8003a60:	5c9b      	ldrb	r3, [r3, r2]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_ADCEx_Calibration_Start+0x26>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e08d      	b.n	8003b86 <HAL_ADCEx_Calibration_Start+0x142>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2234      	movs	r2, #52	@ 0x34
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d112      	bne.n	8003aa6 <HAL_ADCEx_Calibration_Start+0x62>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d009      	beq.n	8003aa2 <HAL_ADCEx_Calibration_Start+0x5e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	401a      	ands	r2, r3
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADCEx_Calibration_Start+0x62>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_ADCEx_Calibration_Start+0x64>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d15b      	bne.n	8003b64 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	4a37      	ldr	r2, [pc, #220]	@ (8003b90 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2180      	movs	r1, #128	@ 0x80
 8003ae4:	0609      	lsls	r1, r1, #24
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003aea:	f7ff fa7d 	bl	8002fe8 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003af2:	e01d      	b.n	8003b30 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003af4:	f7ff fa78 	bl	8002fe8 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d916      	bls.n	8003b30 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	0fdb      	lsrs	r3, r3, #31
 8003b0a:	07da      	lsls	r2, r3, #31
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d10d      	bne.n	8003b30 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	2212      	movs	r2, #18
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2234      	movs	r2, #52	@ 0x34
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e02a      	b.n	8003b86 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0fdb      	lsrs	r3, r3, #31
 8003b38:	07da      	lsls	r2, r3, #31
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d0d8      	beq.n	8003af4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68d9      	ldr	r1, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	2203      	movs	r2, #3
 8003b58:	4393      	bics	r3, r2
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b62:	e009      	b.n	8003b78 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	2220      	movs	r2, #32
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b70:	2317      	movs	r3, #23
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2234      	movs	r2, #52	@ 0x34
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b80:	2317      	movs	r3, #23
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	781b      	ldrb	r3, [r3, #0]
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	fffffefd 	.word	0xfffffefd

08003b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	1dfb      	adds	r3, r7, #7
 8003b9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ba6:	d809      	bhi.n	8003bbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	001a      	movs	r2, r3
 8003bae:	231f      	movs	r3, #31
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <__NVIC_EnableIRQ+0x30>)
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4091      	lsls	r1, r2
 8003bb8:	000a      	movs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
  }
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	0002      	movs	r2, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bdc:	d828      	bhi.n	8003c30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bde:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <__NVIC_SetPriority+0xd4>)
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	33c0      	adds	r3, #192	@ 0xc0
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	589b      	ldr	r3, [r3, r2]
 8003bee:	1dfa      	adds	r2, r7, #7
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	00d2      	lsls	r2, r2, #3
 8003bfa:	21ff      	movs	r1, #255	@ 0xff
 8003bfc:	4091      	lsls	r1, r2
 8003bfe:	000a      	movs	r2, r1
 8003c00:	43d2      	mvns	r2, r2
 8003c02:	401a      	ands	r2, r3
 8003c04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	22ff      	movs	r2, #255	@ 0xff
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	1dfb      	adds	r3, r7, #7
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	0018      	movs	r0, r3
 8003c14:	2303      	movs	r3, #3
 8003c16:	4003      	ands	r3, r0
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c1c:	481f      	ldr	r0, [pc, #124]	@ (8003c9c <__NVIC_SetPriority+0xd4>)
 8003c1e:	1dfb      	adds	r3, r7, #7
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	430a      	orrs	r2, r1
 8003c28:	33c0      	adds	r3, #192	@ 0xc0
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c2e:	e031      	b.n	8003c94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca0 <__NVIC_SetPriority+0xd8>)
 8003c32:	1dfb      	adds	r3, r7, #7
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	0019      	movs	r1, r3
 8003c38:	230f      	movs	r3, #15
 8003c3a:	400b      	ands	r3, r1
 8003c3c:	3b08      	subs	r3, #8
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3306      	adds	r3, #6
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	18d3      	adds	r3, r2, r3
 8003c46:	3304      	adds	r3, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	1dfa      	adds	r2, r7, #7
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	2203      	movs	r2, #3
 8003c52:	400a      	ands	r2, r1
 8003c54:	00d2      	lsls	r2, r2, #3
 8003c56:	21ff      	movs	r1, #255	@ 0xff
 8003c58:	4091      	lsls	r1, r2
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	43d2      	mvns	r2, r2
 8003c5e:	401a      	ands	r2, r3
 8003c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	22ff      	movs	r2, #255	@ 0xff
 8003c68:	401a      	ands	r2, r3
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	2303      	movs	r3, #3
 8003c72:	4003      	ands	r3, r0
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c78:	4809      	ldr	r0, [pc, #36]	@ (8003ca0 <__NVIC_SetPriority+0xd8>)
 8003c7a:	1dfb      	adds	r3, r7, #7
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	001c      	movs	r4, r3
 8003c80:	230f      	movs	r3, #15
 8003c82:	4023      	ands	r3, r4
 8003c84:	3b08      	subs	r3, #8
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	3306      	adds	r3, #6
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	18c3      	adds	r3, r0, r3
 8003c90:	3304      	adds	r3, #4
 8003c92:	601a      	str	r2, [r3, #0]
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b003      	add	sp, #12
 8003c9a:	bd90      	pop	{r4, r7, pc}
 8003c9c:	e000e100 	.word	0xe000e100
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	045b      	lsls	r3, r3, #17
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d301      	bcc.n	8003cbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e010      	b.n	8003cde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <SysTick_Config+0x44>)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	3a01      	subs	r2, #1
 8003cc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	425b      	negs	r3, r3
 8003cc8:	2103      	movs	r1, #3
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7ff ff7c 	bl	8003bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd0:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <SysTick_Config+0x44>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <SysTick_Config+0x44>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b002      	add	sp, #8
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	e000e010 	.word	0xe000e010

08003cec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	210f      	movs	r1, #15
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	1c02      	adds	r2, r0, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	0011      	movs	r1, r2
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff ff5d 	bl	8003bc8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff ff33 	bl	8003b94 <__NVIC_EnableIRQ>
}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff ffaf 	bl	8003ca4 <SysTick_Config>
 8003d46:	0003      	movs	r3, r0
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e036      	b.n	8003dd4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2221      	movs	r2, #33	@ 0x21
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <HAL_DMA_Init+0x8c>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 f9c4 	bl	8004144 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2221      	movs	r2, #33	@ 0x21
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	ffffc00f 	.word	0xffffc00f

08003de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2317      	movs	r3, #23
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_DMA_Start_IT+0x24>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e04f      	b.n	8003ea4 <HAL_DMA_Start_IT+0xc4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	2101      	movs	r1, #1
 8003e0a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2221      	movs	r2, #33	@ 0x21
 8003e10:	5c9b      	ldrb	r3, [r3, r2]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d13a      	bne.n	8003e8e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	@ 0x21
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	438a      	bics	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f954 	bl	80040ea <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	210e      	movs	r1, #14
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e00f      	b.n	8003e7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	210a      	movs	r1, #10
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2104      	movs	r1, #4
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2101      	movs	r1, #1
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e96:	2317      	movs	r3, #23
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e9e:	2317      	movs	r3, #23
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	781b      	ldrb	r3, [r3, #0]
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b006      	add	sp, #24
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2221      	movs	r2, #33	@ 0x21
 8003eb8:	5c9b      	ldrb	r3, [r3, r2]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d008      	beq.n	8003ed2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e020      	b.n	8003f14 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	210e      	movs	r1, #14
 8003ede:	438a      	bics	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2101      	movs	r1, #1
 8003eee:	438a      	bics	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	2101      	movs	r1, #1
 8003efc:	4091      	lsls	r1, r2
 8003efe:	000a      	movs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	2100      	movs	r1, #0
 8003f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	210f      	movs	r1, #15
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2221      	movs	r2, #33	@ 0x21
 8003f30:	5c9b      	ldrb	r3, [r3, r2]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d006      	beq.n	8003f46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e028      	b.n	8003f98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	210e      	movs	r1, #14
 8003f52:	438a      	bics	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2101      	movs	r1, #1
 8003f62:	438a      	bics	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4091      	lsls	r1, r2
 8003f72:	000a      	movs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2221      	movs	r2, #33	@ 0x21
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	2100      	movs	r1, #0
 8003f84:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	0010      	movs	r0, r2
 8003f96:	4798      	blx	r3
    }
  }
  return status;
 8003f98:	230f      	movs	r3, #15
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	781b      	ldrb	r3, [r3, #0]
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	0013      	movs	r3, r2
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d024      	beq.n	8004018 <HAL_DMA_IRQHandler+0x72>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d020      	beq.n	8004018 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2104      	movs	r1, #4
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	2104      	movs	r1, #4
 8003ffc:	4091      	lsls	r1, r2
 8003ffe:	000a      	movs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d100      	bne.n	800400c <HAL_DMA_IRQHandler+0x66>
 800400a:	e06a      	b.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	0010      	movs	r0, r2
 8004014:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004016:	e064      	b.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	2202      	movs	r2, #2
 800401e:	409a      	lsls	r2, r3
 8004020:	0013      	movs	r3, r2
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	d02b      	beq.n	8004080 <HAL_DMA_IRQHandler+0xda>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2202      	movs	r2, #2
 800402c:	4013      	ands	r3, r2
 800402e:	d027      	beq.n	8004080 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2220      	movs	r2, #32
 8004038:	4013      	ands	r3, r2
 800403a:	d10b      	bne.n	8004054 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	210a      	movs	r1, #10
 8004048:	438a      	bics	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2221      	movs	r2, #33	@ 0x21
 8004050:	2101      	movs	r1, #1
 8004052:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	2102      	movs	r1, #2
 800405e:	4091      	lsls	r1, r2
 8004060:	000a      	movs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	2100      	movs	r1, #0
 800406a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d036      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	0010      	movs	r0, r2
 800407c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800407e:	e030      	b.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	2208      	movs	r2, #8
 8004086:	409a      	lsls	r2, r3
 8004088:	0013      	movs	r3, r2
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4013      	ands	r3, r2
 800408e:	d028      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2208      	movs	r2, #8
 8004094:	4013      	ands	r3, r2
 8004096:	d024      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	210e      	movs	r1, #14
 80040a4:	438a      	bics	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	2101      	movs	r1, #1
 80040b2:	4091      	lsls	r1, r2
 80040b4:	000a      	movs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2221      	movs	r2, #33	@ 0x21
 80040c2:	2101      	movs	r1, #1
 80040c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	2100      	movs	r1, #0
 80040cc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	0010      	movs	r0, r2
 80040de:	4798      	blx	r3
    }
  }
}
 80040e0:	e7ff      	b.n	80040e2 <HAL_DMA_IRQHandler+0x13c>
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b004      	add	sp, #16
 80040e8:	bd80      	pop	{r7, pc}

080040ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004100:	2101      	movs	r1, #1
 8004102:	4091      	lsls	r1, r2
 8004104:	000a      	movs	r2, r1
 8004106:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b10      	cmp	r3, #16
 8004116:	d108      	bne.n	800412a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004128:	e007      	b.n	800413a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	60da      	str	r2, [r3, #12]
}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a08      	ldr	r2, [pc, #32]	@ (8004174 <DMA_CalcBaseAndBitshift+0x30>)
 8004152:	4694      	mov	ip, r2
 8004154:	4463      	add	r3, ip
 8004156:	2114      	movs	r1, #20
 8004158:	0018      	movs	r0, r3
 800415a:	f7fb ffd5 	bl	8000108 <__udivsi3>
 800415e:	0003      	movs	r3, r0
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a03      	ldr	r2, [pc, #12]	@ (8004178 <DMA_CalcBaseAndBitshift+0x34>)
 800416a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}
 8004174:	bffdfff8 	.word	0xbffdfff8
 8004178:	40020000 	.word	0x40020000

0800417c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800418a:	e149      	b.n	8004420 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4091      	lsls	r1, r2
 8004196:	000a      	movs	r2, r1
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d100      	bne.n	80041a4 <HAL_GPIO_Init+0x28>
 80041a2:	e13a      	b.n	800441a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d005      	beq.n	80041bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2203      	movs	r2, #3
 80041b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d130      	bne.n	800421e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	409a      	lsls	r2, r3
 80041ca:	0013      	movs	r3, r2
 80041cc:	43da      	mvns	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	409a      	lsls	r2, r3
 80041de:	0013      	movs	r3, r2
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f2:	2201      	movs	r2, #1
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	409a      	lsls	r2, r3
 80041f8:	0013      	movs	r3, r2
 80041fa:	43da      	mvns	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	2201      	movs	r2, #1
 800420a:	401a      	ands	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2203      	movs	r2, #3
 8004224:	4013      	ands	r3, r2
 8004226:	2b03      	cmp	r3, #3
 8004228:	d017      	beq.n	800425a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	43da      	mvns	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	0013      	movs	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2203      	movs	r2, #3
 8004260:	4013      	ands	r3, r2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d123      	bne.n	80042ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	08da      	lsrs	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3208      	adds	r2, #8
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	58d3      	ldr	r3, [r2, r3]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2207      	movs	r2, #7
 8004278:	4013      	ands	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	409a      	lsls	r2, r3
 8004280:	0013      	movs	r3, r2
 8004282:	43da      	mvns	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2107      	movs	r1, #7
 8004292:	400b      	ands	r3, r1
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	409a      	lsls	r2, r3
 8004298:	0013      	movs	r3, r2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	6939      	ldr	r1, [r7, #16]
 80042ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2203      	movs	r2, #3
 80042ba:	409a      	lsls	r2, r3
 80042bc:	0013      	movs	r3, r2
 80042be:	43da      	mvns	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2203      	movs	r2, #3
 80042cc:	401a      	ands	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	409a      	lsls	r2, r3
 80042d4:	0013      	movs	r3, r2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	23c0      	movs	r3, #192	@ 0xc0
 80042e8:	029b      	lsls	r3, r3, #10
 80042ea:	4013      	ands	r3, r2
 80042ec:	d100      	bne.n	80042f0 <HAL_GPIO_Init+0x174>
 80042ee:	e094      	b.n	800441a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f0:	4b51      	ldr	r3, [pc, #324]	@ (8004438 <HAL_GPIO_Init+0x2bc>)
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	4b50      	ldr	r3, [pc, #320]	@ (8004438 <HAL_GPIO_Init+0x2bc>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	430a      	orrs	r2, r1
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004438 <HAL_GPIO_Init+0x2bc>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2201      	movs	r2, #1
 8004302:	4013      	ands	r3, r2
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004308:	4a4c      	ldr	r2, [pc, #304]	@ (800443c <HAL_GPIO_Init+0x2c0>)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3302      	adds	r3, #2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	589b      	ldr	r3, [r3, r2]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2203      	movs	r2, #3
 800431a:	4013      	ands	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	409a      	lsls	r2, r3
 8004322:	0013      	movs	r3, r2
 8004324:	43da      	mvns	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	2390      	movs	r3, #144	@ 0x90
 8004330:	05db      	lsls	r3, r3, #23
 8004332:	429a      	cmp	r2, r3
 8004334:	d00d      	beq.n	8004352 <HAL_GPIO_Init+0x1d6>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a41      	ldr	r2, [pc, #260]	@ (8004440 <HAL_GPIO_Init+0x2c4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <HAL_GPIO_Init+0x1d2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a40      	ldr	r2, [pc, #256]	@ (8004444 <HAL_GPIO_Init+0x2c8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_GPIO_Init+0x1ce>
 8004346:	2302      	movs	r3, #2
 8004348:	e004      	b.n	8004354 <HAL_GPIO_Init+0x1d8>
 800434a:	2305      	movs	r3, #5
 800434c:	e002      	b.n	8004354 <HAL_GPIO_Init+0x1d8>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_GPIO_Init+0x1d8>
 8004352:	2300      	movs	r3, #0
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	2103      	movs	r1, #3
 8004358:	400a      	ands	r2, r1
 800435a:	0092      	lsls	r2, r2, #2
 800435c:	4093      	lsls	r3, r2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004364:	4935      	ldr	r1, [pc, #212]	@ (800443c <HAL_GPIO_Init+0x2c0>)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	3302      	adds	r3, #2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004372:	4b35      	ldr	r3, [pc, #212]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	43da      	mvns	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	2380      	movs	r3, #128	@ 0x80
 8004388:	035b      	lsls	r3, r3, #13
 800438a:	4013      	ands	r3, r2
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004396:	4b2c      	ldr	r3, [pc, #176]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800439c:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	039b      	lsls	r3, r3, #14
 80043b4:	4013      	ands	r3, r2
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043c0:	4b21      	ldr	r3, [pc, #132]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43da      	mvns	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	4013      	ands	r3, r2
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043ea:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80043f0:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	025b      	lsls	r3, r3, #9
 8004408:	4013      	ands	r3, r2
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004414:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <HAL_GPIO_Init+0x2cc>)
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3301      	adds	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	40da      	lsrs	r2, r3
 8004428:	1e13      	subs	r3, r2, #0
 800442a:	d000      	beq.n	800442e <HAL_GPIO_Init+0x2b2>
 800442c:	e6ae      	b.n	800418c <HAL_GPIO_Init+0x10>
  } 
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b006      	add	sp, #24
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	40010000 	.word	0x40010000
 8004440:	48000400 	.word	0x48000400
 8004444:	48000800 	.word	0x48000800
 8004448:	40010400 	.word	0x40010400

0800444c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	000a      	movs	r2, r1
 8004456:	1cbb      	adds	r3, r7, #2
 8004458:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	1cba      	adds	r2, r7, #2
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	4013      	ands	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004466:	230f      	movs	r3, #15
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2201      	movs	r2, #1
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e003      	b.n	8004478 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004470:	230f      	movs	r3, #15
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004478:	230f      	movs	r3, #15
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	781b      	ldrb	r3, [r3, #0]
  }
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b004      	add	sp, #16
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	0008      	movs	r0, r1
 8004490:	0011      	movs	r1, r2
 8004492:	1cbb      	adds	r3, r7, #2
 8004494:	1c02      	adds	r2, r0, #0
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	1c7b      	adds	r3, r7, #1
 800449a:	1c0a      	adds	r2, r1, #0
 800449c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800449e:	1c7b      	adds	r3, r7, #1
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044a6:	1cbb      	adds	r3, r7, #2
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044ae:	e003      	b.n	80044b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044b0:	1cbb      	adds	r3, r7, #2
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044b8:	46c0      	nop			@ (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b002      	add	sp, #8
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e08f      	b.n	80045f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2241      	movs	r2, #65	@ 0x41
 80044d6:	5c9b      	ldrb	r3, [r3, r2]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d107      	bne.n	80044ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2240      	movs	r2, #64	@ 0x40
 80044e2:	2100      	movs	r1, #0
 80044e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7fd fb63 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2241      	movs	r2, #65	@ 0x41
 80044f2:	2124      	movs	r1, #36	@ 0x24
 80044f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2101      	movs	r1, #1
 8004502:	438a      	bics	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	493b      	ldr	r1, [pc, #236]	@ (80045fc <HAL_I2C_Init+0x13c>)
 8004510:	400a      	ands	r2, r1
 8004512:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4938      	ldr	r1, [pc, #224]	@ (8004600 <HAL_I2C_Init+0x140>)
 8004520:	400a      	ands	r2, r1
 8004522:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d108      	bne.n	800453e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2180      	movs	r1, #128	@ 0x80
 8004536:	0209      	lsls	r1, r1, #8
 8004538:	430a      	orrs	r2, r1
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	e007      	b.n	800454e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2184      	movs	r1, #132	@ 0x84
 8004548:	0209      	lsls	r1, r1, #8
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d109      	bne.n	800456a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2180      	movs	r1, #128	@ 0x80
 8004562:	0109      	lsls	r1, r1, #4
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	e007      	b.n	800457a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4923      	ldr	r1, [pc, #140]	@ (8004604 <HAL_I2C_Init+0x144>)
 8004576:	400a      	ands	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4920      	ldr	r1, [pc, #128]	@ (8004608 <HAL_I2C_Init+0x148>)
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	491a      	ldr	r1, [pc, #104]	@ (8004600 <HAL_I2C_Init+0x140>)
 8004596:	400a      	ands	r2, r1
 8004598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69d9      	ldr	r1, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2101      	movs	r1, #1
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2241      	movs	r2, #65	@ 0x41
 80045de:	2120      	movs	r1, #32
 80045e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2242      	movs	r2, #66	@ 0x42
 80045ec:	2100      	movs	r1, #0
 80045ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	f0ffffff 	.word	0xf0ffffff
 8004600:	ffff7fff 	.word	0xffff7fff
 8004604:	fffff7ff 	.word	0xfffff7ff
 8004608:	02008000 	.word	0x02008000

0800460c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2241      	movs	r2, #65	@ 0x41
 800461a:	5c9b      	ldrb	r3, [r3, r2]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	d138      	bne.n	8004694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2240      	movs	r2, #64	@ 0x40
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800462c:	2302      	movs	r3, #2
 800462e:	e032      	b.n	8004696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2240      	movs	r2, #64	@ 0x40
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2241      	movs	r2, #65	@ 0x41
 800463c:	2124      	movs	r1, #36	@ 0x24
 800463e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2101      	movs	r1, #1
 800464c:	438a      	bics	r2, r1
 800464e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4911      	ldr	r1, [pc, #68]	@ (80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800465c:	400a      	ands	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2101      	movs	r1, #1
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2241      	movs	r2, #65	@ 0x41
 8004684:	2120      	movs	r1, #32
 8004686:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2240      	movs	r2, #64	@ 0x40
 800468c:	2100      	movs	r1, #0
 800468e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	ffffefff 	.word	0xffffefff

080046a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2241      	movs	r2, #65	@ 0x41
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d139      	bne.n	800472e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2240      	movs	r2, #64	@ 0x40
 80046be:	5c9b      	ldrb	r3, [r3, r2]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e033      	b.n	8004730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	@ 0x40
 80046cc:	2101      	movs	r1, #1
 80046ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2241      	movs	r2, #65	@ 0x41
 80046d4:	2124      	movs	r1, #36	@ 0x24
 80046d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2101      	movs	r1, #1
 80046e4:	438a      	bics	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a11      	ldr	r2, [pc, #68]	@ (8004738 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2241      	movs	r2, #65	@ 0x41
 800471e:	2120      	movs	r1, #32
 8004720:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2240      	movs	r2, #64	@ 0x40
 8004726:	2100      	movs	r1, #0
 8004728:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}
 8004738:	fffff0ff 	.word	0xfffff0ff

0800473c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e301      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d100      	bne.n	800475a <HAL_RCC_OscConfig+0x1e>
 8004758:	e08d      	b.n	8004876 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800475a:	4bc3      	ldr	r3, [pc, #780]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	220c      	movs	r2, #12
 8004760:	4013      	ands	r3, r2
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00e      	beq.n	8004784 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004766:	4bc0      	ldr	r3, [pc, #768]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	220c      	movs	r2, #12
 800476c:	4013      	ands	r3, r2
 800476e:	2b08      	cmp	r3, #8
 8004770:	d116      	bne.n	80047a0 <HAL_RCC_OscConfig+0x64>
 8004772:	4bbd      	ldr	r3, [pc, #756]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	025b      	lsls	r3, r3, #9
 800477a:	401a      	ands	r2, r3
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	025b      	lsls	r3, r3, #9
 8004780:	429a      	cmp	r2, r3
 8004782:	d10d      	bne.n	80047a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	4bb8      	ldr	r3, [pc, #736]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	@ 0x80
 800478a:	029b      	lsls	r3, r3, #10
 800478c:	4013      	ands	r3, r2
 800478e:	d100      	bne.n	8004792 <HAL_RCC_OscConfig+0x56>
 8004790:	e070      	b.n	8004874 <HAL_RCC_OscConfig+0x138>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d000      	beq.n	800479c <HAL_RCC_OscConfig+0x60>
 800479a:	e06b      	b.n	8004874 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e2d8      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x7c>
 80047a8:	4baf      	ldr	r3, [pc, #700]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4bae      	ldr	r3, [pc, #696]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047ae:	2180      	movs	r1, #128	@ 0x80
 80047b0:	0249      	lsls	r1, r1, #9
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e02f      	b.n	8004818 <HAL_RCC_OscConfig+0xdc>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10c      	bne.n	80047da <HAL_RCC_OscConfig+0x9e>
 80047c0:	4ba9      	ldr	r3, [pc, #676]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4ba8      	ldr	r3, [pc, #672]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047c6:	49a9      	ldr	r1, [pc, #676]	@ (8004a6c <HAL_RCC_OscConfig+0x330>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4ba6      	ldr	r3, [pc, #664]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4ba5      	ldr	r3, [pc, #660]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047d2:	49a7      	ldr	r1, [pc, #668]	@ (8004a70 <HAL_RCC_OscConfig+0x334>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e01e      	b.n	8004818 <HAL_RCC_OscConfig+0xdc>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d10e      	bne.n	8004800 <HAL_RCC_OscConfig+0xc4>
 80047e2:	4ba1      	ldr	r3, [pc, #644]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047e8:	2180      	movs	r1, #128	@ 0x80
 80047ea:	02c9      	lsls	r1, r1, #11
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	4b9d      	ldr	r3, [pc, #628]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	0249      	lsls	r1, r1, #9
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0xdc>
 8004800:	4b99      	ldr	r3, [pc, #612]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b98      	ldr	r3, [pc, #608]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004806:	4999      	ldr	r1, [pc, #612]	@ (8004a6c <HAL_RCC_OscConfig+0x330>)
 8004808:	400a      	ands	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	4b96      	ldr	r3, [pc, #600]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b95      	ldr	r3, [pc, #596]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004812:	4997      	ldr	r1, [pc, #604]	@ (8004a70 <HAL_RCC_OscConfig+0x334>)
 8004814:	400a      	ands	r2, r1
 8004816:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d014      	beq.n	800484a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe fbe2 	bl	8002fe8 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800482a:	f7fe fbdd 	bl	8002fe8 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	@ 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e28a      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483c:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	4013      	ands	r3, r2
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0xee>
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fe fbcd 	bl	8002fe8 <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe fbc8 	bl	8002fe8 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	@ 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e275      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	4b80      	ldr	r3, [pc, #512]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	4013      	ands	r3, r2
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x118>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	d100      	bne.n	8004882 <HAL_RCC_OscConfig+0x146>
 8004880:	e069      	b.n	8004956 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004882:	4b79      	ldr	r3, [pc, #484]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	220c      	movs	r2, #12
 8004888:	4013      	ands	r3, r2
 800488a:	d00b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800488c:	4b76      	ldr	r3, [pc, #472]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	220c      	movs	r2, #12
 8004892:	4013      	ands	r3, r2
 8004894:	2b08      	cmp	r3, #8
 8004896:	d11c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x196>
 8004898:	4b73      	ldr	r3, [pc, #460]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	025b      	lsls	r3, r3, #9
 80048a0:	4013      	ands	r3, r2
 80048a2:	d116      	bne.n	80048d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a4:	4b70      	ldr	r3, [pc, #448]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d005      	beq.n	80048ba <HAL_RCC_OscConfig+0x17e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e24b      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ba:	4b6b      	ldr	r3, [pc, #428]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	22f8      	movs	r2, #248	@ 0xf8
 80048c0:	4393      	bics	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	00da      	lsls	r2, r3, #3
 80048ca:	4b67      	ldr	r3, [pc, #412]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d0:	e041      	b.n	8004956 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d024      	beq.n	8004924 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048da:	4b63      	ldr	r3, [pc, #396]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b62      	ldr	r3, [pc, #392]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048e0:	2101      	movs	r1, #1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7fe fb7f 	bl	8002fe8 <HAL_GetTick>
 80048ea:	0003      	movs	r3, r0
 80048ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fe fb7a 	bl	8002fe8 <HAL_GetTick>
 80048f4:	0002      	movs	r2, r0
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e227      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b59      	ldr	r3, [pc, #356]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2202      	movs	r2, #2
 8004908:	4013      	ands	r3, r2
 800490a:	d0f1      	beq.n	80048f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490c:	4b56      	ldr	r3, [pc, #344]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	22f8      	movs	r2, #248	@ 0xf8
 8004912:	4393      	bics	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00da      	lsls	r2, r3, #3
 800491c:	4b52      	ldr	r3, [pc, #328]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004924:	4b50      	ldr	r3, [pc, #320]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b4f      	ldr	r3, [pc, #316]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800492a:	2101      	movs	r1, #1
 800492c:	438a      	bics	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fe fb5a 	bl	8002fe8 <HAL_GetTick>
 8004934:	0003      	movs	r3, r0
 8004936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe fb55 	bl	8002fe8 <HAL_GetTick>
 800493e:	0002      	movs	r2, r0
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e202      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494c:	4b46      	ldr	r3, [pc, #280]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2202      	movs	r2, #2
 8004952:	4013      	ands	r3, r2
 8004954:	d1f1      	bne.n	800493a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2208      	movs	r2, #8
 800495c:	4013      	ands	r3, r2
 800495e:	d036      	beq.n	80049ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d019      	beq.n	800499c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004968:	4b3f      	ldr	r3, [pc, #252]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800496a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800496c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800496e:	2101      	movs	r1, #1
 8004970:	430a      	orrs	r2, r1
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fe fb38 	bl	8002fe8 <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497e:	f7fe fb33 	bl	8002fe8 <HAL_GetTick>
 8004982:	0002      	movs	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1e0      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004990:	4b35      	ldr	r3, [pc, #212]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	d0f1      	beq.n	800497e <HAL_RCC_OscConfig+0x242>
 800499a:	e018      	b.n	80049ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499c:	4b32      	ldr	r3, [pc, #200]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800499e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049a0:	4b31      	ldr	r3, [pc, #196]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	438a      	bics	r2, r1
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a8:	f7fe fb1e 	bl	8002fe8 <HAL_GetTick>
 80049ac:	0003      	movs	r3, r0
 80049ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fe fb19 	bl	8002fe8 <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1c6      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	2202      	movs	r2, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d1f1      	bne.n	80049b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2204      	movs	r2, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d100      	bne.n	80049da <HAL_RCC_OscConfig+0x29e>
 80049d8:	e0b4      	b.n	8004b44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	201f      	movs	r0, #31
 80049dc:	183b      	adds	r3, r7, r0
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b21      	ldr	r3, [pc, #132]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	055b      	lsls	r3, r3, #21
 80049ea:	4013      	ands	r3, r2
 80049ec:	d110      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049f4:	2180      	movs	r1, #128	@ 0x80
 80049f6:	0549      	lsls	r1, r1, #21
 80049f8:	430a      	orrs	r2, r1
 80049fa:	61da      	str	r2, [r3, #28]
 80049fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	055b      	lsls	r3, r3, #21
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a0a:	183b      	adds	r3, r7, r0
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	@ 0x80
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d11a      	bne.n	8004a52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1c:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a22:	2180      	movs	r1, #128	@ 0x80
 8004a24:	0049      	lsls	r1, r1, #1
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fadd 	bl	8002fe8 <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fe fad8 	bl	8002fe8 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e185      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d10e      	bne.n	8004a78 <HAL_RCC_OscConfig+0x33c>
 8004a5a:	4b03      	ldr	r3, [pc, #12]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	4b02      	ldr	r3, [pc, #8]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a60:	2101      	movs	r1, #1
 8004a62:	430a      	orrs	r2, r1
 8004a64:	621a      	str	r2, [r3, #32]
 8004a66:	e035      	b.n	8004ad4 <HAL_RCC_OscConfig+0x398>
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	fffeffff 	.word	0xfffeffff
 8004a70:	fffbffff 	.word	0xfffbffff
 8004a74:	40007000 	.word	0x40007000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x35e>
 8004a80:	4bb6      	ldr	r3, [pc, #728]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	4bb5      	ldr	r3, [pc, #724]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	621a      	str	r2, [r3, #32]
 8004a8c:	4bb3      	ldr	r3, [pc, #716]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	4bb2      	ldr	r3, [pc, #712]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a92:	2104      	movs	r1, #4
 8004a94:	438a      	bics	r2, r1
 8004a96:	621a      	str	r2, [r3, #32]
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x398>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x380>
 8004aa2:	4bae      	ldr	r3, [pc, #696]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004aa4:	6a1a      	ldr	r2, [r3, #32]
 8004aa6:	4bad      	ldr	r3, [pc, #692]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	621a      	str	r2, [r3, #32]
 8004aae:	4bab      	ldr	r3, [pc, #684]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	4baa      	ldr	r3, [pc, #680]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	621a      	str	r2, [r3, #32]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x398>
 8004abc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	4ba6      	ldr	r3, [pc, #664]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	621a      	str	r2, [r3, #32]
 8004ac8:	4ba4      	ldr	r3, [pc, #656]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	4ba3      	ldr	r3, [pc, #652]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ace:	2104      	movs	r1, #4
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d014      	beq.n	8004b06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fe fa84 	bl	8002fe8 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	e009      	b.n	8004afa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fe fa7f 	bl	8002fe8 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	4a9b      	ldr	r2, [pc, #620]	@ (8004d60 <HAL_RCC_OscConfig+0x624>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e12b      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b98      	ldr	r3, [pc, #608]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	2202      	movs	r2, #2
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x3aa>
 8004b04:	e013      	b.n	8004b2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b06:	f7fe fa6f 	bl	8002fe8 <HAL_GetTick>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e009      	b.n	8004b24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe fa6a 	bl	8002fe8 <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	4a91      	ldr	r2, [pc, #580]	@ (8004d60 <HAL_RCC_OscConfig+0x624>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e116      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b24:	4b8d      	ldr	r3, [pc, #564]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b2e:	231f      	movs	r3, #31
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	4b87      	ldr	r3, [pc, #540]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b3e:	4989      	ldr	r1, [pc, #548]	@ (8004d64 <HAL_RCC_OscConfig+0x628>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d063      	beq.n	8004c16 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d12a      	bne.n	8004bac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b56:	4b81      	ldr	r3, [pc, #516]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b5a:	4b80      	ldr	r3, [pc, #512]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b62:	4b7e      	ldr	r3, [pc, #504]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b66:	4b7d      	ldr	r3, [pc, #500]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6e:	f7fe fa3b 	bl	8002fe8 <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b78:	f7fe fa36 	bl	8002fe8 <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0e3      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b8a:	4b74      	ldr	r3, [pc, #464]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	2202      	movs	r2, #2
 8004b90:	4013      	ands	r3, r2
 8004b92:	d0f1      	beq.n	8004b78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b94:	4b71      	ldr	r3, [pc, #452]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b98:	22f8      	movs	r2, #248	@ 0xf8
 8004b9a:	4393      	bics	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	00da      	lsls	r2, r3, #3
 8004ba4:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004baa:	e034      	b.n	8004c16 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	3305      	adds	r3, #5
 8004bb2:	d111      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004bb4:	4b69      	ldr	r3, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bb8:	4b68      	ldr	r3, [pc, #416]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bba:	2104      	movs	r1, #4
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004bc0:	4b66      	ldr	r3, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc4:	22f8      	movs	r2, #248	@ 0xf8
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	4b62      	ldr	r3, [pc, #392]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bd6:	e01e      	b.n	8004c16 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004bd8:	4b60      	ldr	r3, [pc, #384]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bde:	2104      	movs	r1, #4
 8004be0:	430a      	orrs	r2, r1
 8004be2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004be4:	4b5d      	ldr	r3, [pc, #372]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be8:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bea:	2101      	movs	r1, #1
 8004bec:	438a      	bics	r2, r1
 8004bee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf0:	f7fe f9fa 	bl	8002fe8 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bfa:	f7fe f9f5 	bl	8002fe8 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0a2      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c0c:	4b53      	ldr	r3, [pc, #332]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d1f1      	bne.n	8004bfa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d100      	bne.n	8004c20 <HAL_RCC_OscConfig+0x4e4>
 8004c1e:	e097      	b.n	8004d50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c20:	4b4e      	ldr	r3, [pc, #312]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	220c      	movs	r2, #12
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d100      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4f2>
 8004c2c:	e06b      	b.n	8004d06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d14c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b48      	ldr	r3, [pc, #288]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c3c:	494a      	ldr	r1, [pc, #296]	@ (8004d68 <HAL_RCC_OscConfig+0x62c>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c42:	f7fe f9d1 	bl	8002fe8 <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fe f9cc 	bl	8002fe8 <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e079      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	@ 0x80
 8004c64:	049b      	lsls	r3, r3, #18
 8004c66:	4013      	ands	r3, r2
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	220f      	movs	r2, #15
 8004c70:	4393      	bics	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c7e:	4b37      	ldr	r3, [pc, #220]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a3a      	ldr	r2, [pc, #232]	@ (8004d6c <HAL_RCC_OscConfig+0x630>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	4b32      	ldr	r3, [pc, #200]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c98:	4b30      	ldr	r3, [pc, #192]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	0449      	lsls	r1, r1, #17
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fe f99f 	bl	8002fe8 <HAL_GetTick>
 8004caa:	0003      	movs	r3, r0
 8004cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fe f99a 	bl	8002fe8 <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e047      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	049b      	lsls	r3, r3, #18
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x574>
 8004cce:	e03f      	b.n	8004d50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd0:	4b22      	ldr	r3, [pc, #136]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b21      	ldr	r3, [pc, #132]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cd6:	4924      	ldr	r1, [pc, #144]	@ (8004d68 <HAL_RCC_OscConfig+0x62c>)
 8004cd8:	400a      	ands	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe f984 	bl	8002fe8 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fe f97f 	bl	8002fe8 <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e02c      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf8:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	049b      	lsls	r3, r3, #18
 8004d00:	4013      	ands	r3, r2
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x5aa>
 8004d04:	e024      	b.n	8004d50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e01f      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004d18:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	025b      	lsls	r3, r3, #9
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d10e      	bne.n	8004d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	220f      	movs	r2, #15
 8004d32:	401a      	ands	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	23f0      	movs	r3, #240	@ 0xf0
 8004d40:	039b      	lsls	r3, r3, #14
 8004d42:	401a      	ands	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b008      	add	sp, #32
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	00001388 	.word	0x00001388
 8004d64:	efffffff 	.word	0xefffffff
 8004d68:	feffffff 	.word	0xfeffffff
 8004d6c:	ffc2ffff 	.word	0xffc2ffff

08004d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0b3      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b5b      	ldr	r3, [pc, #364]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d911      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b58      	ldr	r3, [pc, #352]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4393      	bics	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da4:	4b53      	ldr	r3, [pc, #332]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e09a      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d015      	beq.n	8004dec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d006      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dca:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004dd0:	21e0      	movs	r1, #224	@ 0xe0
 8004dd2:	00c9      	lsls	r1, r1, #3
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd8:	4b47      	ldr	r3, [pc, #284]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	22f0      	movs	r2, #240	@ 0xf0
 8004dde:	4393      	bics	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	4b44      	ldr	r3, [pc, #272]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	d040      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	@ 0x80
 8004e04:	029b      	lsls	r3, r3, #10
 8004e06:	4013      	ands	r3, r2
 8004e08:	d114      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06e      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b38      	ldr	r3, [pc, #224]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	049b      	lsls	r3, r3, #18
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d108      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e062      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e05b      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e34:	4b30      	ldr	r3, [pc, #192]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e48:	f7fe f8ce 	bl	8002fe8 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e50:	e009      	b.n	8004e66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e52:	f7fe f8c9 	bl	8002fe8 <HAL_GetTick>
 8004e56:	0002      	movs	r2, r0
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	4a27      	ldr	r2, [pc, #156]	@ (8004efc <HAL_RCC_ClockConfig+0x18c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e042      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	220c      	movs	r2, #12
 8004e6c:	401a      	ands	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1ec      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d211      	bcs.n	8004eaa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e98:	4b16      	ldr	r3, [pc, #88]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e020      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a11      	ldr	r2, [pc, #68]	@ (8004f00 <HAL_RCC_ClockConfig+0x190>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ec8:	f000 f820 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004ecc:	0001      	movs	r1, r0
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <HAL_RCC_ClockConfig+0x194>)
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	000a      	movs	r2, r1
 8004ede:	40da      	lsrs	r2, r3
 8004ee0:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <HAL_RCC_ClockConfig+0x198>)
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f7fe f839 	bl	8002f5c <HAL_InitTick>
  
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b004      	add	sp, #16
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	00001388 	.word	0x00001388
 8004f00:	fffff8ff 	.word	0xfffff8ff
 8004f04:	08007d00 	.word	0x08007d00
 8004f08:	2000000c 	.word	0x2000000c

08004f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	220c      	movs	r2, #12
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d002      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x30>
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x36>
 8004f3a:	e02c      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f3e:	613b      	str	r3, [r7, #16]
      break;
 8004f40:	e02c      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0c9b      	lsrs	r3, r3, #18
 8004f46:	220f      	movs	r2, #15
 8004f48:	4013      	ands	r3, r2
 8004f4a:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f4c:	5cd3      	ldrb	r3, [r2, r3]
 8004f4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004f50:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	220f      	movs	r2, #15
 8004f56:	4013      	ands	r3, r2
 8004f58:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	4013      	ands	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4810      	ldr	r0, [pc, #64]	@ (8004fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f6c:	f7fb f8cc 	bl	8000108 <__udivsi3>
 8004f70:	0003      	movs	r3, r0
 8004f72:	001a      	movs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4353      	muls	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e009      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	000a      	movs	r2, r1
 8004f80:	0152      	lsls	r2, r2, #5
 8004f82:	1a52      	subs	r2, r2, r1
 8004f84:	0193      	lsls	r3, r2, #6
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	185b      	adds	r3, r3, r1
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	613b      	str	r3, [r7, #16]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f96:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004f98:	613b      	str	r3, [r7, #16]
      break;
 8004f9a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f9c:	693b      	ldr	r3, [r7, #16]
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b006      	add	sp, #24
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	016e3600 	.word	0x016e3600
 8004fb0:	08007d18 	.word	0x08007d18
 8004fb4:	08007d28 	.word	0x08007d28
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc0:	4b02      	ldr	r3, [pc, #8]	@ (8004fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	2000000c 	.word	0x2000000c

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004fd4:	f7ff fff2 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8004fd8:	0001      	movs	r1, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	40d9      	lsrs	r1, r3
 8004fea:	000b      	movs	r3, r1
}    
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	08007d10 	.word	0x08007d10

08004ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	025b      	lsls	r3, r3, #9
 8005014:	4013      	ands	r3, r2
 8005016:	d100      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005018:	e08e      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2017      	movs	r0, #23
 800501c:	183b      	adds	r3, r7, r0
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005022:	4b57      	ldr	r3, [pc, #348]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	2380      	movs	r3, #128	@ 0x80
 8005028:	055b      	lsls	r3, r3, #21
 800502a:	4013      	ands	r3, r2
 800502c:	d110      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800502e:	4b54      	ldr	r3, [pc, #336]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005034:	2180      	movs	r1, #128	@ 0x80
 8005036:	0549      	lsls	r1, r1, #21
 8005038:	430a      	orrs	r2, r1
 800503a:	61da      	str	r2, [r3, #28]
 800503c:	4b50      	ldr	r3, [pc, #320]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	2380      	movs	r3, #128	@ 0x80
 8005042:	055b      	lsls	r3, r3, #21
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504a:	183b      	adds	r3, r7, r0
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	4b4c      	ldr	r3, [pc, #304]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2380      	movs	r3, #128	@ 0x80
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4013      	ands	r3, r2
 800505a:	d11a      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505c:	4b49      	ldr	r3, [pc, #292]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b48      	ldr	r3, [pc, #288]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005062:	2180      	movs	r1, #128	@ 0x80
 8005064:	0049      	lsls	r1, r1, #1
 8005066:	430a      	orrs	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506a:	f7fd ffbd 	bl	8002fe8 <HAL_GetTick>
 800506e:	0003      	movs	r3, r0
 8005070:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005072:	e008      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fd ffb8 	bl	8002fe8 <HAL_GetTick>
 8005078:	0002      	movs	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e077      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b3f      	ldr	r3, [pc, #252]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	2380      	movs	r3, #128	@ 0x80
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	4013      	ands	r3, r2
 8005090:	d0f0      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005092:	4b3b      	ldr	r3, [pc, #236]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005094:	6a1a      	ldr	r2, [r3, #32]
 8005096:	23c0      	movs	r3, #192	@ 0xc0
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4013      	ands	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d034      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	23c0      	movs	r3, #192	@ 0xc0
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d02c      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b4:	4b32      	ldr	r3, [pc, #200]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4a33      	ldr	r2, [pc, #204]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050be:	4b30      	ldr	r3, [pc, #192]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c4:	2180      	movs	r1, #128	@ 0x80
 80050c6:	0249      	lsls	r1, r1, #9
 80050c8:	430a      	orrs	r2, r1
 80050ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d2:	492e      	ldr	r1, [pc, #184]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80050d4:	400a      	ands	r2, r1
 80050d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050d8:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	4013      	ands	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fd ff7f 	bl	8002fe8 <HAL_GetTick>
 80050ea:	0003      	movs	r3, r0
 80050ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ee:	e009      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fd ff7a 	bl	8002fe8 <HAL_GetTick>
 80050f4:	0002      	movs	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	4a25      	ldr	r2, [pc, #148]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e038      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	4b1e      	ldr	r3, [pc, #120]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	2202      	movs	r2, #2
 800510a:	4013      	ands	r3, r2
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510e:	4b1c      	ldr	r3, [pc, #112]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4a1d      	ldr	r2, [pc, #116]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005114:	4013      	ands	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800511e:	430a      	orrs	r2, r1
 8005120:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005122:	2317      	movs	r3, #23
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512c:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	4b13      	ldr	r3, [pc, #76]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005132:	4918      	ldr	r1, [pc, #96]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005134:	400a      	ands	r2, r1
 8005136:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2201      	movs	r2, #1
 800513e:	4013      	ands	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005142:	4b0f      	ldr	r3, [pc, #60]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	2203      	movs	r2, #3
 8005148:	4393      	bics	r3, r2
 800514a:	0019      	movs	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005152:	430a      	orrs	r2, r1
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2220      	movs	r2, #32
 800515c:	4013      	ands	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	2210      	movs	r2, #16
 8005166:	4393      	bics	r3, r2
 8005168:	0019      	movs	r1, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005170:	430a      	orrs	r2, r1
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b006      	add	sp, #24
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	40021000 	.word	0x40021000
 8005184:	40007000 	.word	0x40007000
 8005188:	fffffcff 	.word	0xfffffcff
 800518c:	fffeffff 	.word	0xfffeffff
 8005190:	00001388 	.word	0x00001388
 8005194:	efffffff 	.word	0xefffffff

08005198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e042      	b.n	8005230 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	223d      	movs	r2, #61	@ 0x3d
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	223c      	movs	r2, #60	@ 0x3c
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7fd fcdb 	bl	8002b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	223d      	movs	r2, #61	@ 0x3d
 80051ca:	2102      	movs	r1, #2
 80051cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	0019      	movs	r1, r3
 80051d8:	0010      	movs	r0, r2
 80051da:	f000 fe09 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2246      	movs	r2, #70	@ 0x46
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	223e      	movs	r2, #62	@ 0x3e
 80051ea:	2101      	movs	r1, #1
 80051ec:	5499      	strb	r1, [r3, r2]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	223f      	movs	r2, #63	@ 0x3f
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2240      	movs	r2, #64	@ 0x40
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2241      	movs	r2, #65	@ 0x41
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2242      	movs	r2, #66	@ 0x42
 800520a:	2101      	movs	r1, #1
 800520c:	5499      	strb	r1, [r3, r2]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2243      	movs	r2, #67	@ 0x43
 8005212:	2101      	movs	r1, #1
 8005214:	5499      	strb	r1, [r3, r2]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2244      	movs	r2, #68	@ 0x44
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2245      	movs	r2, #69	@ 0x45
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	223d      	movs	r2, #61	@ 0x3d
 800522a:	2101      	movs	r1, #1
 800522c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b002      	add	sp, #8
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e042      	b.n	80052d0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	223d      	movs	r2, #61	@ 0x3d
 800524e:	5c9b      	ldrb	r3, [r3, r2]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d107      	bne.n	8005266 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	223c      	movs	r2, #60	@ 0x3c
 800525a:	2100      	movs	r1, #0
 800525c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	0018      	movs	r0, r3
 8005262:	f000 f839 	bl	80052d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	223d      	movs	r2, #61	@ 0x3d
 800526a:	2102      	movs	r1, #2
 800526c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	0019      	movs	r1, r3
 8005278:	0010      	movs	r0, r2
 800527a:	f000 fdb9 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2246      	movs	r2, #70	@ 0x46
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	223e      	movs	r2, #62	@ 0x3e
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	223f      	movs	r2, #63	@ 0x3f
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2240      	movs	r2, #64	@ 0x40
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2241      	movs	r2, #65	@ 0x41
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2242      	movs	r2, #66	@ 0x42
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2243      	movs	r2, #67	@ 0x43
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2244      	movs	r2, #68	@ 0x44
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2245      	movs	r2, #69	@ 0x45
 80052c2:	2101      	movs	r1, #1
 80052c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	223d      	movs	r2, #61	@ 0x3d
 80052ca:	2101      	movs	r1, #1
 80052cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052e0:	46c0      	nop			@ (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <HAL_TIM_PWM_Start+0x22>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	223e      	movs	r2, #62	@ 0x3e
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	4193      	sbcs	r3, r2
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e01f      	b.n	800534a <HAL_TIM_PWM_Start+0x62>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d108      	bne.n	8005322 <HAL_TIM_PWM_Start+0x3a>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	223f      	movs	r2, #63	@ 0x3f
 8005314:	5c9b      	ldrb	r3, [r3, r2]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	1e5a      	subs	r2, r3, #1
 800531c:	4193      	sbcs	r3, r2
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e013      	b.n	800534a <HAL_TIM_PWM_Start+0x62>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d108      	bne.n	800533a <HAL_TIM_PWM_Start+0x52>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2240      	movs	r2, #64	@ 0x40
 800532c:	5c9b      	ldrb	r3, [r3, r2]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	4193      	sbcs	r3, r2
 8005336:	b2db      	uxtb	r3, r3
 8005338:	e007      	b.n	800534a <HAL_TIM_PWM_Start+0x62>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2241      	movs	r2, #65	@ 0x41
 800533e:	5c9b      	ldrb	r3, [r3, r2]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	4193      	sbcs	r3, r2
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e06a      	b.n	8005428 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start+0x7a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	223e      	movs	r2, #62	@ 0x3e
 800535c:	2102      	movs	r1, #2
 800535e:	5499      	strb	r1, [r3, r2]
 8005360:	e013      	b.n	800538a <HAL_TIM_PWM_Start+0xa2>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0x8a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	223f      	movs	r2, #63	@ 0x3f
 800536c:	2102      	movs	r1, #2
 800536e:	5499      	strb	r1, [r3, r2]
 8005370:	e00b      	b.n	800538a <HAL_TIM_PWM_Start+0xa2>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0x9a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2240      	movs	r2, #64	@ 0x40
 800537c:	2102      	movs	r1, #2
 800537e:	5499      	strb	r1, [r3, r2]
 8005380:	e003      	b.n	800538a <HAL_TIM_PWM_Start+0xa2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2241      	movs	r2, #65	@ 0x41
 8005386:	2102      	movs	r1, #2
 8005388:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	2201      	movs	r2, #1
 8005392:	0018      	movs	r0, r3
 8005394:	f001 f948 	bl	8006628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a24      	ldr	r2, [pc, #144]	@ (8005430 <HAL_TIM_PWM_Start+0x148>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xce>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a23      	ldr	r2, [pc, #140]	@ (8005434 <HAL_TIM_PWM_Start+0x14c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xce>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <HAL_TIM_PWM_Start+0x150>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_Start+0xd2>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_TIM_PWM_Start+0xd4>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	0209      	lsls	r1, r1, #8
 80053ce:	430a      	orrs	r2, r1
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	@ (8005430 <HAL_TIM_PWM_Start+0x148>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00a      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	05db      	lsls	r3, r3, #23
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d004      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x10a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <HAL_TIM_PWM_Start+0x154>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d111      	bne.n	8005416 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2207      	movs	r2, #7
 80053fa:	4013      	ands	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b06      	cmp	r3, #6
 8005402:	d010      	beq.n	8005426 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2101      	movs	r1, #1
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	e007      	b.n	8005426 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	430a      	orrs	r2, r1
 8005424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800
 800543c:	40000400 	.word	0x40000400

08005440 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e042      	b.n	80054d8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	223d      	movs	r2, #61	@ 0x3d
 8005456:	5c9b      	ldrb	r3, [r3, r2]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	223c      	movs	r2, #60	@ 0x3c
 8005462:	2100      	movs	r1, #0
 8005464:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0018      	movs	r0, r3
 800546a:	f7fd fba7 	bl	8002bbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	223d      	movs	r2, #61	@ 0x3d
 8005472:	2102      	movs	r1, #2
 8005474:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	0019      	movs	r1, r3
 8005480:	0010      	movs	r0, r2
 8005482:	f000 fcb5 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2246      	movs	r2, #70	@ 0x46
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	223e      	movs	r2, #62	@ 0x3e
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	223f      	movs	r2, #63	@ 0x3f
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2240      	movs	r2, #64	@ 0x40
 80054a2:	2101      	movs	r1, #1
 80054a4:	5499      	strb	r1, [r3, r2]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2241      	movs	r2, #65	@ 0x41
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2242      	movs	r2, #66	@ 0x42
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2243      	movs	r2, #67	@ 0x43
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2244      	movs	r2, #68	@ 0x44
 80054c2:	2101      	movs	r1, #1
 80054c4:	5499      	strb	r1, [r3, r2]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2245      	movs	r2, #69	@ 0x45
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223d      	movs	r2, #61	@ 0x3d
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	230f      	movs	r3, #15
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_IC_Start_IT+0x22>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	223e      	movs	r2, #62	@ 0x3e
 80054fc:	5c9b      	ldrb	r3, [r3, r2]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e013      	b.n	800552a <HAL_TIM_IC_Start_IT+0x4a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d104      	bne.n	8005512 <HAL_TIM_IC_Start_IT+0x32>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	223f      	movs	r2, #63	@ 0x3f
 800550c:	5c9b      	ldrb	r3, [r3, r2]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e00b      	b.n	800552a <HAL_TIM_IC_Start_IT+0x4a>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d104      	bne.n	8005522 <HAL_TIM_IC_Start_IT+0x42>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2240      	movs	r2, #64	@ 0x40
 800551c:	5c9b      	ldrb	r3, [r3, r2]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e003      	b.n	800552a <HAL_TIM_IC_Start_IT+0x4a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2241      	movs	r2, #65	@ 0x41
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	220e      	movs	r2, #14
 800552c:	18ba      	adds	r2, r7, r2
 800552e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IC_Start_IT+0x60>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2242      	movs	r2, #66	@ 0x42
 800553a:	5c9b      	ldrb	r3, [r3, r2]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e013      	b.n	8005568 <HAL_TIM_IC_Start_IT+0x88>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d104      	bne.n	8005550 <HAL_TIM_IC_Start_IT+0x70>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2243      	movs	r2, #67	@ 0x43
 800554a:	5c9b      	ldrb	r3, [r3, r2]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e00b      	b.n	8005568 <HAL_TIM_IC_Start_IT+0x88>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b08      	cmp	r3, #8
 8005554:	d104      	bne.n	8005560 <HAL_TIM_IC_Start_IT+0x80>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2244      	movs	r2, #68	@ 0x44
 800555a:	5c9b      	ldrb	r3, [r3, r2]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e003      	b.n	8005568 <HAL_TIM_IC_Start_IT+0x88>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2245      	movs	r2, #69	@ 0x45
 8005564:	5c9b      	ldrb	r3, [r3, r2]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	210d      	movs	r1, #13
 800556a:	187a      	adds	r2, r7, r1
 800556c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800556e:	230e      	movs	r3, #14
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d103      	bne.n	8005580 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005578:	187b      	adds	r3, r7, r1
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d001      	beq.n	8005584 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0ac      	b.n	80056de <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <HAL_TIM_IC_Start_IT+0xb4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	223e      	movs	r2, #62	@ 0x3e
 800558e:	2102      	movs	r1, #2
 8005590:	5499      	strb	r1, [r3, r2]
 8005592:	e013      	b.n	80055bc <HAL_TIM_IC_Start_IT+0xdc>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_IC_Start_IT+0xc4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	223f      	movs	r2, #63	@ 0x3f
 800559e:	2102      	movs	r1, #2
 80055a0:	5499      	strb	r1, [r3, r2]
 80055a2:	e00b      	b.n	80055bc <HAL_TIM_IC_Start_IT+0xdc>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_IC_Start_IT+0xd4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2240      	movs	r2, #64	@ 0x40
 80055ae:	2102      	movs	r1, #2
 80055b0:	5499      	strb	r1, [r3, r2]
 80055b2:	e003      	b.n	80055bc <HAL_TIM_IC_Start_IT+0xdc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2241      	movs	r2, #65	@ 0x41
 80055b8:	2102      	movs	r1, #2
 80055ba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_TIM_IC_Start_IT+0xec>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2242      	movs	r2, #66	@ 0x42
 80055c6:	2102      	movs	r1, #2
 80055c8:	5499      	strb	r1, [r3, r2]
 80055ca:	e013      	b.n	80055f4 <HAL_TIM_IC_Start_IT+0x114>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d104      	bne.n	80055dc <HAL_TIM_IC_Start_IT+0xfc>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2243      	movs	r2, #67	@ 0x43
 80055d6:	2102      	movs	r1, #2
 80055d8:	5499      	strb	r1, [r3, r2]
 80055da:	e00b      	b.n	80055f4 <HAL_TIM_IC_Start_IT+0x114>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d104      	bne.n	80055ec <HAL_TIM_IC_Start_IT+0x10c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2244      	movs	r2, #68	@ 0x44
 80055e6:	2102      	movs	r1, #2
 80055e8:	5499      	strb	r1, [r3, r2]
 80055ea:	e003      	b.n	80055f4 <HAL_TIM_IC_Start_IT+0x114>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2245      	movs	r2, #69	@ 0x45
 80055f0:	2102      	movs	r1, #2
 80055f2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d02a      	beq.n	8005650 <HAL_TIM_IC_Start_IT+0x170>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d830      	bhi.n	8005662 <HAL_TIM_IC_Start_IT+0x182>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b08      	cmp	r3, #8
 8005604:	d01b      	beq.n	800563e <HAL_TIM_IC_Start_IT+0x15e>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d82a      	bhi.n	8005662 <HAL_TIM_IC_Start_IT+0x182>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IC_Start_IT+0x13a>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d009      	beq.n	800562c <HAL_TIM_IC_Start_IT+0x14c>
 8005618:	e023      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2102      	movs	r1, #2
 8005626:	430a      	orrs	r2, r1
 8005628:	60da      	str	r2, [r3, #12]
      break;
 800562a:	e01f      	b.n	800566c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2104      	movs	r1, #4
 8005638:	430a      	orrs	r2, r1
 800563a:	60da      	str	r2, [r3, #12]
      break;
 800563c:	e016      	b.n	800566c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2108      	movs	r1, #8
 800564a:	430a      	orrs	r2, r1
 800564c:	60da      	str	r2, [r3, #12]
      break;
 800564e:	e00d      	b.n	800566c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2110      	movs	r1, #16
 800565c:	430a      	orrs	r2, r1
 800565e:	60da      	str	r2, [r3, #12]
      break;
 8005660:	e004      	b.n	800566c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8005662:	230f      	movs	r3, #15
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
      break;
 800566a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800566c:	230f      	movs	r3, #15
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d130      	bne.n	80056d8 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	2201      	movs	r2, #1
 800567e:	0018      	movs	r0, r3
 8005680:	f000 ffd2 	bl	8006628 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	@ (80056e8 <HAL_TIM_IC_Start_IT+0x208>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00a      	beq.n	80056a4 <HAL_TIM_IC_Start_IT+0x1c4>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	05db      	lsls	r3, r3, #23
 8005696:	429a      	cmp	r2, r3
 8005698:	d004      	beq.n	80056a4 <HAL_TIM_IC_Start_IT+0x1c4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a13      	ldr	r2, [pc, #76]	@ (80056ec <HAL_TIM_IC_Start_IT+0x20c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d111      	bne.n	80056c8 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2207      	movs	r2, #7
 80056ac:	4013      	ands	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d010      	beq.n	80056d8 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2101      	movs	r1, #1
 80056c2:	430a      	orrs	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	e007      	b.n	80056d8 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2101      	movs	r1, #1
 80056d4:	430a      	orrs	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056d8:	230f      	movs	r3, #15
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	781b      	ldrb	r3, [r3, #0]
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b004      	add	sp, #16
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40000400 	.word	0x40000400

080056f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2202      	movs	r2, #2
 800570c:	4013      	ands	r3, r2
 800570e:	d021      	beq.n	8005754 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2202      	movs	r2, #2
 8005714:	4013      	ands	r3, r2
 8005716:	d01d      	beq.n	8005754 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2203      	movs	r2, #3
 800571e:	4252      	negs	r2, r2
 8005720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2203      	movs	r2, #3
 8005730:	4013      	ands	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	0018      	movs	r0, r3
 8005738:	f7fc ff50 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 800573c:	e007      	b.n	800574e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	0018      	movs	r0, r3
 8005742:	f000 fb3d 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fb41 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2204      	movs	r2, #4
 8005758:	4013      	ands	r3, r2
 800575a:	d022      	beq.n	80057a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2204      	movs	r2, #4
 8005760:	4013      	ands	r3, r2
 8005762:	d01e      	beq.n	80057a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2205      	movs	r2, #5
 800576a:	4252      	negs	r2, r2
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	23c0      	movs	r3, #192	@ 0xc0
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4013      	ands	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	0018      	movs	r0, r3
 8005786:	f7fc ff29 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 800578a:	e007      	b.n	800579c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0018      	movs	r0, r3
 8005790:	f000 fb16 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 fb1a 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2208      	movs	r2, #8
 80057a6:	4013      	ands	r3, r2
 80057a8:	d021      	beq.n	80057ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2208      	movs	r2, #8
 80057ae:	4013      	ands	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2209      	movs	r2, #9
 80057b8:	4252      	negs	r2, r2
 80057ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2203      	movs	r2, #3
 80057ca:	4013      	ands	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fc ff03 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80057d6:	e007      	b.n	80057e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 faf0 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 faf4 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2210      	movs	r2, #16
 80057f2:	4013      	ands	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2210      	movs	r2, #16
 80057fa:	4013      	ands	r3, r2
 80057fc:	d01e      	beq.n	800583c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2211      	movs	r2, #17
 8005804:	4252      	negs	r2, r2
 8005806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2208      	movs	r2, #8
 800580c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	23c0      	movs	r3, #192	@ 0xc0
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4013      	ands	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	0018      	movs	r0, r3
 8005820:	f7fc fedc 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 8005824:	e007      	b.n	8005836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0018      	movs	r0, r3
 800582a:	f000 fac9 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	0018      	movs	r0, r3
 8005832:	f000 facd 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2201      	movs	r2, #1
 8005840:	4013      	ands	r3, r2
 8005842:	d00c      	beq.n	800585e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d008      	beq.n	800585e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2202      	movs	r2, #2
 8005852:	4252      	negs	r2, r2
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0018      	movs	r0, r3
 800585a:	f000 faa9 	bl	8005db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2280      	movs	r2, #128	@ 0x80
 8005862:	4013      	ands	r3, r2
 8005864:	d00c      	beq.n	8005880 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	4013      	ands	r3, r2
 800586c:	d008      	beq.n	8005880 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2281      	movs	r2, #129	@ 0x81
 8005874:	4252      	negs	r2, r2
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 ffb6 	bl	80067ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2240      	movs	r2, #64	@ 0x40
 8005884:	4013      	ands	r3, r2
 8005886:	d00c      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2240      	movs	r2, #64	@ 0x40
 800588c:	4013      	ands	r3, r2
 800588e:	d008      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2241      	movs	r2, #65	@ 0x41
 8005896:	4252      	negs	r2, r2
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	0018      	movs	r0, r3
 800589e:	f000 fa9f 	bl	8005de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2220      	movs	r2, #32
 80058a6:	4013      	ands	r3, r2
 80058a8:	d00c      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	4013      	ands	r3, r2
 80058b0:	d008      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2221      	movs	r2, #33	@ 0x21
 80058b8:	4252      	negs	r2, r2
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 ff8c 	bl	80067dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b004      	add	sp, #16
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	2317      	movs	r3, #23
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	223c      	movs	r2, #60	@ 0x3c
 80058e4:	5c9b      	ldrb	r3, [r3, r2]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_IC_ConfigChannel+0x22>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e08c      	b.n	8005a08 <HAL_TIM_IC_ConfigChannel+0x13c>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	223c      	movs	r2, #60	@ 0x3c
 80058f2:	2101      	movs	r1, #1
 80058f4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800590c:	f000 fcd4 	bl	80062b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	210c      	movs	r1, #12
 800591c:	438a      	bics	r2, r1
 800591e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6999      	ldr	r1, [r3, #24]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e062      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b04      	cmp	r3, #4
 8005938:	d11c      	bne.n	8005974 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800594a:	f000 fd39 	bl	80063c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	492d      	ldr	r1, [pc, #180]	@ (8005a10 <HAL_TIM_IC_ConfigChannel+0x144>)
 800595a:	400a      	ands	r2, r1
 800595c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6999      	ldr	r1, [r3, #24]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	021a      	lsls	r2, r3, #8
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	619a      	str	r2, [r3, #24]
 8005972:	e042      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b08      	cmp	r3, #8
 8005978:	d11b      	bne.n	80059b2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800598a:	f000 fd8d 	bl	80064a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	210c      	movs	r1, #12
 800599a:	438a      	bics	r2, r1
 800599c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	61da      	str	r2, [r3, #28]
 80059b0:	e023      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d11c      	bne.n	80059f2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80059c8:	f000 fdae 	bl	8006528 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	490e      	ldr	r1, [pc, #56]	@ (8005a10 <HAL_TIM_IC_ConfigChannel+0x144>)
 80059d8:	400a      	ands	r2, r1
 80059da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69d9      	ldr	r1, [r3, #28]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	61da      	str	r2, [r3, #28]
 80059f0:	e003      	b.n	80059fa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80059f2:	2317      	movs	r3, #23
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	223c      	movs	r2, #60	@ 0x3c
 80059fe:	2100      	movs	r1, #0
 8005a00:	5499      	strb	r1, [r3, r2]

  return status;
 8005a02:	2317      	movs	r3, #23
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	781b      	ldrb	r3, [r3, #0]
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b006      	add	sp, #24
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	fffff3ff 	.word	0xfffff3ff

08005a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a20:	2317      	movs	r3, #23
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	223c      	movs	r2, #60	@ 0x3c
 8005a2c:	5c9b      	ldrb	r3, [r3, r2]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e0ad      	b.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	223c      	movs	r2, #60	@ 0x3c
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d100      	bne.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005a44:	e076      	b.n	8005b34 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d900      	bls.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005a4c:	e095      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x166>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d04e      	beq.n	8005af2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d900      	bls.n	8005a5c <HAL_TIM_PWM_ConfigChannel+0x48>
 8005a5a:	e08e      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x166>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x56>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d021      	beq.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x98>
 8005a68:	e087      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	0011      	movs	r1, r2
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 fa40 	bl	8005ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2108      	movs	r1, #8
 8005a84:	430a      	orrs	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2104      	movs	r1, #4
 8005a94:	438a      	bics	r2, r1
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
      break;
 8005aaa:	e06b      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	0011      	movs	r1, r2
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f000 fa9d 	bl	8005ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2180      	movs	r1, #128	@ 0x80
 8005ac6:	0109      	lsls	r1, r1, #4
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4931      	ldr	r1, [pc, #196]	@ (8005b9c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005ad8:	400a      	ands	r2, r1
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]
      break;
 8005af0:	e048      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	0011      	movs	r1, r2
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 faf8 	bl	80060f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2108      	movs	r1, #8
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69d9      	ldr	r1, [r3, #28]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	61da      	str	r2, [r3, #28]
      break;
 8005b32:	e027      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 fb57 	bl	80061f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2180      	movs	r1, #128	@ 0x80
 8005b4e:	0109      	lsls	r1, r1, #4
 8005b50:	430a      	orrs	r2, r1
 8005b52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	490f      	ldr	r1, [pc, #60]	@ (8005b9c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005b60:	400a      	ands	r2, r1
 8005b62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69d9      	ldr	r1, [r3, #28]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	61da      	str	r2, [r3, #28]
      break;
 8005b78:	e004      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005b7a:	2317      	movs	r3, #23
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
      break;
 8005b82:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	223c      	movs	r2, #60	@ 0x3c
 8005b88:	2100      	movs	r1, #0
 8005b8a:	5499      	strb	r1, [r3, r2]

  return status;
 8005b8c:	2317      	movs	r3, #23
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	781b      	ldrb	r3, [r3, #0]
}
 8005b92:	0018      	movs	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b006      	add	sp, #24
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	46c0      	nop			@ (mov r8, r8)
 8005b9c:	fffffbff 	.word	0xfffffbff

08005ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	230f      	movs	r3, #15
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	223c      	movs	r2, #60	@ 0x3c
 8005bb6:	5c9b      	ldrb	r3, [r3, r2]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_ConfigClockSource+0x20>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e0bc      	b.n	8005d3a <HAL_TIM_ConfigClockSource+0x19a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	223c      	movs	r2, #60	@ 0x3c
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	223d      	movs	r2, #61	@ 0x3d
 8005bcc:	2102      	movs	r1, #2
 8005bce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2277      	movs	r2, #119	@ 0x77
 8005bdc:	4393      	bics	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4a58      	ldr	r2, [pc, #352]	@ (8005d44 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2280      	movs	r2, #128	@ 0x80
 8005bf6:	0192      	lsls	r2, r2, #6
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d040      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0xde>
 8005bfc:	2280      	movs	r2, #128	@ 0x80
 8005bfe:	0192      	lsls	r2, r2, #6
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d900      	bls.n	8005c06 <HAL_TIM_ConfigClockSource+0x66>
 8005c04:	e088      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c06:	2280      	movs	r2, #128	@ 0x80
 8005c08:	0152      	lsls	r2, r2, #5
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d100      	bne.n	8005c10 <HAL_TIM_ConfigClockSource+0x70>
 8005c0e:	e088      	b.n	8005d22 <HAL_TIM_ConfigClockSource+0x182>
 8005c10:	2280      	movs	r2, #128	@ 0x80
 8005c12:	0152      	lsls	r2, r2, #5
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d900      	bls.n	8005c1a <HAL_TIM_ConfigClockSource+0x7a>
 8005c18:	e07e      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c1a:	2b70      	cmp	r3, #112	@ 0x70
 8005c1c:	d018      	beq.n	8005c50 <HAL_TIM_ConfigClockSource+0xb0>
 8005c1e:	d900      	bls.n	8005c22 <HAL_TIM_ConfigClockSource+0x82>
 8005c20:	e07a      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c22:	2b60      	cmp	r3, #96	@ 0x60
 8005c24:	d04f      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x126>
 8005c26:	d900      	bls.n	8005c2a <HAL_TIM_ConfigClockSource+0x8a>
 8005c28:	e076      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c2a:	2b50      	cmp	r3, #80	@ 0x50
 8005c2c:	d03b      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x106>
 8005c2e:	d900      	bls.n	8005c32 <HAL_TIM_ConfigClockSource+0x92>
 8005c30:	e072      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c32:	2b40      	cmp	r3, #64	@ 0x40
 8005c34:	d057      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x146>
 8005c36:	d900      	bls.n	8005c3a <HAL_TIM_ConfigClockSource+0x9a>
 8005c38:	e06e      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c3a:	2b30      	cmp	r3, #48	@ 0x30
 8005c3c:	d063      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x166>
 8005c3e:	d86b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d060      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x166>
 8005c44:	d868      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d05d      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x166>
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d05b      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x166>
 8005c4e:	e063      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c60:	f000 fcc2 	bl	80065e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2277      	movs	r2, #119	@ 0x77
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]
      break;
 8005c7c:	e052      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	f000 fcab 	bl	80065e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2180      	movs	r1, #128	@ 0x80
 8005c9e:	01c9      	lsls	r1, r1, #7
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
      break;
 8005ca4:	e03e      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	f000 fb56 	bl	8006364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2150      	movs	r1, #80	@ 0x50
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f000 fc78 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e02e      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	f000 fbb6 	bl	8006444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2160      	movs	r1, #96	@ 0x60
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f000 fc68 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e01e      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	f000 fb36 	bl	8006364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2140      	movs	r1, #64	@ 0x40
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 fc58 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005d04:	e00e      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	0019      	movs	r1, r3
 8005d10:	0010      	movs	r0, r2
 8005d12:	f000 fc4f 	bl	80065b4 <TIM_ITRx_SetConfig>
      break;
 8005d16:	e005      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005d18:	230f      	movs	r3, #15
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
      break;
 8005d20:	e000      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005d22:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	223d      	movs	r2, #61	@ 0x3d
 8005d28:	2101      	movs	r1, #1
 8005d2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	223c      	movs	r2, #60	@ 0x3c
 8005d30:	2100      	movs	r1, #0
 8005d32:	5499      	strb	r1, [r3, r2]

  return status;
 8005d34:	230f      	movs	r3, #15
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	781b      	ldrb	r3, [r3, #0]
}
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b004      	add	sp, #16
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	ffff00ff 	.word	0xffff00ff

08005d48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b0c      	cmp	r3, #12
 8005d5a:	d01e      	beq.n	8005d9a <HAL_TIM_ReadCapturedValue+0x52>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b0c      	cmp	r3, #12
 8005d60:	d820      	bhi.n	8005da4 <HAL_TIM_ReadCapturedValue+0x5c>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d013      	beq.n	8005d90 <HAL_TIM_ReadCapturedValue+0x48>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d81a      	bhi.n	8005da4 <HAL_TIM_ReadCapturedValue+0x5c>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_TIM_ReadCapturedValue+0x34>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d005      	beq.n	8005d86 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005d7a:	e013      	b.n	8005da4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d82:	60fb      	str	r3, [r7, #12]
      break;
 8005d84:	e00f      	b.n	8005da6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	60fb      	str	r3, [r7, #12]
      break;
 8005d8e:	e00a      	b.n	8005da6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	60fb      	str	r3, [r7, #12]
      break;
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	60fb      	str	r3, [r7, #12]
      break;
 8005da2:	e000      	b.n	8005da6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005da4:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	0018      	movs	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b004      	add	sp, #16
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc8:	46c0      	nop			@ (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de8:	46c0      	nop			@ (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b002      	add	sp, #8
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a37      	ldr	r2, [pc, #220]	@ (8005ee0 <TIM_Base_SetConfig+0xf0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d008      	beq.n	8005e1a <TIM_Base_SetConfig+0x2a>
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	05db      	lsls	r3, r3, #23
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d003      	beq.n	8005e1a <TIM_Base_SetConfig+0x2a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a33      	ldr	r2, [pc, #204]	@ (8005ee4 <TIM_Base_SetConfig+0xf4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2270      	movs	r2, #112	@ 0x70
 8005e1e:	4393      	bics	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee0 <TIM_Base_SetConfig+0xf0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d014      	beq.n	8005e5e <TIM_Base_SetConfig+0x6e>
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	2380      	movs	r3, #128	@ 0x80
 8005e38:	05db      	lsls	r3, r3, #23
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d00f      	beq.n	8005e5e <TIM_Base_SetConfig+0x6e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a28      	ldr	r2, [pc, #160]	@ (8005ee4 <TIM_Base_SetConfig+0xf4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0x6e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a27      	ldr	r2, [pc, #156]	@ (8005ee8 <TIM_Base_SetConfig+0xf8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0x6e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a26      	ldr	r2, [pc, #152]	@ (8005eec <TIM_Base_SetConfig+0xfc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0x6e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a25      	ldr	r2, [pc, #148]	@ (8005ef0 <TIM_Base_SetConfig+0x100>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a24      	ldr	r2, [pc, #144]	@ (8005ef4 <TIM_Base_SetConfig+0x104>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2280      	movs	r2, #128	@ 0x80
 8005e74:	4393      	bics	r3, r2
 8005e76:	001a      	movs	r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a11      	ldr	r2, [pc, #68]	@ (8005ee0 <TIM_Base_SetConfig+0xf0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_Base_SetConfig+0xbe>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a12      	ldr	r2, [pc, #72]	@ (8005eec <TIM_Base_SetConfig+0xfc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_Base_SetConfig+0xbe>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a11      	ldr	r2, [pc, #68]	@ (8005ef0 <TIM_Base_SetConfig+0x100>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d103      	bne.n	8005eb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d106      	bne.n	8005ed6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	4393      	bics	r3, r2
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	611a      	str	r2, [r3, #16]
  }
}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40002000 	.word	0x40002000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	fffffcff 	.word	0xfffffcff

08005ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4393      	bics	r3, r2
 8005f10:	001a      	movs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2270      	movs	r2, #112	@ 0x70
 8005f26:	4393      	bics	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	4393      	bics	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	4393      	bics	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a23      	ldr	r2, [pc, #140]	@ (8005fe0 <TIM_OC1_SetConfig+0xe8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC1_SetConfig+0x6e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a22      	ldr	r2, [pc, #136]	@ (8005fe4 <TIM_OC1_SetConfig+0xec>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC1_SetConfig+0x6e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a21      	ldr	r2, [pc, #132]	@ (8005fe8 <TIM_OC1_SetConfig+0xf0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10c      	bne.n	8005f80 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	4393      	bics	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	4393      	bics	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a17      	ldr	r2, [pc, #92]	@ (8005fe0 <TIM_OC1_SetConfig+0xe8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_OC1_SetConfig+0xa0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a16      	ldr	r2, [pc, #88]	@ (8005fe4 <TIM_OC1_SetConfig+0xec>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC1_SetConfig+0xa0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a15      	ldr	r2, [pc, #84]	@ (8005fe8 <TIM_OC1_SetConfig+0xf0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d111      	bne.n	8005fbc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4a14      	ldr	r2, [pc, #80]	@ (8005fec <TIM_OC1_SetConfig+0xf4>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4a13      	ldr	r2, [pc, #76]	@ (8005ff0 <TIM_OC1_SetConfig+0xf8>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b006      	add	sp, #24
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800
 8005fec:	fffffeff 	.word	0xfffffeff
 8005ff0:	fffffdff 	.word	0xfffffdff

08005ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	2210      	movs	r2, #16
 800600a:	4393      	bics	r3, r2
 800600c:	001a      	movs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a2c      	ldr	r2, [pc, #176]	@ (80060d4 <TIM_OC2_SetConfig+0xe0>)
 8006022:	4013      	ands	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a2b      	ldr	r2, [pc, #172]	@ (80060d8 <TIM_OC2_SetConfig+0xe4>)
 800602a:	4013      	ands	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2220      	movs	r2, #32
 800603e:	4393      	bics	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a22      	ldr	r2, [pc, #136]	@ (80060dc <TIM_OC2_SetConfig+0xe8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d10d      	bne.n	8006072 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2280      	movs	r2, #128	@ 0x80
 800605a:	4393      	bics	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2240      	movs	r2, #64	@ 0x40
 800606e:	4393      	bics	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a19      	ldr	r2, [pc, #100]	@ (80060dc <TIM_OC2_SetConfig+0xe8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <TIM_OC2_SetConfig+0x96>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <TIM_OC2_SetConfig+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <TIM_OC2_SetConfig+0x96>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a17      	ldr	r2, [pc, #92]	@ (80060e4 <TIM_OC2_SetConfig+0xf0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d113      	bne.n	80060b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4a16      	ldr	r2, [pc, #88]	@ (80060e8 <TIM_OC2_SetConfig+0xf4>)
 800608e:	4013      	ands	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <TIM_OC2_SetConfig+0xf8>)
 8006096:	4013      	ands	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	621a      	str	r2, [r3, #32]
}
 80060cc:	46c0      	nop			@ (mov r8, r8)
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b006      	add	sp, #24
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	ffff8fff 	.word	0xffff8fff
 80060d8:	fffffcff 	.word	0xfffffcff
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40014400 	.word	0x40014400
 80060e4:	40014800 	.word	0x40014800
 80060e8:	fffffbff 	.word	0xfffffbff
 80060ec:	fffff7ff 	.word	0xfffff7ff

080060f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	4a31      	ldr	r2, [pc, #196]	@ (80061cc <TIM_OC3_SetConfig+0xdc>)
 8006106:	401a      	ands	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2270      	movs	r2, #112	@ 0x70
 800611c:	4393      	bics	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2203      	movs	r2, #3
 8006124:	4393      	bics	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4a26      	ldr	r2, [pc, #152]	@ (80061d0 <TIM_OC3_SetConfig+0xe0>)
 8006136:	4013      	ands	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a22      	ldr	r2, [pc, #136]	@ (80061d4 <TIM_OC3_SetConfig+0xe4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d10d      	bne.n	800616a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4a21      	ldr	r2, [pc, #132]	@ (80061d8 <TIM_OC3_SetConfig+0xe8>)
 8006152:	4013      	ands	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <TIM_OC3_SetConfig+0xec>)
 8006166:	4013      	ands	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a19      	ldr	r2, [pc, #100]	@ (80061d4 <TIM_OC3_SetConfig+0xe4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <TIM_OC3_SetConfig+0x92>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1a      	ldr	r2, [pc, #104]	@ (80061e0 <TIM_OC3_SetConfig+0xf0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_OC3_SetConfig+0x92>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a19      	ldr	r2, [pc, #100]	@ (80061e4 <TIM_OC3_SetConfig+0xf4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d113      	bne.n	80061aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <TIM_OC3_SetConfig+0xf8>)
 8006186:	4013      	ands	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <TIM_OC3_SetConfig+0xfc>)
 800618e:	4013      	ands	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b006      	add	sp, #24
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	fffffeff 	.word	0xfffffeff
 80061d0:	fffffdff 	.word	0xfffffdff
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	fffff7ff 	.word	0xfffff7ff
 80061dc:	fffffbff 	.word	0xfffffbff
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800
 80061e8:	ffffefff 	.word	0xffffefff
 80061ec:	ffffdfff 	.word	0xffffdfff

080061f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	4a24      	ldr	r2, [pc, #144]	@ (8006298 <TIM_OC4_SetConfig+0xa8>)
 8006206:	401a      	ands	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a20      	ldr	r2, [pc, #128]	@ (800629c <TIM_OC4_SetConfig+0xac>)
 800621c:	4013      	ands	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a1f      	ldr	r2, [pc, #124]	@ (80062a0 <TIM_OC4_SetConfig+0xb0>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4a1b      	ldr	r2, [pc, #108]	@ (80062a4 <TIM_OC4_SetConfig+0xb4>)
 8006238:	4013      	ands	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	031b      	lsls	r3, r3, #12
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a17      	ldr	r2, [pc, #92]	@ (80062a8 <TIM_OC4_SetConfig+0xb8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_OC4_SetConfig+0x70>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <TIM_OC4_SetConfig+0xbc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC4_SetConfig+0x70>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a15      	ldr	r2, [pc, #84]	@ (80062b0 <TIM_OC4_SetConfig+0xc0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4a14      	ldr	r2, [pc, #80]	@ (80062b4 <TIM_OC4_SetConfig+0xc4>)
 8006264:	4013      	ands	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	46bd      	mov	sp, r7
 8006292:	b006      	add	sp, #24
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			@ (mov r8, r8)
 8006298:	ffffefff 	.word	0xffffefff
 800629c:	ffff8fff 	.word	0xffff8fff
 80062a0:	fffffcff 	.word	0xfffffcff
 80062a4:	ffffdfff 	.word	0xffffdfff
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40014400 	.word	0x40014400
 80062b0:	40014800 	.word	0x40014800
 80062b4:	ffffbfff 	.word	0xffffbfff

080062b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	2201      	movs	r2, #1
 80062d2:	4393      	bics	r3, r2
 80062d4:	001a      	movs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a1e      	ldr	r2, [pc, #120]	@ (800635c <TIM_TI1_SetConfig+0xa4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d008      	beq.n	80062fa <TIM_TI1_SetConfig+0x42>
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	2380      	movs	r3, #128	@ 0x80
 80062ec:	05db      	lsls	r3, r3, #23
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d003      	beq.n	80062fa <TIM_TI1_SetConfig+0x42>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006360 <TIM_TI1_SetConfig+0xa8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d101      	bne.n	80062fe <TIM_TI1_SetConfig+0x46>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <TIM_TI1_SetConfig+0x48>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2203      	movs	r2, #3
 8006308:	4393      	bics	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e003      	b.n	800631e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2201      	movs	r2, #1
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	22f0      	movs	r2, #240	@ 0xf0
 8006322:	4393      	bics	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	22ff      	movs	r2, #255	@ 0xff
 800632c:	4013      	ands	r3, r2
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	220a      	movs	r2, #10
 8006338:	4393      	bics	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	220a      	movs	r2, #10
 8006340:	4013      	ands	r3, r2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	46c0      	nop			@ (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40000400 	.word	0x40000400

08006364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	2201      	movs	r2, #1
 800637c:	4393      	bics	r3, r2
 800637e:	001a      	movs	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	22f0      	movs	r2, #240	@ 0xf0
 800638e:	4393      	bics	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	220a      	movs	r2, #10
 80063a0:	4393      	bics	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	621a      	str	r2, [r3, #32]
}
 80063b8:	46c0      	nop			@ (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b006      	add	sp, #24
 80063be:	bd80      	pop	{r7, pc}

080063c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	2210      	movs	r2, #16
 80063da:	4393      	bics	r3, r2
 80063dc:	001a      	movs	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4a14      	ldr	r2, [pc, #80]	@ (800643c <TIM_TI2_SetConfig+0x7c>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4a10      	ldr	r2, [pc, #64]	@ (8006440 <TIM_TI2_SetConfig+0x80>)
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	031b      	lsls	r3, r3, #12
 8006406:	041b      	lsls	r3, r3, #16
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	22a0      	movs	r2, #160	@ 0xa0
 8006414:	4393      	bics	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	22a0      	movs	r2, #160	@ 0xa0
 800641e:	4013      	ands	r3, r2
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b006      	add	sp, #24
 8006438:	bd80      	pop	{r7, pc}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	fffffcff 	.word	0xfffffcff
 8006440:	ffff0fff 	.word	0xffff0fff

08006444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	2210      	movs	r2, #16
 800645c:	4393      	bics	r3, r2
 800645e:	001a      	movs	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4a0d      	ldr	r2, [pc, #52]	@ (80064a4 <TIM_TI2_ConfigInputStage+0x60>)
 800646e:	4013      	ands	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	22a0      	movs	r2, #160	@ 0xa0
 8006480:	4393      	bics	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	b006      	add	sp, #24
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	ffff0fff 	.word	0xffff0fff

080064a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <TIM_TI3_SetConfig+0x78>)
 80064c2:	401a      	ands	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2203      	movs	r2, #3
 80064d2:	4393      	bics	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	22f0      	movs	r2, #240	@ 0xf0
 80064e2:	4393      	bics	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	22ff      	movs	r2, #255	@ 0xff
 80064ec:	4013      	ands	r3, r2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006524 <TIM_TI3_SetConfig+0x7c>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	021a      	lsls	r2, r3, #8
 8006500:	23a0      	movs	r3, #160	@ 0xa0
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	4013      	ands	r3, r2
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	46c0      	nop			@ (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b006      	add	sp, #24
 800651e:	bd80      	pop	{r7, pc}
 8006520:	fffffeff 	.word	0xfffffeff
 8006524:	fffff5ff 	.word	0xfffff5ff

08006528 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4a18      	ldr	r2, [pc, #96]	@ (80065a4 <TIM_TI4_SetConfig+0x7c>)
 8006542:	401a      	ands	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_TI4_SetConfig+0x80>)
 8006552:	4013      	ands	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4a12      	ldr	r2, [pc, #72]	@ (80065ac <TIM_TI4_SetConfig+0x84>)
 8006564:	4013      	ands	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	031b      	lsls	r3, r3, #12
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4a0d      	ldr	r2, [pc, #52]	@ (80065b0 <TIM_TI4_SetConfig+0x88>)
 800657a:	4013      	ands	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	031a      	lsls	r2, r3, #12
 8006582:	23a0      	movs	r3, #160	@ 0xa0
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	4013      	ands	r3, r2
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	b006      	add	sp, #24
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	ffffefff 	.word	0xffffefff
 80065a8:	fffffcff 	.word	0xfffffcff
 80065ac:	ffff0fff 	.word	0xffff0fff
 80065b0:	ffff5fff 	.word	0xffff5fff

080065b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2270      	movs	r2, #112	@ 0x70
 80065c8:	4393      	bics	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	2207      	movs	r2, #7
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	609a      	str	r2, [r3, #8]
}
 80065de:	46c0      	nop			@ (mov r8, r8)
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b004      	add	sp, #16
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4a09      	ldr	r2, [pc, #36]	@ (8006624 <TIM_ETR_SetConfig+0x3c>)
 8006600:	4013      	ands	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	021a      	lsls	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	431a      	orrs	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	46c0      	nop			@ (mov r8, r8)
 800661e:	46bd      	mov	sp, r7
 8006620:	b006      	add	sp, #24
 8006622:	bd80      	pop	{r7, pc}
 8006624:	ffff00ff 	.word	0xffff00ff

08006628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	221f      	movs	r2, #31
 8006638:	4013      	ands	r3, r2
 800663a:	2201      	movs	r2, #1
 800663c:	409a      	lsls	r2, r3
 800663e:	0013      	movs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	43d2      	mvns	r2, r2
 800664a:	401a      	ands	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1a      	ldr	r2, [r3, #32]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	211f      	movs	r1, #31
 8006658:	400b      	ands	r3, r1
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	4099      	lsls	r1, r3
 800665e:	000b      	movs	r3, r1
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	46bd      	mov	sp, r7
 800666a:	b006      	add	sp, #24
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	223c      	movs	r2, #60	@ 0x3c
 800667e:	5c9b      	ldrb	r3, [r3, r2]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006684:	2302      	movs	r3, #2
 8006686:	e042      	b.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	223c      	movs	r2, #60	@ 0x3c
 800668c:	2101      	movs	r1, #1
 800668e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	223d      	movs	r2, #61	@ 0x3d
 8006694:	2102      	movs	r1, #2
 8006696:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2270      	movs	r2, #112	@ 0x70
 80066ac:	4393      	bics	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00a      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	05db      	lsls	r3, r3, #23
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d004      	beq.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a0f      	ldr	r2, [pc, #60]	@ (800671c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d10c      	bne.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2280      	movs	r2, #128	@ 0x80
 80066e6:	4393      	bics	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	223d      	movs	r2, #61	@ 0x3d
 8006700:	2101      	movs	r1, #1
 8006702:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	223c      	movs	r2, #60	@ 0x3c
 8006708:	2100      	movs	r1, #0
 800670a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	0018      	movs	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	b004      	add	sp, #16
 8006714:	bd80      	pop	{r7, pc}
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40000400 	.word	0x40000400

08006720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	223c      	movs	r2, #60	@ 0x3c
 8006732:	5c9b      	ldrb	r3, [r3, r2]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006738:	2302      	movs	r3, #2
 800673a:	e03e      	b.n	80067ba <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	223c      	movs	r2, #60	@ 0x3c
 8006740:	2101      	movs	r1, #1
 8006742:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	22ff      	movs	r2, #255	@ 0xff
 8006748:	4393      	bics	r3, r2
 800674a:	001a      	movs	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006758:	401a      	ands	r2, r3
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4a18      	ldr	r2, [pc, #96]	@ (80067c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006766:	401a      	ands	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a16      	ldr	r2, [pc, #88]	@ (80067cc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006774:	401a      	ands	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a13      	ldr	r2, [pc, #76]	@ (80067d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006782:	401a      	ands	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a11      	ldr	r2, [pc, #68]	@ (80067d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006790:	401a      	ands	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a0e      	ldr	r2, [pc, #56]	@ (80067d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800679e:	401a      	ands	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	223c      	movs	r2, #60	@ 0x3c
 80067b4:	2100      	movs	r1, #0
 80067b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	0018      	movs	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	b004      	add	sp, #16
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	fffffcff 	.word	0xfffffcff
 80067c8:	fffffbff 	.word	0xfffffbff
 80067cc:	fffff7ff 	.word	0xfffff7ff
 80067d0:	ffffefff 	.word	0xffffefff
 80067d4:	ffffdfff 	.word	0xffffdfff
 80067d8:	ffffbfff 	.word	0xffffbfff

080067dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067e4:	46c0      	nop			@ (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b002      	add	sp, #8
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e044      	b.n	8006898 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d107      	bne.n	8006826 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2278      	movs	r2, #120	@ 0x78
 800681a:	2100      	movs	r1, #0
 800681c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	f7fc fab1 	bl	8002d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2224      	movs	r2, #36	@ 0x24
 800682a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2101      	movs	r1, #1
 8006838:	438a      	bics	r2, r1
 800683a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	0018      	movs	r0, r3
 8006848:	f000 fd48 	bl	80072dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	0018      	movs	r0, r3
 8006850:	f000 fc1c 	bl	800708c <UART_SetConfig>
 8006854:	0003      	movs	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e01c      	b.n	8006898 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	490d      	ldr	r1, [pc, #52]	@ (80068a0 <HAL_UART_Init+0xa4>)
 800686a:	400a      	ands	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	212a      	movs	r1, #42	@ 0x2a
 800687a:	438a      	bics	r2, r1
 800687c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2101      	movs	r1, #1
 800688a:	430a      	orrs	r2, r1
 800688c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0018      	movs	r0, r3
 8006892:	f000 fdd7 	bl	8007444 <UART_CheckIdleState>
 8006896:	0003      	movs	r3, r0
}
 8006898:	0018      	movs	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	b002      	add	sp, #8
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	ffffb7ff 	.word	0xffffb7ff

080068a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	1dbb      	adds	r3, r7, #6
 80068b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d000      	beq.n	80068bc <HAL_UART_Transmit_DMA+0x18>
 80068ba:	e077      	b.n	80069ac <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_UART_Transmit_DMA+0x26>
 80068c2:	1dbb      	adds	r3, r7, #6
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e06f      	b.n	80069ae <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	2380      	movs	r3, #128	@ 0x80
 80068d4:	015b      	lsls	r3, r3, #5
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d109      	bne.n	80068ee <HAL_UART_Transmit_DMA+0x4a>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2201      	movs	r2, #1
 80068e6:	4013      	ands	r3, r2
 80068e8:	d001      	beq.n	80068ee <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e05f      	b.n	80069ae <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	1dba      	adds	r2, r7, #6
 80068f8:	2150      	movs	r1, #80	@ 0x50
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1dba      	adds	r2, r7, #6
 8006902:	2152      	movs	r1, #82	@ 0x52
 8006904:	8812      	ldrh	r2, [r2, #0]
 8006906:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2284      	movs	r2, #132	@ 0x84
 800690c:	2100      	movs	r1, #0
 800690e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2221      	movs	r2, #33	@ 0x21
 8006914:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	2b00      	cmp	r3, #0
 800691c:	d027      	beq.n	800696e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006922:	4a25      	ldr	r2, [pc, #148]	@ (80069b8 <HAL_UART_Transmit_DMA+0x114>)
 8006924:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	4a24      	ldr	r2, [pc, #144]	@ (80069bc <HAL_UART_Transmit_DMA+0x118>)
 800692c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	4a23      	ldr	r2, [pc, #140]	@ (80069c0 <HAL_UART_Transmit_DMA+0x11c>)
 8006934:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693a:	2200      	movs	r2, #0
 800693c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006946:	0019      	movs	r1, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3328      	adds	r3, #40	@ 0x28
 800694e:	001a      	movs	r2, r3
 8006950:	1dbb      	adds	r3, r7, #6
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	f7fd fa44 	bl	8003de0 <HAL_DMA_Start_IT>
 8006958:	1e03      	subs	r3, r0, #0
 800695a:	d008      	beq.n	800696e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2284      	movs	r2, #132	@ 0x84
 8006960:	2110      	movs	r1, #16
 8006962:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e01f      	b.n	80069ae <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2240      	movs	r2, #64	@ 0x40
 8006974:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006976:	f3ef 8310 	mrs	r3, PRIMASK
 800697a:	613b      	str	r3, [r7, #16]
  return(result);
 800697c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	2301      	movs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f383 8810 	msr	PRIMASK, r3
}
 800698a:	46c0      	nop			@ (mov r8, r8)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2180      	movs	r1, #128	@ 0x80
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f383 8810 	msr	PRIMASK, r3
}
 80069a6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e000      	b.n	80069ae <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
  }
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b008      	add	sp, #32
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	080078c5 	.word	0x080078c5
 80069bc:	08007959 	.word	0x08007959
 80069c0:	08007ae7 	.word	0x08007ae7

080069c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	1dbb      	adds	r3, r7, #6
 80069d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2280      	movs	r2, #128	@ 0x80
 80069d6:	589b      	ldr	r3, [r3, r2]
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d145      	bne.n	8006a68 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_UART_Receive_DMA+0x26>
 80069e2:	1dbb      	adds	r3, r7, #6
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e03d      	b.n	8006a6a <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	015b      	lsls	r3, r3, #5
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d109      	bne.n	8006a0e <HAL_UART_Receive_DMA+0x4a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d105      	bne.n	8006a0e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2201      	movs	r2, #1
 8006a06:	4013      	ands	r3, r2
 8006a08:	d001      	beq.n	8006a0e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e02d      	b.n	8006a6a <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	2380      	movs	r3, #128	@ 0x80
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d019      	beq.n	8006a56 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a22:	f3ef 8310 	mrs	r3, PRIMASK
 8006a26:	613b      	str	r3, [r7, #16]
  return(result);
 8006a28:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f383 8810 	msr	PRIMASK, r3
}
 8006a36:	46c0      	nop			@ (mov r8, r8)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2180      	movs	r1, #128	@ 0x80
 8006a44:	04c9      	lsls	r1, r1, #19
 8006a46:	430a      	orrs	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f383 8810 	msr	PRIMASK, r3
}
 8006a54:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a56:	1dbb      	adds	r3, r7, #6
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 fe08 	bl	8007674 <UART_Start_Receive_DMA>
 8006a64:	0003      	movs	r3, r0
 8006a66:	e000      	b.n	8006a6a <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
  }
}
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b008      	add	sp, #32
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a74:	b590      	push	{r4, r7, lr}
 8006a76:	b0ab      	sub	sp, #172	@ 0xac
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	22a4      	movs	r2, #164	@ 0xa4
 8006a84:	18b9      	adds	r1, r7, r2
 8006a86:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	20a0      	movs	r0, #160	@ 0xa0
 8006a90:	1839      	adds	r1, r7, r0
 8006a92:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	219c      	movs	r1, #156	@ 0x9c
 8006a9c:	1879      	adds	r1, r7, r1
 8006a9e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006aa0:	0011      	movs	r1, r2
 8006aa2:	18bb      	adds	r3, r7, r2
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a99      	ldr	r2, [pc, #612]	@ (8006d0c <HAL_UART_IRQHandler+0x298>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2298      	movs	r2, #152	@ 0x98
 8006aac:	18bc      	adds	r4, r7, r2
 8006aae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006ab0:	18bb      	adds	r3, r7, r2
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d114      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ab8:	187b      	adds	r3, r7, r1
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2220      	movs	r2, #32
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d00f      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ac2:	183b      	adds	r3, r7, r0
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d00a      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d100      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x62>
 8006ad4:	e29e      	b.n	8007014 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	0010      	movs	r0, r2
 8006ade:	4798      	blx	r3
      }
      return;
 8006ae0:	e298      	b.n	8007014 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ae2:	2398      	movs	r3, #152	@ 0x98
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d100      	bne.n	8006aee <HAL_UART_IRQHandler+0x7a>
 8006aec:	e114      	b.n	8006d18 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006aee:	239c      	movs	r3, #156	@ 0x9c
 8006af0:	18fb      	adds	r3, r7, r3
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2201      	movs	r2, #1
 8006af6:	4013      	ands	r3, r2
 8006af8:	d106      	bne.n	8006b08 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006afa:	23a0      	movs	r3, #160	@ 0xa0
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a83      	ldr	r2, [pc, #524]	@ (8006d10 <HAL_UART_IRQHandler+0x29c>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	d100      	bne.n	8006b08 <HAL_UART_IRQHandler+0x94>
 8006b06:	e107      	b.n	8006d18 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b08:	23a4      	movs	r3, #164	@ 0xa4
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4013      	ands	r3, r2
 8006b12:	d012      	beq.n	8006b3a <HAL_UART_IRQHandler+0xc6>
 8006b14:	23a0      	movs	r3, #160	@ 0xa0
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	2380      	movs	r3, #128	@ 0x80
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d00b      	beq.n	8006b3a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2201      	movs	r2, #1
 8006b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2284      	movs	r2, #132	@ 0x84
 8006b2e:	589b      	ldr	r3, [r3, r2]
 8006b30:	2201      	movs	r2, #1
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2184      	movs	r1, #132	@ 0x84
 8006b38:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b3a:	23a4      	movs	r3, #164	@ 0xa4
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2202      	movs	r2, #2
 8006b42:	4013      	ands	r3, r2
 8006b44:	d011      	beq.n	8006b6a <HAL_UART_IRQHandler+0xf6>
 8006b46:	239c      	movs	r3, #156	@ 0x9c
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d00b      	beq.n	8006b6a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2202      	movs	r2, #2
 8006b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2284      	movs	r2, #132	@ 0x84
 8006b5e:	589b      	ldr	r3, [r3, r2]
 8006b60:	2204      	movs	r2, #4
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2184      	movs	r1, #132	@ 0x84
 8006b68:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b6a:	23a4      	movs	r3, #164	@ 0xa4
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2204      	movs	r2, #4
 8006b72:	4013      	ands	r3, r2
 8006b74:	d011      	beq.n	8006b9a <HAL_UART_IRQHandler+0x126>
 8006b76:	239c      	movs	r3, #156	@ 0x9c
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d00b      	beq.n	8006b9a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2204      	movs	r2, #4
 8006b88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2284      	movs	r2, #132	@ 0x84
 8006b8e:	589b      	ldr	r3, [r3, r2]
 8006b90:	2202      	movs	r2, #2
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2184      	movs	r1, #132	@ 0x84
 8006b98:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b9a:	23a4      	movs	r3, #164	@ 0xa4
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d017      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ba6:	23a0      	movs	r3, #160	@ 0xa0
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2220      	movs	r2, #32
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d105      	bne.n	8006bbe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bb2:	239c      	movs	r3, #156	@ 0x9c
 8006bb4:	18fb      	adds	r3, r7, r3
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2208      	movs	r2, #8
 8006bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2284      	movs	r2, #132	@ 0x84
 8006bca:	589b      	ldr	r3, [r3, r2]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2184      	movs	r1, #132	@ 0x84
 8006bd4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bd6:	23a4      	movs	r3, #164	@ 0xa4
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	2380      	movs	r3, #128	@ 0x80
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	4013      	ands	r3, r2
 8006be2:	d013      	beq.n	8006c0c <HAL_UART_IRQHandler+0x198>
 8006be4:	23a0      	movs	r3, #160	@ 0xa0
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	2380      	movs	r3, #128	@ 0x80
 8006bec:	04db      	lsls	r3, r3, #19
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d00c      	beq.n	8006c0c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2280      	movs	r2, #128	@ 0x80
 8006bf8:	0112      	lsls	r2, r2, #4
 8006bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2284      	movs	r2, #132	@ 0x84
 8006c00:	589b      	ldr	r3, [r3, r2]
 8006c02:	2220      	movs	r2, #32
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2184      	movs	r1, #132	@ 0x84
 8006c0a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2284      	movs	r2, #132	@ 0x84
 8006c10:	589b      	ldr	r3, [r3, r2]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d100      	bne.n	8006c18 <HAL_UART_IRQHandler+0x1a4>
 8006c16:	e1ff      	b.n	8007018 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c18:	23a4      	movs	r3, #164	@ 0xa4
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	4013      	ands	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c24:	23a0      	movs	r3, #160	@ 0xa0
 8006c26:	18fb      	adds	r3, r7, r3
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d008      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	0010      	movs	r0, r2
 8006c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2284      	movs	r2, #132	@ 0x84
 8006c46:	589b      	ldr	r3, [r3, r2]
 8006c48:	2194      	movs	r1, #148	@ 0x94
 8006c4a:	187a      	adds	r2, r7, r1
 8006c4c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2240      	movs	r2, #64	@ 0x40
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b40      	cmp	r3, #64	@ 0x40
 8006c5a:	d004      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c5c:	187b      	adds	r3, r7, r1
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2228      	movs	r2, #40	@ 0x28
 8006c62:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c64:	d047      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 fdc7 	bl	80077fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2240      	movs	r2, #64	@ 0x40
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b40      	cmp	r3, #64	@ 0x40
 8006c7a:	d137      	bne.n	8006cec <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c80:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c84:	2090      	movs	r0, #144	@ 0x90
 8006c86:	183a      	adds	r2, r7, r0
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c90:	f383 8810 	msr	PRIMASK, r3
}
 8006c94:	46c0      	nop			@ (mov r8, r8)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2140      	movs	r1, #64	@ 0x40
 8006ca2:	438a      	bics	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]
 8006ca6:	183b      	adds	r3, r7, r0
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cae:	f383 8810 	msr	PRIMASK, r3
}
 8006cb2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d012      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc0:	4a14      	ldr	r2, [pc, #80]	@ (8006d14 <HAL_UART_IRQHandler+0x2a0>)
 8006cc2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7fd f927 	bl	8003f1c <HAL_DMA_Abort_IT>
 8006cce:	1e03      	subs	r3, r0, #0
 8006cd0:	d01a      	beq.n	8006d08 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cdc:	0018      	movs	r0, r3
 8006cde:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	e012      	b.n	8006d08 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 f9bd 	bl	8007064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cea:	e00d      	b.n	8006d08 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f000 f9b8 	bl	8007064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e008      	b.n	8006d08 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 f9b3 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2284      	movs	r2, #132	@ 0x84
 8006d02:	2100      	movs	r1, #0
 8006d04:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006d06:	e187      	b.n	8007018 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d08:	46c0      	nop			@ (mov r8, r8)
    return;
 8006d0a:	e185      	b.n	8007018 <HAL_UART_IRQHandler+0x5a4>
 8006d0c:	0000080f 	.word	0x0000080f
 8006d10:	04000120 	.word	0x04000120
 8006d14:	08007b6b 	.word	0x08007b6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d000      	beq.n	8006d22 <HAL_UART_IRQHandler+0x2ae>
 8006d20:	e139      	b.n	8006f96 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d22:	23a4      	movs	r3, #164	@ 0xa4
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2210      	movs	r2, #16
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d100      	bne.n	8006d30 <HAL_UART_IRQHandler+0x2bc>
 8006d2e:	e132      	b.n	8006f96 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d30:	23a0      	movs	r3, #160	@ 0xa0
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2210      	movs	r2, #16
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d100      	bne.n	8006d3e <HAL_UART_IRQHandler+0x2ca>
 8006d3c:	e12b      	b.n	8006f96 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2210      	movs	r2, #16
 8006d44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2240      	movs	r2, #64	@ 0x40
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b40      	cmp	r3, #64	@ 0x40
 8006d52:	d000      	beq.n	8006d56 <HAL_UART_IRQHandler+0x2e2>
 8006d54:	e09f      	b.n	8006e96 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	217e      	movs	r1, #126	@ 0x7e
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d100      	bne.n	8006d6e <HAL_UART_IRQHandler+0x2fa>
 8006d6c:	e156      	b.n	800701c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2258      	movs	r2, #88	@ 0x58
 8006d72:	5a9b      	ldrh	r3, [r3, r2]
 8006d74:	187a      	adds	r2, r7, r1
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d300      	bcc.n	8006d7e <HAL_UART_IRQHandler+0x30a>
 8006d7c:	e14e      	b.n	800701c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	187a      	adds	r2, r7, r1
 8006d82:	215a      	movs	r1, #90	@ 0x5a
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d06f      	beq.n	8006e72 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d92:	f3ef 8310 	mrs	r3, PRIMASK
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da2:	f383 8810 	msr	PRIMASK, r3
}
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	499e      	ldr	r1, [pc, #632]	@ (800702c <HAL_UART_IRQHandler+0x5b8>)
 8006db4:	400a      	ands	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	f383 8810 	msr	PRIMASK, r3
}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dce:	2301      	movs	r3, #1
 8006dd0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd4:	f383 8810 	msr	PRIMASK, r3
}
 8006dd8:	46c0      	nop			@ (mov r8, r8)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2101      	movs	r1, #1
 8006de6:	438a      	bics	r2, r1
 8006de8:	609a      	str	r2, [r3, #8]
 8006dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e00:	2301      	movs	r3, #1
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e06:	f383 8810 	msr	PRIMASK, r3
}
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2140      	movs	r1, #64	@ 0x40
 8006e18:	438a      	bics	r2, r1
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e1e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e22:	f383 8810 	msr	PRIMASK, r3
}
 8006e26:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2280      	movs	r2, #128	@ 0x80
 8006e2c:	2120      	movs	r1, #32
 8006e2e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e36:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e40:	2301      	movs	r3, #1
 8006e42:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e46:	f383 8810 	msr	PRIMASK, r3
}
 8006e4a:	46c0      	nop			@ (mov r8, r8)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2110      	movs	r1, #16
 8006e58:	438a      	bics	r2, r1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e62:	f383 8810 	msr	PRIMASK, r3
}
 8006e66:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7fd f81d 	bl	8003eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2258      	movs	r2, #88	@ 0x58
 8006e7c:	5a9a      	ldrh	r2, [r3, r2]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	215a      	movs	r1, #90	@ 0x5a
 8006e82:	5a5b      	ldrh	r3, [r3, r1]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	0011      	movs	r1, r2
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f000 f8f0 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e94:	e0c2      	b.n	800701c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2258      	movs	r2, #88	@ 0x58
 8006e9a:	5a99      	ldrh	r1, [r3, r2]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	225a      	movs	r2, #90	@ 0x5a
 8006ea0:	5a9b      	ldrh	r3, [r3, r2]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	208e      	movs	r0, #142	@ 0x8e
 8006ea6:	183b      	adds	r3, r7, r0
 8006ea8:	1a8a      	subs	r2, r1, r2
 8006eaa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	225a      	movs	r2, #90	@ 0x5a
 8006eb0:	5a9b      	ldrh	r3, [r3, r2]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d100      	bne.n	8006eba <HAL_UART_IRQHandler+0x446>
 8006eb8:	e0b2      	b.n	8007020 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8006eba:	183b      	adds	r3, r7, r0
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d100      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x450>
 8006ec2:	e0ad      	b.n	8007020 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ecc:	2488      	movs	r4, #136	@ 0x88
 8006ece:	193a      	adds	r2, r7, r4
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f383 8810 	msr	PRIMASK, r3
}
 8006edc:	46c0      	nop			@ (mov r8, r8)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4951      	ldr	r1, [pc, #324]	@ (8007030 <HAL_UART_IRQHandler+0x5bc>)
 8006eea:	400a      	ands	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	193b      	adds	r3, r7, r4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f383 8810 	msr	PRIMASK, r3
}
 8006efa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efc:	f3ef 8310 	mrs	r3, PRIMASK
 8006f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f02:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	2484      	movs	r4, #132	@ 0x84
 8006f06:	193a      	adds	r2, r7, r4
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f383 8810 	msr	PRIMASK, r3
}
 8006f14:	46c0      	nop			@ (mov r8, r8)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2101      	movs	r1, #1
 8006f22:	438a      	bics	r2, r1
 8006f24:	609a      	str	r2, [r3, #8]
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2280      	movs	r2, #128	@ 0x80
 8006f38:	2120      	movs	r1, #32
 8006f3a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f50:	2480      	movs	r4, #128	@ 0x80
 8006f52:	193a      	adds	r2, r7, r4
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	2301      	movs	r3, #1
 8006f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	f383 8810 	msr	PRIMASK, r3
}
 8006f60:	46c0      	nop			@ (mov r8, r8)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2110      	movs	r1, #16
 8006f6e:	438a      	bics	r2, r1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	193b      	adds	r3, r7, r4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	f383 8810 	msr	PRIMASK, r3
}
 8006f7e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f86:	183b      	adds	r3, r7, r0
 8006f88:	881a      	ldrh	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0011      	movs	r1, r2
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f000 f870 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f94:	e044      	b.n	8007020 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f96:	23a4      	movs	r3, #164	@ 0xa4
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	2380      	movs	r3, #128	@ 0x80
 8006f9e:	035b      	lsls	r3, r3, #13
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	d010      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x552>
 8006fa4:	239c      	movs	r3, #156	@ 0x9c
 8006fa6:	18fb      	adds	r3, r7, r3
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	2380      	movs	r3, #128	@ 0x80
 8006fac:	03db      	lsls	r3, r3, #15
 8006fae:	4013      	ands	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2280      	movs	r2, #128	@ 0x80
 8006fb8:	0352      	lsls	r2, r2, #13
 8006fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f000 fe15 	bl	8007bee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fc4:	e02f      	b.n	8007026 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fc6:	23a4      	movs	r3, #164	@ 0xa4
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2280      	movs	r2, #128	@ 0x80
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d00f      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fd2:	23a0      	movs	r3, #160	@ 0xa0
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2280      	movs	r2, #128	@ 0x80
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01e      	beq.n	8007024 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	0010      	movs	r0, r2
 8006fee:	4798      	blx	r3
    }
    return;
 8006ff0:	e018      	b.n	8007024 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ff2:	23a4      	movs	r3, #164	@ 0xa4
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2240      	movs	r2, #64	@ 0x40
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_UART_IRQHandler+0x5b2>
 8006ffe:	23a0      	movs	r3, #160	@ 0xa0
 8007000:	18fb      	adds	r3, r7, r3
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2240      	movs	r2, #64	@ 0x40
 8007006:	4013      	ands	r3, r2
 8007008:	d00d      	beq.n	8007026 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	0018      	movs	r0, r3
 800700e:	f000 fdc3 	bl	8007b98 <UART_EndTransmit_IT>
    return;
 8007012:	e008      	b.n	8007026 <HAL_UART_IRQHandler+0x5b2>
      return;
 8007014:	46c0      	nop			@ (mov r8, r8)
 8007016:	e006      	b.n	8007026 <HAL_UART_IRQHandler+0x5b2>
    return;
 8007018:	46c0      	nop			@ (mov r8, r8)
 800701a:	e004      	b.n	8007026 <HAL_UART_IRQHandler+0x5b2>
      return;
 800701c:	46c0      	nop			@ (mov r8, r8)
 800701e:	e002      	b.n	8007026 <HAL_UART_IRQHandler+0x5b2>
      return;
 8007020:	46c0      	nop			@ (mov r8, r8)
 8007022:	e000      	b.n	8007026 <HAL_UART_IRQHandler+0x5b2>
    return;
 8007024:	46c0      	nop			@ (mov r8, r8)
  }

}
 8007026:	46bd      	mov	sp, r7
 8007028:	b02b      	add	sp, #172	@ 0xac
 800702a:	bd90      	pop	{r4, r7, pc}
 800702c:	fffffeff 	.word	0xfffffeff
 8007030:	fffffedf 	.word	0xfffffedf

08007034 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800703c:	46c0      	nop			@ (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b002      	add	sp, #8
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800705c:	46c0      	nop			@ (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800706c:	46c0      	nop			@ (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b002      	add	sp, #8
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	000a      	movs	r2, r1
 800707e:	1cbb      	adds	r3, r7, #2
 8007080:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	46bd      	mov	sp, r7
 8007086:	b002      	add	sp, #8
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007094:	231e      	movs	r3, #30
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a83      	ldr	r2, [pc, #524]	@ (80072c8 <UART_SetConfig+0x23c>)
 80070bc:	4013      	ands	r3, r2
 80070be:	0019      	movs	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	4a7e      	ldr	r2, [pc, #504]	@ (80072cc <UART_SetConfig+0x240>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	0019      	movs	r1, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4a75      	ldr	r2, [pc, #468]	@ (80072d0 <UART_SetConfig+0x244>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	0019      	movs	r1, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	430a      	orrs	r2, r1
 8007106:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007108:	4b72      	ldr	r3, [pc, #456]	@ (80072d4 <UART_SetConfig+0x248>)
 800710a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710c:	2203      	movs	r2, #3
 800710e:	4013      	ands	r3, r2
 8007110:	2b03      	cmp	r3, #3
 8007112:	d00d      	beq.n	8007130 <UART_SetConfig+0xa4>
 8007114:	d81b      	bhi.n	800714e <UART_SetConfig+0xc2>
 8007116:	2b02      	cmp	r3, #2
 8007118:	d014      	beq.n	8007144 <UART_SetConfig+0xb8>
 800711a:	d818      	bhi.n	800714e <UART_SetConfig+0xc2>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <UART_SetConfig+0x9a>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d00a      	beq.n	800713a <UART_SetConfig+0xae>
 8007124:	e013      	b.n	800714e <UART_SetConfig+0xc2>
 8007126:	231f      	movs	r3, #31
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e012      	b.n	8007156 <UART_SetConfig+0xca>
 8007130:	231f      	movs	r3, #31
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	2202      	movs	r2, #2
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e00d      	b.n	8007156 <UART_SetConfig+0xca>
 800713a:	231f      	movs	r3, #31
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	2204      	movs	r2, #4
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e008      	b.n	8007156 <UART_SetConfig+0xca>
 8007144:	231f      	movs	r3, #31
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	2208      	movs	r2, #8
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e003      	b.n	8007156 <UART_SetConfig+0xca>
 800714e:	231f      	movs	r3, #31
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	2210      	movs	r2, #16
 8007154:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	2380      	movs	r3, #128	@ 0x80
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	429a      	cmp	r2, r3
 8007160:	d15c      	bne.n	800721c <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8007162:	231f      	movs	r3, #31
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d015      	beq.n	8007198 <UART_SetConfig+0x10c>
 800716c:	dc18      	bgt.n	80071a0 <UART_SetConfig+0x114>
 800716e:	2b04      	cmp	r3, #4
 8007170:	d00d      	beq.n	800718e <UART_SetConfig+0x102>
 8007172:	dc15      	bgt.n	80071a0 <UART_SetConfig+0x114>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <UART_SetConfig+0xf2>
 8007178:	2b02      	cmp	r3, #2
 800717a:	d005      	beq.n	8007188 <UART_SetConfig+0xfc>
 800717c:	e010      	b.n	80071a0 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717e:	f7fd ff27 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8007182:	0003      	movs	r3, r0
 8007184:	61bb      	str	r3, [r7, #24]
        break;
 8007186:	e012      	b.n	80071ae <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b53      	ldr	r3, [pc, #332]	@ (80072d8 <UART_SetConfig+0x24c>)
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e00f      	b.n	80071ae <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fd febd 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8007192:	0003      	movs	r3, r0
 8007194:	61bb      	str	r3, [r7, #24]
        break;
 8007196:	e00a      	b.n	80071ae <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	61bb      	str	r3, [r7, #24]
        break;
 800719e:	e006      	b.n	80071ae <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071a4:	231e      	movs	r3, #30
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	2201      	movs	r2, #1
 80071aa:	701a      	strb	r2, [r3, #0]
        break;
 80071ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d100      	bne.n	80071b6 <UART_SetConfig+0x12a>
 80071b4:	e07a      	b.n	80072ac <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	005a      	lsls	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	18d2      	adds	r2, r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	0019      	movs	r1, r3
 80071c8:	0010      	movs	r0, r2
 80071ca:	f7f8 ff9d 	bl	8000108 <__udivsi3>
 80071ce:	0003      	movs	r3, r0
 80071d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b0f      	cmp	r3, #15
 80071d6:	d91c      	bls.n	8007212 <UART_SetConfig+0x186>
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	2380      	movs	r3, #128	@ 0x80
 80071dc:	025b      	lsls	r3, r3, #9
 80071de:	429a      	cmp	r2, r3
 80071e0:	d217      	bcs.n	8007212 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	200e      	movs	r0, #14
 80071e8:	183b      	adds	r3, r7, r0
 80071ea:	210f      	movs	r1, #15
 80071ec:	438a      	bics	r2, r1
 80071ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2207      	movs	r2, #7
 80071f8:	4013      	ands	r3, r2
 80071fa:	b299      	uxth	r1, r3
 80071fc:	183b      	adds	r3, r7, r0
 80071fe:	183a      	adds	r2, r7, r0
 8007200:	8812      	ldrh	r2, [r2, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	183a      	adds	r2, r7, r0
 800720c:	8812      	ldrh	r2, [r2, #0]
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	e04c      	b.n	80072ac <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8007212:	231e      	movs	r3, #30
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e047      	b.n	80072ac <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721c:	231f      	movs	r3, #31
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b08      	cmp	r3, #8
 8007224:	d015      	beq.n	8007252 <UART_SetConfig+0x1c6>
 8007226:	dc18      	bgt.n	800725a <UART_SetConfig+0x1ce>
 8007228:	2b04      	cmp	r3, #4
 800722a:	d00d      	beq.n	8007248 <UART_SetConfig+0x1bc>
 800722c:	dc15      	bgt.n	800725a <UART_SetConfig+0x1ce>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <UART_SetConfig+0x1ac>
 8007232:	2b02      	cmp	r3, #2
 8007234:	d005      	beq.n	8007242 <UART_SetConfig+0x1b6>
 8007236:	e010      	b.n	800725a <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007238:	f7fd feca 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 800723c:	0003      	movs	r3, r0
 800723e:	61bb      	str	r3, [r7, #24]
        break;
 8007240:	e012      	b.n	8007268 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007242:	4b25      	ldr	r3, [pc, #148]	@ (80072d8 <UART_SetConfig+0x24c>)
 8007244:	61bb      	str	r3, [r7, #24]
        break;
 8007246:	e00f      	b.n	8007268 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007248:	f7fd fe60 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 800724c:	0003      	movs	r3, r0
 800724e:	61bb      	str	r3, [r7, #24]
        break;
 8007250:	e00a      	b.n	8007268 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007252:	2380      	movs	r3, #128	@ 0x80
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	61bb      	str	r3, [r7, #24]
        break;
 8007258:	e006      	b.n	8007268 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800725e:	231e      	movs	r3, #30
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]
        break;
 8007266:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01e      	beq.n	80072ac <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	085a      	lsrs	r2, r3, #1
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	18d2      	adds	r2, r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	0019      	movs	r1, r3
 800727e:	0010      	movs	r0, r2
 8007280:	f7f8 ff42 	bl	8000108 <__udivsi3>
 8007284:	0003      	movs	r3, r0
 8007286:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d90a      	bls.n	80072a4 <UART_SetConfig+0x218>
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	2380      	movs	r3, #128	@ 0x80
 8007292:	025b      	lsls	r3, r3, #9
 8007294:	429a      	cmp	r2, r3
 8007296:	d205      	bcs.n	80072a4 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60da      	str	r2, [r3, #12]
 80072a2:	e003      	b.n	80072ac <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80072a4:	231e      	movs	r3, #30
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072b8:	231e      	movs	r3, #30
 80072ba:	18fb      	adds	r3, r7, r3
 80072bc:	781b      	ldrb	r3, [r3, #0]
}
 80072be:	0018      	movs	r0, r3
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b008      	add	sp, #32
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	46c0      	nop			@ (mov r8, r8)
 80072c8:	ffff69f3 	.word	0xffff69f3
 80072cc:	ffffcfff 	.word	0xffffcfff
 80072d0:	fffff4ff 	.word	0xfffff4ff
 80072d4:	40021000 	.word	0x40021000
 80072d8:	007a1200 	.word	0x007a1200

080072dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e8:	2208      	movs	r2, #8
 80072ea:	4013      	ands	r3, r2
 80072ec:	d00b      	beq.n	8007306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4a4a      	ldr	r2, [pc, #296]	@ (8007420 <UART_AdvFeatureConfig+0x144>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	0019      	movs	r1, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	2201      	movs	r2, #1
 800730c:	4013      	ands	r3, r2
 800730e:	d00b      	beq.n	8007328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	4a43      	ldr	r2, [pc, #268]	@ (8007424 <UART_AdvFeatureConfig+0x148>)
 8007318:	4013      	ands	r3, r2
 800731a:	0019      	movs	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	2202      	movs	r2, #2
 800732e:	4013      	ands	r3, r2
 8007330:	d00b      	beq.n	800734a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a3b      	ldr	r2, [pc, #236]	@ (8007428 <UART_AdvFeatureConfig+0x14c>)
 800733a:	4013      	ands	r3, r2
 800733c:	0019      	movs	r1, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	2204      	movs	r2, #4
 8007350:	4013      	ands	r3, r2
 8007352:	d00b      	beq.n	800736c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4a34      	ldr	r2, [pc, #208]	@ (800742c <UART_AdvFeatureConfig+0x150>)
 800735c:	4013      	ands	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	2210      	movs	r2, #16
 8007372:	4013      	ands	r3, r2
 8007374:	d00b      	beq.n	800738e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4a2c      	ldr	r2, [pc, #176]	@ (8007430 <UART_AdvFeatureConfig+0x154>)
 800737e:	4013      	ands	r3, r2
 8007380:	0019      	movs	r1, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	2220      	movs	r2, #32
 8007394:	4013      	ands	r3, r2
 8007396:	d00b      	beq.n	80073b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4a25      	ldr	r2, [pc, #148]	@ (8007434 <UART_AdvFeatureConfig+0x158>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	0019      	movs	r1, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	2240      	movs	r2, #64	@ 0x40
 80073b6:	4013      	ands	r3, r2
 80073b8:	d01d      	beq.n	80073f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007438 <UART_AdvFeatureConfig+0x15c>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	0019      	movs	r1, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d6:	2380      	movs	r3, #128	@ 0x80
 80073d8:	035b      	lsls	r3, r3, #13
 80073da:	429a      	cmp	r2, r3
 80073dc:	d10b      	bne.n	80073f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	4a15      	ldr	r2, [pc, #84]	@ (800743c <UART_AdvFeatureConfig+0x160>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	0019      	movs	r1, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	2280      	movs	r2, #128	@ 0x80
 80073fc:	4013      	ands	r3, r2
 80073fe:	d00b      	beq.n	8007418 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	4a0e      	ldr	r2, [pc, #56]	@ (8007440 <UART_AdvFeatureConfig+0x164>)
 8007408:	4013      	ands	r3, r2
 800740a:	0019      	movs	r1, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }
}
 8007418:	46c0      	nop			@ (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}
 8007420:	ffff7fff 	.word	0xffff7fff
 8007424:	fffdffff 	.word	0xfffdffff
 8007428:	fffeffff 	.word	0xfffeffff
 800742c:	fffbffff 	.word	0xfffbffff
 8007430:	ffffefff 	.word	0xffffefff
 8007434:	ffffdfff 	.word	0xffffdfff
 8007438:	ffefffff 	.word	0xffefffff
 800743c:	ff9fffff 	.word	0xff9fffff
 8007440:	fff7ffff 	.word	0xfff7ffff

08007444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b092      	sub	sp, #72	@ 0x48
 8007448:	af02      	add	r7, sp, #8
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2284      	movs	r2, #132	@ 0x84
 8007450:	2100      	movs	r1, #0
 8007452:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007454:	f7fb fdc8 	bl	8002fe8 <HAL_GetTick>
 8007458:	0003      	movs	r3, r0
 800745a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2208      	movs	r2, #8
 8007464:	4013      	ands	r3, r2
 8007466:	2b08      	cmp	r3, #8
 8007468:	d12c      	bne.n	80074c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746c:	2280      	movs	r2, #128	@ 0x80
 800746e:	0391      	lsls	r1, r2, #14
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4a46      	ldr	r2, [pc, #280]	@ (800758c <UART_CheckIdleState+0x148>)
 8007474:	9200      	str	r2, [sp, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	f000 f88c 	bl	8007594 <UART_WaitOnFlagUntilTimeout>
 800747c:	1e03      	subs	r3, r0, #0
 800747e:	d021      	beq.n	80074c4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007480:	f3ef 8310 	mrs	r3, PRIMASK
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800748a:	2301      	movs	r3, #1
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	f383 8810 	msr	PRIMASK, r3
}
 8007494:	46c0      	nop			@ (mov r8, r8)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2180      	movs	r1, #128	@ 0x80
 80074a2:	438a      	bics	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	f383 8810 	msr	PRIMASK, r3
}
 80074b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2278      	movs	r2, #120	@ 0x78
 80074bc:	2100      	movs	r1, #0
 80074be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e05f      	b.n	8007584 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2204      	movs	r2, #4
 80074cc:	4013      	ands	r3, r2
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d146      	bne.n	8007560 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	03d1      	lsls	r1, r2, #15
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4a2c      	ldr	r2, [pc, #176]	@ (800758c <UART_CheckIdleState+0x148>)
 80074dc:	9200      	str	r2, [sp, #0]
 80074de:	2200      	movs	r2, #0
 80074e0:	f000 f858 	bl	8007594 <UART_WaitOnFlagUntilTimeout>
 80074e4:	1e03      	subs	r3, r0, #0
 80074e6:	d03b      	beq.n	8007560 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e8:	f3ef 8310 	mrs	r3, PRIMASK
 80074ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f2:	2301      	movs	r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f383 8810 	msr	PRIMASK, r3
}
 80074fc:	46c0      	nop			@ (mov r8, r8)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4921      	ldr	r1, [pc, #132]	@ (8007590 <UART_CheckIdleState+0x14c>)
 800750a:	400a      	ands	r2, r1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751a:	f3ef 8310 	mrs	r3, PRIMASK
 800751e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007520:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
 8007524:	2301      	movs	r3, #1
 8007526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			@ (mov r8, r8)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2101      	movs	r1, #1
 800753c:	438a      	bics	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2280      	movs	r2, #128	@ 0x80
 8007550:	2120      	movs	r1, #32
 8007552:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2278      	movs	r2, #120	@ 0x78
 8007558:	2100      	movs	r1, #0
 800755a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e011      	b.n	8007584 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2280      	movs	r2, #128	@ 0x80
 800756a:	2120      	movs	r1, #32
 800756c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2278      	movs	r2, #120	@ 0x78
 800757e:	2100      	movs	r1, #0
 8007580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	0018      	movs	r0, r3
 8007586:	46bd      	mov	sp, r7
 8007588:	b010      	add	sp, #64	@ 0x40
 800758a:	bd80      	pop	{r7, pc}
 800758c:	01ffffff 	.word	0x01ffffff
 8007590:	fffffedf 	.word	0xfffffedf

08007594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	1dfb      	adds	r3, r7, #7
 80075a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a4:	e051      	b.n	800764a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	3301      	adds	r3, #1
 80075aa:	d04e      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ac:	f7fb fd1c 	bl	8002fe8 <HAL_GetTick>
 80075b0:	0002      	movs	r2, r0
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d302      	bcc.n	80075c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e051      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2204      	movs	r2, #4
 80075ce:	4013      	ands	r3, r2
 80075d0:	d03b      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb6>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b80      	cmp	r3, #128	@ 0x80
 80075d6:	d038      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb6>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d035      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	2208      	movs	r2, #8
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d111      	bne.n	8007610 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2208      	movs	r2, #8
 80075f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	0018      	movs	r0, r3
 80075f8:	f000 f900 	bl	80077fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2284      	movs	r2, #132	@ 0x84
 8007600:	2108      	movs	r1, #8
 8007602:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2278      	movs	r2, #120	@ 0x78
 8007608:	2100      	movs	r1, #0
 800760a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e02c      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	2380      	movs	r3, #128	@ 0x80
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	401a      	ands	r2, r3
 800761c:	2380      	movs	r3, #128	@ 0x80
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	429a      	cmp	r2, r3
 8007622:	d112      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2280      	movs	r2, #128	@ 0x80
 800762a:	0112      	lsls	r2, r2, #4
 800762c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	0018      	movs	r0, r3
 8007632:	f000 f8e3 	bl	80077fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2284      	movs	r2, #132	@ 0x84
 800763a:	2120      	movs	r1, #32
 800763c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2278      	movs	r2, #120	@ 0x78
 8007642:	2100      	movs	r1, #0
 8007644:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e00f      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	425a      	negs	r2, r3
 800765a:	4153      	adcs	r3, r2
 800765c:	b2db      	uxtb	r3, r3
 800765e:	001a      	movs	r2, r3
 8007660:	1dfb      	adds	r3, r7, #7
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d09e      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	0018      	movs	r0, r3
 800766c:	46bd      	mov	sp, r7
 800766e:	b004      	add	sp, #16
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b090      	sub	sp, #64	@ 0x40
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	1dbb      	adds	r3, r7, #6
 8007680:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	1dba      	adds	r2, r7, #6
 800768c:	2158      	movs	r1, #88	@ 0x58
 800768e:	8812      	ldrh	r2, [r2, #0]
 8007690:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2284      	movs	r2, #132	@ 0x84
 8007696:	2100      	movs	r1, #0
 8007698:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2280      	movs	r2, #128	@ 0x80
 800769e:	2122      	movs	r1, #34	@ 0x22
 80076a0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d028      	beq.n	80076fc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ae:	4a3e      	ldr	r2, [pc, #248]	@ (80077a8 <UART_Start_Receive_DMA+0x134>)
 80076b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b6:	4a3d      	ldr	r2, [pc, #244]	@ (80077ac <UART_Start_Receive_DMA+0x138>)
 80076b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076be:	4a3c      	ldr	r2, [pc, #240]	@ (80077b0 <UART_Start_Receive_DMA+0x13c>)
 80076c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c6:	2200      	movs	r2, #0
 80076c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3324      	adds	r3, #36	@ 0x24
 80076d4:	0019      	movs	r1, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	001a      	movs	r2, r3
 80076dc:	1dbb      	adds	r3, r7, #6
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	f7fc fb7e 	bl	8003de0 <HAL_DMA_Start_IT>
 80076e4:	1e03      	subs	r3, r0, #0
 80076e6:	d009      	beq.n	80076fc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2284      	movs	r2, #132	@ 0x84
 80076ec:	2110      	movs	r1, #16
 80076ee:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2280      	movs	r2, #128	@ 0x80
 80076f4:	2120      	movs	r1, #32
 80076f6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e050      	b.n	800779e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d019      	beq.n	8007738 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007704:	f3ef 8310 	mrs	r3, PRIMASK
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800770e:	2301      	movs	r3, #1
 8007710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2180      	movs	r1, #128	@ 0x80
 8007726:	0049      	lsls	r1, r1, #1
 8007728:	430a      	orrs	r2, r1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	f383 8810 	msr	PRIMASK, r3
}
 8007736:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	613b      	str	r3, [r7, #16]
  return(result);
 800773e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007742:	2301      	movs	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			@ (mov r8, r8)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2101      	movs	r1, #1
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f383 8810 	msr	PRIMASK, r3
}
 8007768:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776a:	f3ef 8310 	mrs	r3, PRIMASK
 800776e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007770:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
 8007774:	2301      	movs	r3, #1
 8007776:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f383 8810 	msr	PRIMASK, r3
}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2140      	movs	r1, #64	@ 0x40
 800778c:	430a      	orrs	r2, r1
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	0018      	movs	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b010      	add	sp, #64	@ 0x40
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			@ (mov r8, r8)
 80077a8:	08007979 	.word	0x08007979
 80077ac:	08007aa5 	.word	0x08007aa5
 80077b0:	08007ae7 	.word	0x08007ae7

080077b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077bc:	f3ef 8310 	mrs	r3, PRIMASK
 80077c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80077c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	2301      	movs	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	46c0      	nop			@ (mov r8, r8)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	21c0      	movs	r1, #192	@ 0xc0
 80077de:	438a      	bics	r2, r1
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f383 8810 	msr	PRIMASK, r3
}
 80077ec:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80077f4:	46c0      	nop			@ (mov r8, r8)
 80077f6:	46bd      	mov	sp, r7
 80077f8:	b006      	add	sp, #24
 80077fa:	bd80      	pop	{r7, pc}

080077fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08e      	sub	sp, #56	@ 0x38
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007804:	f3ef 8310 	mrs	r3, PRIMASK
 8007808:	617b      	str	r3, [r7, #20]
  return(result);
 800780a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
 800780e:	2301      	movs	r3, #1
 8007810:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	f383 8810 	msr	PRIMASK, r3
}
 8007818:	46c0      	nop			@ (mov r8, r8)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4926      	ldr	r1, [pc, #152]	@ (80078c0 <UART_EndRxTransfer+0xc4>)
 8007826:	400a      	ands	r2, r1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f383 8810 	msr	PRIMASK, r3
}
 8007834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007836:	f3ef 8310 	mrs	r3, PRIMASK
 800783a:	623b      	str	r3, [r7, #32]
  return(result);
 800783c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007840:	2301      	movs	r3, #1
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	f383 8810 	msr	PRIMASK, r3
}
 800784a:	46c0      	nop			@ (mov r8, r8)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2101      	movs	r1, #1
 8007858:	438a      	bics	r2, r1
 800785a:	609a      	str	r2, [r3, #8]
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	f383 8810 	msr	PRIMASK, r3
}
 8007866:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800786c:	2b01      	cmp	r3, #1
 800786e:	d118      	bne.n	80078a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007870:	f3ef 8310 	mrs	r3, PRIMASK
 8007874:	60bb      	str	r3, [r7, #8]
  return(result);
 8007876:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800787a:	2301      	movs	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f383 8810 	msr	PRIMASK, r3
}
 8007884:	46c0      	nop			@ (mov r8, r8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2110      	movs	r1, #16
 8007892:	438a      	bics	r2, r1
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f383 8810 	msr	PRIMASK, r3
}
 80078a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2280      	movs	r2, #128	@ 0x80
 80078a6:	2120      	movs	r1, #32
 80078a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80078b6:	46c0      	nop			@ (mov r8, r8)
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b00e      	add	sp, #56	@ 0x38
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	46c0      	nop			@ (mov r8, r8)
 80078c0:	fffffedf 	.word	0xfffffedf

080078c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08c      	sub	sp, #48	@ 0x30
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d035      	beq.n	8007946 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	2252      	movs	r2, #82	@ 0x52
 80078de:	2100      	movs	r1, #0
 80078e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80078e8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078ec:	2301      	movs	r3, #1
 80078ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f383 8810 	msr	PRIMASK, r3
}
 80078f6:	46c0      	nop			@ (mov r8, r8)
 80078f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2180      	movs	r1, #128	@ 0x80
 8007904:	438a      	bics	r2, r1
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f383 8810 	msr	PRIMASK, r3
}
 8007912:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007914:	f3ef 8310 	mrs	r3, PRIMASK
 8007918:	61bb      	str	r3, [r7, #24]
  return(result);
 800791a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
 800791e:	2301      	movs	r3, #1
 8007920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f383 8810 	msr	PRIMASK, r3
}
 8007928:	46c0      	nop			@ (mov r8, r8)
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2140      	movs	r1, #64	@ 0x40
 8007936:	430a      	orrs	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f383 8810 	msr	PRIMASK, r3
}
 8007944:	e004      	b.n	8007950 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	0018      	movs	r0, r3
 800794a:	f7f9 f941 	bl	8000bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	46c0      	nop			@ (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	b00c      	add	sp, #48	@ 0x30
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007964:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	0018      	movs	r0, r3
 800796a:	f7ff fb63 	bl	8007034 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800796e:	46c0      	nop			@ (mov r8, r8)
 8007970:	46bd      	mov	sp, r7
 8007972:	b004      	add	sp, #16
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b094      	sub	sp, #80	@ 0x50
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b20      	cmp	r3, #32
 800798c:	d06f      	beq.n	8007a6e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800798e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007990:	225a      	movs	r2, #90	@ 0x5a
 8007992:	2100      	movs	r1, #0
 8007994:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007996:	f3ef 8310 	mrs	r3, PRIMASK
 800799a:	61bb      	str	r3, [r7, #24]
  return(result);
 800799c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800799e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a0:	2301      	movs	r3, #1
 80079a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f383 8810 	msr	PRIMASK, r3
}
 80079aa:	46c0      	nop			@ (mov r8, r8)
 80079ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	493a      	ldr	r1, [pc, #232]	@ (8007aa0 <UART_DMAReceiveCplt+0x128>)
 80079b8:	400a      	ands	r2, r1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	f383 8810 	msr	PRIMASK, r3
}
 80079c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c8:	f3ef 8310 	mrs	r3, PRIMASK
 80079cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079d2:	2301      	movs	r3, #1
 80079d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	f383 8810 	msr	PRIMASK, r3
}
 80079dc:	46c0      	nop			@ (mov r8, r8)
 80079de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2101      	movs	r1, #1
 80079ea:	438a      	bics	r2, r1
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f4:	f383 8810 	msr	PRIMASK, r3
}
 80079f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fa:	f3ef 8310 	mrs	r3, PRIMASK
 80079fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a04:	2301      	movs	r3, #1
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	f383 8810 	msr	PRIMASK, r3
}
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2140      	movs	r1, #64	@ 0x40
 8007a1c:	438a      	bics	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
 8007a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a26:	f383 8810 	msr	PRIMASK, r3
}
 8007a2a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a2e:	2280      	movs	r2, #128	@ 0x80
 8007a30:	2120      	movs	r1, #32
 8007a32:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d118      	bne.n	8007a6e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a42:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a46:	2301      	movs	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f383 8810 	msr	PRIMASK, r3
}
 8007a50:	46c0      	nop			@ (mov r8, r8)
 8007a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	438a      	bics	r2, r1
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f383 8810 	msr	PRIMASK, r3
}
 8007a6c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a70:	2200      	movs	r2, #0
 8007a72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d108      	bne.n	8007a8e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7e:	2258      	movs	r2, #88	@ 0x58
 8007a80:	5a9a      	ldrh	r2, [r3, r2]
 8007a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a84:	0011      	movs	r1, r2
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7ff faf4 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a8c:	e003      	b.n	8007a96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7ff fad7 	bl	8007044 <HAL_UART_RxCpltCallback>
}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b014      	add	sp, #80	@ 0x50
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	fffffeff 	.word	0xfffffeff

08007aa4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d10a      	bne.n	8007ad6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2258      	movs	r2, #88	@ 0x58
 8007ac4:	5a9b      	ldrh	r3, [r3, r2]
 8007ac6:	085b      	lsrs	r3, r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	0011      	movs	r1, r2
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7ff fad0 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ad4:	e003      	b.n	8007ade <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f7ff fabb 	bl	8007054 <HAL_UART_RxHalfCpltCallback>
}
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b004      	add	sp, #16
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007af8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2280      	movs	r2, #128	@ 0x80
 8007afe:	589b      	ldr	r3, [r3, r2]
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2280      	movs	r2, #128	@ 0x80
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b80      	cmp	r3, #128	@ 0x80
 8007b0e:	d10a      	bne.n	8007b26 <UART_DMAError+0x40>
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2b21      	cmp	r3, #33	@ 0x21
 8007b14:	d107      	bne.n	8007b26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2252      	movs	r2, #82	@ 0x52
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	0018      	movs	r0, r3
 8007b22:	f7ff fe47 	bl	80077b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2240      	movs	r2, #64	@ 0x40
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b40      	cmp	r3, #64	@ 0x40
 8007b32:	d10a      	bne.n	8007b4a <UART_DMAError+0x64>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b22      	cmp	r3, #34	@ 0x22
 8007b38:	d107      	bne.n	8007b4a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	225a      	movs	r2, #90	@ 0x5a
 8007b3e:	2100      	movs	r1, #0
 8007b40:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7ff fe59 	bl	80077fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2284      	movs	r2, #132	@ 0x84
 8007b4e:	589b      	ldr	r3, [r3, r2]
 8007b50:	2210      	movs	r2, #16
 8007b52:	431a      	orrs	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2184      	movs	r1, #132	@ 0x84
 8007b58:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f7ff fa81 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b62:	46c0      	nop			@ (mov r8, r8)
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b006      	add	sp, #24
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	225a      	movs	r2, #90	@ 0x5a
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2252      	movs	r2, #82	@ 0x52
 8007b84:	2100      	movs	r1, #0
 8007b86:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7ff fa6a 	bl	8007064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b90:	46c0      	nop			@ (mov r8, r8)
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b004      	add	sp, #16
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	2301      	movs	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f383 8810 	msr	PRIMASK, r3
}
 8007bb4:	46c0      	nop			@ (mov r8, r8)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2140      	movs	r1, #64	@ 0x40
 8007bc2:	438a      	bics	r2, r1
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f383 8810 	msr	PRIMASK, r3
}
 8007bd0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0018      	movs	r0, r3
 8007be2:	f7f8 fff5 	bl	8000bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be6:	46c0      	nop			@ (mov r8, r8)
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b006      	add	sp, #24
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b002      	add	sp, #8
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <memset>:
 8007bfe:	0003      	movs	r3, r0
 8007c00:	1882      	adds	r2, r0, r2
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d100      	bne.n	8007c08 <memset+0xa>
 8007c06:	4770      	bx	lr
 8007c08:	7019      	strb	r1, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	e7f9      	b.n	8007c02 <memset+0x4>
	...

08007c10 <__libc_init_array>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	2600      	movs	r6, #0
 8007c14:	4c0c      	ldr	r4, [pc, #48]	@ (8007c48 <__libc_init_array+0x38>)
 8007c16:	4d0d      	ldr	r5, [pc, #52]	@ (8007c4c <__libc_init_array+0x3c>)
 8007c18:	1b64      	subs	r4, r4, r5
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	42a6      	cmp	r6, r4
 8007c1e:	d109      	bne.n	8007c34 <__libc_init_array+0x24>
 8007c20:	2600      	movs	r6, #0
 8007c22:	f000 f823 	bl	8007c6c <_init>
 8007c26:	4c0a      	ldr	r4, [pc, #40]	@ (8007c50 <__libc_init_array+0x40>)
 8007c28:	4d0a      	ldr	r5, [pc, #40]	@ (8007c54 <__libc_init_array+0x44>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	42a6      	cmp	r6, r4
 8007c30:	d105      	bne.n	8007c3e <__libc_init_array+0x2e>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	00b3      	lsls	r3, r6, #2
 8007c36:	58eb      	ldr	r3, [r5, r3]
 8007c38:	4798      	blx	r3
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e7ee      	b.n	8007c1c <__libc_init_array+0xc>
 8007c3e:	00b3      	lsls	r3, r6, #2
 8007c40:	58eb      	ldr	r3, [r5, r3]
 8007c42:	4798      	blx	r3
 8007c44:	3601      	adds	r6, #1
 8007c46:	e7f2      	b.n	8007c2e <__libc_init_array+0x1e>
 8007c48:	08007d40 	.word	0x08007d40
 8007c4c:	08007d40 	.word	0x08007d40
 8007c50:	08007d44 	.word	0x08007d44
 8007c54:	08007d40 	.word	0x08007d40

08007c58 <memcpy>:
 8007c58:	2300      	movs	r3, #0
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d100      	bne.n	8007c62 <memcpy+0xa>
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	5ccc      	ldrb	r4, [r1, r3]
 8007c64:	54c4      	strb	r4, [r0, r3]
 8007c66:	3301      	adds	r3, #1
 8007c68:	e7f8      	b.n	8007c5c <memcpy+0x4>
	...

08007c6c <_init>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	46c0      	nop			@ (mov r8, r8)
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr

08007c78 <_fini>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr

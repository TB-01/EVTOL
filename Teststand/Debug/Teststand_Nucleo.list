
Teststand_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c48  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d40  08007d40  0000901c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d48  08007d48  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007d50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  2000001c  08007d6c  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08007d6c  00009718  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f57  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363c  00000000  00000000  0001df9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000215d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec5  00000000  00000000  00022870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001292e  00000000  00000000  00023735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a0c  00000000  00000000  00036063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b3a4  00000000  00000000  0004fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bae13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  000bae58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000bf124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007cf0 	.word	0x08007cf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08007cf0 	.word	0x08007cf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d113      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000228:	2900      	cmp	r1, #0
 800022a:	db06      	blt.n	800023a <__aeabi_ldivmod+0x1a>
 800022c:	dc01      	bgt.n	8000232 <__aeabi_ldivmod+0x12>
 800022e:	2800      	cmp	r0, #0
 8000230:	d006      	beq.n	8000240 <__aeabi_ldivmod+0x20>
 8000232:	2000      	movs	r0, #0
 8000234:	43c0      	mvns	r0, r0
 8000236:	0841      	lsrs	r1, r0, #1
 8000238:	e002      	b.n	8000240 <__aeabi_ldivmod+0x20>
 800023a:	2180      	movs	r1, #128	@ 0x80
 800023c:	0609      	lsls	r1, r1, #24
 800023e:	2000      	movs	r0, #0
 8000240:	b407      	push	{r0, r1, r2}
 8000242:	4802      	ldr	r0, [pc, #8]	@ (800024c <__aeabi_ldivmod+0x2c>)
 8000244:	a101      	add	r1, pc, #4	@ (adr r1, 800024c <__aeabi_ldivmod+0x2c>)
 8000246:	1840      	adds	r0, r0, r1
 8000248:	9002      	str	r0, [sp, #8]
 800024a:	bd03      	pop	{r0, r1, pc}
 800024c:	ffffffd1 	.word	0xffffffd1
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f920 	bl	800049c <__gnu_ldivmod_helper>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			@ (mov r8, r8)

08000268 <__aeabi_uldivmod>:
 8000268:	2b00      	cmp	r3, #0
 800026a:	d111      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 800026c:	2a00      	cmp	r2, #0
 800026e:	d10f      	bne.n	8000290 <__aeabi_uldivmod+0x28>
 8000270:	2900      	cmp	r1, #0
 8000272:	d100      	bne.n	8000276 <__aeabi_uldivmod+0xe>
 8000274:	2800      	cmp	r0, #0
 8000276:	d002      	beq.n	800027e <__aeabi_uldivmod+0x16>
 8000278:	2100      	movs	r1, #0
 800027a:	43c9      	mvns	r1, r1
 800027c:	0008      	movs	r0, r1
 800027e:	b407      	push	{r0, r1, r2}
 8000280:	4802      	ldr	r0, [pc, #8]	@ (800028c <__aeabi_uldivmod+0x24>)
 8000282:	a102      	add	r1, pc, #8	@ (adr r1, 800028c <__aeabi_uldivmod+0x24>)
 8000284:	1840      	adds	r0, r0, r1
 8000286:	9002      	str	r0, [sp, #8]
 8000288:	bd03      	pop	{r0, r1, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	ffffff91 	.word	0xffffff91
 8000290:	b403      	push	{r0, r1}
 8000292:	4668      	mov	r0, sp
 8000294:	b501      	push	{r0, lr}
 8000296:	9802      	ldr	r0, [sp, #8]
 8000298:	f000 f834 	bl	8000304 <__udivmoddi4>
 800029c:	9b01      	ldr	r3, [sp, #4]
 800029e:	469e      	mov	lr, r3
 80002a0:	b002      	add	sp, #8
 80002a2:	bc0c      	pop	{r2, r3}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			@ (mov r8, r8)

080002a8 <__aeabi_lmul>:
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	46ce      	mov	lr, r9
 80002ac:	4699      	mov	r9, r3
 80002ae:	0c03      	lsrs	r3, r0, #16
 80002b0:	469c      	mov	ip, r3
 80002b2:	0413      	lsls	r3, r2, #16
 80002b4:	4647      	mov	r7, r8
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	001d      	movs	r5, r3
 80002ba:	000e      	movs	r6, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	0404      	lsls	r4, r0, #16
 80002c0:	0c24      	lsrs	r4, r4, #16
 80002c2:	b580      	push	{r7, lr}
 80002c4:	0007      	movs	r7, r0
 80002c6:	0c10      	lsrs	r0, r2, #16
 80002c8:	434b      	muls	r3, r1
 80002ca:	4365      	muls	r5, r4
 80002cc:	4341      	muls	r1, r0
 80002ce:	4360      	muls	r0, r4
 80002d0:	0c2c      	lsrs	r4, r5, #16
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	1824      	adds	r4, r4, r0
 80002d6:	468c      	mov	ip, r1
 80002d8:	42a3      	cmp	r3, r4
 80002da:	d903      	bls.n	80002e4 <__aeabi_lmul+0x3c>
 80002dc:	2380      	movs	r3, #128	@ 0x80
 80002de:	025b      	lsls	r3, r3, #9
 80002e0:	4698      	mov	r8, r3
 80002e2:	44c4      	add	ip, r8
 80002e4:	4649      	mov	r1, r9
 80002e6:	4379      	muls	r1, r7
 80002e8:	4356      	muls	r6, r2
 80002ea:	0c23      	lsrs	r3, r4, #16
 80002ec:	042d      	lsls	r5, r5, #16
 80002ee:	0c2d      	lsrs	r5, r5, #16
 80002f0:	1989      	adds	r1, r1, r6
 80002f2:	4463      	add	r3, ip
 80002f4:	0424      	lsls	r4, r4, #16
 80002f6:	1960      	adds	r0, r4, r5
 80002f8:	18c9      	adds	r1, r1, r3
 80002fa:	bcc0      	pop	{r6, r7}
 80002fc:	46b9      	mov	r9, r7
 80002fe:	46b0      	mov	r8, r6
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	46c0      	nop			@ (mov r8, r8)

08000304 <__udivmoddi4>:
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	4657      	mov	r7, sl
 8000308:	464e      	mov	r6, r9
 800030a:	4645      	mov	r5, r8
 800030c:	46de      	mov	lr, fp
 800030e:	b5e0      	push	{r5, r6, r7, lr}
 8000310:	0004      	movs	r4, r0
 8000312:	000d      	movs	r5, r1
 8000314:	4692      	mov	sl, r2
 8000316:	4699      	mov	r9, r3
 8000318:	b083      	sub	sp, #12
 800031a:	428b      	cmp	r3, r1
 800031c:	d830      	bhi.n	8000380 <__udivmoddi4+0x7c>
 800031e:	d02d      	beq.n	800037c <__udivmoddi4+0x78>
 8000320:	4649      	mov	r1, r9
 8000322:	4650      	mov	r0, sl
 8000324:	f000 f8d8 	bl	80004d8 <__clzdi2>
 8000328:	0029      	movs	r1, r5
 800032a:	0006      	movs	r6, r0
 800032c:	0020      	movs	r0, r4
 800032e:	f000 f8d3 	bl	80004d8 <__clzdi2>
 8000332:	1a33      	subs	r3, r6, r0
 8000334:	4698      	mov	r8, r3
 8000336:	3b20      	subs	r3, #32
 8000338:	d434      	bmi.n	80003a4 <__udivmoddi4+0xa0>
 800033a:	469b      	mov	fp, r3
 800033c:	4653      	mov	r3, sl
 800033e:	465a      	mov	r2, fp
 8000340:	4093      	lsls	r3, r2
 8000342:	4642      	mov	r2, r8
 8000344:	001f      	movs	r7, r3
 8000346:	4653      	mov	r3, sl
 8000348:	4093      	lsls	r3, r2
 800034a:	001e      	movs	r6, r3
 800034c:	42af      	cmp	r7, r5
 800034e:	d83b      	bhi.n	80003c8 <__udivmoddi4+0xc4>
 8000350:	42af      	cmp	r7, r5
 8000352:	d100      	bne.n	8000356 <__udivmoddi4+0x52>
 8000354:	e079      	b.n	800044a <__udivmoddi4+0x146>
 8000356:	465b      	mov	r3, fp
 8000358:	1ba4      	subs	r4, r4, r6
 800035a:	41bd      	sbcs	r5, r7
 800035c:	2b00      	cmp	r3, #0
 800035e:	da00      	bge.n	8000362 <__udivmoddi4+0x5e>
 8000360:	e076      	b.n	8000450 <__udivmoddi4+0x14c>
 8000362:	2200      	movs	r2, #0
 8000364:	2300      	movs	r3, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	2301      	movs	r3, #1
 800036c:	465a      	mov	r2, fp
 800036e:	4093      	lsls	r3, r2
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	4642      	mov	r2, r8
 8000376:	4093      	lsls	r3, r2
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	e029      	b.n	80003d0 <__udivmoddi4+0xcc>
 800037c:	4282      	cmp	r2, r0
 800037e:	d9cf      	bls.n	8000320 <__udivmoddi4+0x1c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <__udivmoddi4+0x8e>
 800038e:	601c      	str	r4, [r3, #0]
 8000390:	605d      	str	r5, [r3, #4]
 8000392:	9800      	ldr	r0, [sp, #0]
 8000394:	9901      	ldr	r1, [sp, #4]
 8000396:	b003      	add	sp, #12
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	46bb      	mov	fp, r7
 800039c:	46b2      	mov	sl, r6
 800039e:	46a9      	mov	r9, r5
 80003a0:	46a0      	mov	r8, r4
 80003a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a4:	4642      	mov	r2, r8
 80003a6:	469b      	mov	fp, r3
 80003a8:	2320      	movs	r3, #32
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	4652      	mov	r2, sl
 80003ae:	40da      	lsrs	r2, r3
 80003b0:	4641      	mov	r1, r8
 80003b2:	0013      	movs	r3, r2
 80003b4:	464a      	mov	r2, r9
 80003b6:	408a      	lsls	r2, r1
 80003b8:	0017      	movs	r7, r2
 80003ba:	4642      	mov	r2, r8
 80003bc:	431f      	orrs	r7, r3
 80003be:	4653      	mov	r3, sl
 80003c0:	4093      	lsls	r3, r2
 80003c2:	001e      	movs	r6, r3
 80003c4:	42af      	cmp	r7, r5
 80003c6:	d9c3      	bls.n	8000350 <__udivmoddi4+0x4c>
 80003c8:	2200      	movs	r2, #0
 80003ca:	2300      	movs	r3, #0
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0d8      	beq.n	8000388 <__udivmoddi4+0x84>
 80003d6:	07fb      	lsls	r3, r7, #31
 80003d8:	0872      	lsrs	r2, r6, #1
 80003da:	431a      	orrs	r2, r3
 80003dc:	4646      	mov	r6, r8
 80003de:	087b      	lsrs	r3, r7, #1
 80003e0:	e00e      	b.n	8000400 <__udivmoddi4+0xfc>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d101      	bne.n	80003ea <__udivmoddi4+0xe6>
 80003e6:	42a2      	cmp	r2, r4
 80003e8:	d80c      	bhi.n	8000404 <__udivmoddi4+0x100>
 80003ea:	1aa4      	subs	r4, r4, r2
 80003ec:	419d      	sbcs	r5, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	1924      	adds	r4, r4, r4
 80003f2:	416d      	adcs	r5, r5
 80003f4:	2100      	movs	r1, #0
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1824      	adds	r4, r4, r0
 80003fa:	414d      	adcs	r5, r1
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d006      	beq.n	800040e <__udivmoddi4+0x10a>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d9ee      	bls.n	80003e2 <__udivmoddi4+0xde>
 8000404:	3e01      	subs	r6, #1
 8000406:	1924      	adds	r4, r4, r4
 8000408:	416d      	adcs	r5, r5
 800040a:	2e00      	cmp	r6, #0
 800040c:	d1f8      	bne.n	8000400 <__udivmoddi4+0xfc>
 800040e:	9800      	ldr	r0, [sp, #0]
 8000410:	9901      	ldr	r1, [sp, #4]
 8000412:	465b      	mov	r3, fp
 8000414:	1900      	adds	r0, r0, r4
 8000416:	4169      	adcs	r1, r5
 8000418:	2b00      	cmp	r3, #0
 800041a:	db24      	blt.n	8000466 <__udivmoddi4+0x162>
 800041c:	002b      	movs	r3, r5
 800041e:	465a      	mov	r2, fp
 8000420:	4644      	mov	r4, r8
 8000422:	40d3      	lsrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	db2a      	blt.n	8000488 <__udivmoddi4+0x184>
 8000432:	0026      	movs	r6, r4
 8000434:	409e      	lsls	r6, r3
 8000436:	0033      	movs	r3, r6
 8000438:	0026      	movs	r6, r4
 800043a:	4647      	mov	r7, r8
 800043c:	40be      	lsls	r6, r7
 800043e:	0032      	movs	r2, r6
 8000440:	1a80      	subs	r0, r0, r2
 8000442:	4199      	sbcs	r1, r3
 8000444:	9000      	str	r0, [sp, #0]
 8000446:	9101      	str	r1, [sp, #4]
 8000448:	e79e      	b.n	8000388 <__udivmoddi4+0x84>
 800044a:	42a3      	cmp	r3, r4
 800044c:	d8bc      	bhi.n	80003c8 <__udivmoddi4+0xc4>
 800044e:	e782      	b.n	8000356 <__udivmoddi4+0x52>
 8000450:	4642      	mov	r2, r8
 8000452:	2320      	movs	r3, #32
 8000454:	2100      	movs	r1, #0
 8000456:	1a9b      	subs	r3, r3, r2
 8000458:	2200      	movs	r2, #0
 800045a:	9100      	str	r1, [sp, #0]
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	2201      	movs	r2, #1
 8000460:	40da      	lsrs	r2, r3
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	e785      	b.n	8000372 <__udivmoddi4+0x6e>
 8000466:	4642      	mov	r2, r8
 8000468:	2320      	movs	r3, #32
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	4646      	mov	r6, r8
 8000470:	409a      	lsls	r2, r3
 8000472:	0023      	movs	r3, r4
 8000474:	40f3      	lsrs	r3, r6
 8000476:	4644      	mov	r4, r8
 8000478:	4313      	orrs	r3, r2
 800047a:	002a      	movs	r2, r5
 800047c:	40e2      	lsrs	r2, r4
 800047e:	001c      	movs	r4, r3
 8000480:	465b      	mov	r3, fp
 8000482:	0015      	movs	r5, r2
 8000484:	2b00      	cmp	r3, #0
 8000486:	dad4      	bge.n	8000432 <__udivmoddi4+0x12e>
 8000488:	4642      	mov	r2, r8
 800048a:	002f      	movs	r7, r5
 800048c:	2320      	movs	r3, #32
 800048e:	0026      	movs	r6, r4
 8000490:	4097      	lsls	r7, r2
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	40de      	lsrs	r6, r3
 8000496:	003b      	movs	r3, r7
 8000498:	4333      	orrs	r3, r6
 800049a:	e7cd      	b.n	8000438 <__udivmoddi4+0x134>

0800049c <__gnu_ldivmod_helper>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	b580      	push	{r7, lr}
 80004a4:	4691      	mov	r9, r2
 80004a6:	4698      	mov	r8, r3
 80004a8:	0004      	movs	r4, r0
 80004aa:	000d      	movs	r5, r1
 80004ac:	f000 f820 	bl	80004f0 <__divdi3>
 80004b0:	0007      	movs	r7, r0
 80004b2:	000e      	movs	r6, r1
 80004b4:	0002      	movs	r2, r0
 80004b6:	000b      	movs	r3, r1
 80004b8:	4648      	mov	r0, r9
 80004ba:	4641      	mov	r1, r8
 80004bc:	f7ff fef4 	bl	80002a8 <__aeabi_lmul>
 80004c0:	1a24      	subs	r4, r4, r0
 80004c2:	418d      	sbcs	r5, r1
 80004c4:	9b08      	ldr	r3, [sp, #32]
 80004c6:	0038      	movs	r0, r7
 80004c8:	0031      	movs	r1, r6
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	bcc0      	pop	{r6, r7}
 80004d0:	46b9      	mov	r9, r7
 80004d2:	46b0      	mov	r8, r6
 80004d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__clzdi2>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	2900      	cmp	r1, #0
 80004dc:	d103      	bne.n	80004e6 <__clzdi2+0xe>
 80004de:	f000 f8f3 	bl	80006c8 <__clzsi2>
 80004e2:	3020      	adds	r0, #32
 80004e4:	e002      	b.n	80004ec <__clzdi2+0x14>
 80004e6:	0008      	movs	r0, r1
 80004e8:	f000 f8ee 	bl	80006c8 <__clzsi2>
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__divdi3>:
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	464f      	mov	r7, r9
 80004f4:	4646      	mov	r6, r8
 80004f6:	46d6      	mov	lr, sl
 80004f8:	b5c0      	push	{r6, r7, lr}
 80004fa:	0006      	movs	r6, r0
 80004fc:	000f      	movs	r7, r1
 80004fe:	0010      	movs	r0, r2
 8000500:	0019      	movs	r1, r3
 8000502:	b082      	sub	sp, #8
 8000504:	2f00      	cmp	r7, #0
 8000506:	db5d      	blt.n	80005c4 <__divdi3+0xd4>
 8000508:	0034      	movs	r4, r6
 800050a:	003d      	movs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	db0b      	blt.n	8000528 <__divdi3+0x38>
 8000510:	0016      	movs	r6, r2
 8000512:	001f      	movs	r7, r3
 8000514:	42ab      	cmp	r3, r5
 8000516:	d917      	bls.n	8000548 <__divdi3+0x58>
 8000518:	2000      	movs	r0, #0
 800051a:	2100      	movs	r1, #0
 800051c:	b002      	add	sp, #8
 800051e:	bce0      	pop	{r5, r6, r7}
 8000520:	46ba      	mov	sl, r7
 8000522:	46b1      	mov	r9, r6
 8000524:	46a8      	mov	r8, r5
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	2700      	movs	r7, #0
 800052a:	4246      	negs	r6, r0
 800052c:	418f      	sbcs	r7, r1
 800052e:	42af      	cmp	r7, r5
 8000530:	d8f2      	bhi.n	8000518 <__divdi3+0x28>
 8000532:	d100      	bne.n	8000536 <__divdi3+0x46>
 8000534:	e0a0      	b.n	8000678 <__divdi3+0x188>
 8000536:	2301      	movs	r3, #1
 8000538:	425b      	negs	r3, r3
 800053a:	4699      	mov	r9, r3
 800053c:	e009      	b.n	8000552 <__divdi3+0x62>
 800053e:	2700      	movs	r7, #0
 8000540:	4246      	negs	r6, r0
 8000542:	418f      	sbcs	r7, r1
 8000544:	42af      	cmp	r7, r5
 8000546:	d8e7      	bhi.n	8000518 <__divdi3+0x28>
 8000548:	42af      	cmp	r7, r5
 800054a:	d100      	bne.n	800054e <__divdi3+0x5e>
 800054c:	e090      	b.n	8000670 <__divdi3+0x180>
 800054e:	2300      	movs	r3, #0
 8000550:	4699      	mov	r9, r3
 8000552:	0039      	movs	r1, r7
 8000554:	0030      	movs	r0, r6
 8000556:	f7ff ffbf 	bl	80004d8 <__clzdi2>
 800055a:	4680      	mov	r8, r0
 800055c:	0029      	movs	r1, r5
 800055e:	0020      	movs	r0, r4
 8000560:	f7ff ffba 	bl	80004d8 <__clzdi2>
 8000564:	4643      	mov	r3, r8
 8000566:	1a1b      	subs	r3, r3, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d475      	bmi.n	800065a <__divdi3+0x16a>
 800056e:	0031      	movs	r1, r6
 8000570:	4099      	lsls	r1, r3
 8000572:	469a      	mov	sl, r3
 8000574:	000b      	movs	r3, r1
 8000576:	0031      	movs	r1, r6
 8000578:	4640      	mov	r0, r8
 800057a:	4081      	lsls	r1, r0
 800057c:	000a      	movs	r2, r1
 800057e:	42ab      	cmp	r3, r5
 8000580:	d82e      	bhi.n	80005e0 <__divdi3+0xf0>
 8000582:	d02b      	beq.n	80005dc <__divdi3+0xec>
 8000584:	4651      	mov	r1, sl
 8000586:	1aa4      	subs	r4, r4, r2
 8000588:	419d      	sbcs	r5, r3
 800058a:	2900      	cmp	r1, #0
 800058c:	da00      	bge.n	8000590 <__divdi3+0xa0>
 800058e:	e090      	b.n	80006b2 <__divdi3+0x1c2>
 8000590:	2100      	movs	r1, #0
 8000592:	2000      	movs	r0, #0
 8000594:	2601      	movs	r6, #1
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	4651      	mov	r1, sl
 800059c:	408e      	lsls	r6, r1
 800059e:	9601      	str	r6, [sp, #4]
 80005a0:	4641      	mov	r1, r8
 80005a2:	2601      	movs	r6, #1
 80005a4:	408e      	lsls	r6, r1
 80005a6:	4641      	mov	r1, r8
 80005a8:	9600      	str	r6, [sp, #0]
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d11f      	bne.n	80005ee <__divdi3+0xfe>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	464b      	mov	r3, r9
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0b1      	beq.n	800051c <__divdi3+0x2c>
 80005b8:	0003      	movs	r3, r0
 80005ba:	000c      	movs	r4, r1
 80005bc:	2100      	movs	r1, #0
 80005be:	4258      	negs	r0, r3
 80005c0:	41a1      	sbcs	r1, r4
 80005c2:	e7ab      	b.n	800051c <__divdi3+0x2c>
 80005c4:	2500      	movs	r5, #0
 80005c6:	4274      	negs	r4, r6
 80005c8:	41bd      	sbcs	r5, r7
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dbb7      	blt.n	800053e <__divdi3+0x4e>
 80005ce:	0016      	movs	r6, r2
 80005d0:	001f      	movs	r7, r3
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d8a0      	bhi.n	8000518 <__divdi3+0x28>
 80005d6:	42af      	cmp	r7, r5
 80005d8:	d1ad      	bne.n	8000536 <__divdi3+0x46>
 80005da:	e04d      	b.n	8000678 <__divdi3+0x188>
 80005dc:	42a1      	cmp	r1, r4
 80005de:	d9d1      	bls.n	8000584 <__divdi3+0x94>
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	4641      	mov	r1, r8
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d0df      	beq.n	80005ae <__divdi3+0xbe>
 80005ee:	07d9      	lsls	r1, r3, #31
 80005f0:	0856      	lsrs	r6, r2, #1
 80005f2:	085f      	lsrs	r7, r3, #1
 80005f4:	430e      	orrs	r6, r1
 80005f6:	4643      	mov	r3, r8
 80005f8:	e00e      	b.n	8000618 <__divdi3+0x128>
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d101      	bne.n	8000602 <__divdi3+0x112>
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d80c      	bhi.n	800061c <__divdi3+0x12c>
 8000602:	1ba4      	subs	r4, r4, r6
 8000604:	41bd      	sbcs	r5, r7
 8000606:	2101      	movs	r1, #1
 8000608:	1924      	adds	r4, r4, r4
 800060a:	416d      	adcs	r5, r5
 800060c:	2200      	movs	r2, #0
 800060e:	3b01      	subs	r3, #1
 8000610:	1864      	adds	r4, r4, r1
 8000612:	4155      	adcs	r5, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d006      	beq.n	8000626 <__divdi3+0x136>
 8000618:	42af      	cmp	r7, r5
 800061a:	d9ee      	bls.n	80005fa <__divdi3+0x10a>
 800061c:	3b01      	subs	r3, #1
 800061e:	1924      	adds	r4, r4, r4
 8000620:	416d      	adcs	r5, r5
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f8      	bne.n	8000618 <__divdi3+0x128>
 8000626:	9a00      	ldr	r2, [sp, #0]
 8000628:	9b01      	ldr	r3, [sp, #4]
 800062a:	4651      	mov	r1, sl
 800062c:	1912      	adds	r2, r2, r4
 800062e:	416b      	adcs	r3, r5
 8000630:	2900      	cmp	r1, #0
 8000632:	db25      	blt.n	8000680 <__divdi3+0x190>
 8000634:	002e      	movs	r6, r5
 8000636:	002c      	movs	r4, r5
 8000638:	40ce      	lsrs	r6, r1
 800063a:	4641      	mov	r1, r8
 800063c:	40cc      	lsrs	r4, r1
 800063e:	4651      	mov	r1, sl
 8000640:	2900      	cmp	r1, #0
 8000642:	db2d      	blt.n	80006a0 <__divdi3+0x1b0>
 8000644:	0034      	movs	r4, r6
 8000646:	408c      	lsls	r4, r1
 8000648:	0021      	movs	r1, r4
 800064a:	4644      	mov	r4, r8
 800064c:	40a6      	lsls	r6, r4
 800064e:	0030      	movs	r0, r6
 8000650:	1a12      	subs	r2, r2, r0
 8000652:	418b      	sbcs	r3, r1
 8000654:	9200      	str	r2, [sp, #0]
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	e7a9      	b.n	80005ae <__divdi3+0xbe>
 800065a:	4642      	mov	r2, r8
 800065c:	0038      	movs	r0, r7
 800065e:	469a      	mov	sl, r3
 8000660:	2320      	movs	r3, #32
 8000662:	0031      	movs	r1, r6
 8000664:	4090      	lsls	r0, r2
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	40d9      	lsrs	r1, r3
 800066a:	0003      	movs	r3, r0
 800066c:	430b      	orrs	r3, r1
 800066e:	e782      	b.n	8000576 <__divdi3+0x86>
 8000670:	42a6      	cmp	r6, r4
 8000672:	d900      	bls.n	8000676 <__divdi3+0x186>
 8000674:	e750      	b.n	8000518 <__divdi3+0x28>
 8000676:	e76a      	b.n	800054e <__divdi3+0x5e>
 8000678:	42a6      	cmp	r6, r4
 800067a:	d800      	bhi.n	800067e <__divdi3+0x18e>
 800067c:	e75b      	b.n	8000536 <__divdi3+0x46>
 800067e:	e74b      	b.n	8000518 <__divdi3+0x28>
 8000680:	4640      	mov	r0, r8
 8000682:	2120      	movs	r1, #32
 8000684:	1a09      	subs	r1, r1, r0
 8000686:	0028      	movs	r0, r5
 8000688:	4088      	lsls	r0, r1
 800068a:	0026      	movs	r6, r4
 800068c:	0001      	movs	r1, r0
 800068e:	4640      	mov	r0, r8
 8000690:	40c6      	lsrs	r6, r0
 8000692:	002c      	movs	r4, r5
 8000694:	430e      	orrs	r6, r1
 8000696:	4641      	mov	r1, r8
 8000698:	40cc      	lsrs	r4, r1
 800069a:	4651      	mov	r1, sl
 800069c:	2900      	cmp	r1, #0
 800069e:	dad1      	bge.n	8000644 <__divdi3+0x154>
 80006a0:	4640      	mov	r0, r8
 80006a2:	2120      	movs	r1, #32
 80006a4:	0035      	movs	r5, r6
 80006a6:	4084      	lsls	r4, r0
 80006a8:	1a09      	subs	r1, r1, r0
 80006aa:	40cd      	lsrs	r5, r1
 80006ac:	0021      	movs	r1, r4
 80006ae:	4329      	orrs	r1, r5
 80006b0:	e7cb      	b.n	800064a <__divdi3+0x15a>
 80006b2:	4641      	mov	r1, r8
 80006b4:	2620      	movs	r6, #32
 80006b6:	2701      	movs	r7, #1
 80006b8:	1a76      	subs	r6, r6, r1
 80006ba:	2000      	movs	r0, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	40f7      	lsrs	r7, r6
 80006c0:	9000      	str	r0, [sp, #0]
 80006c2:	9101      	str	r1, [sp, #4]
 80006c4:	9701      	str	r7, [sp, #4]
 80006c6:	e76b      	b.n	80005a0 <__divdi3+0xb0>

080006c8 <__clzsi2>:
 80006c8:	211c      	movs	r1, #28
 80006ca:	2301      	movs	r3, #1
 80006cc:	041b      	lsls	r3, r3, #16
 80006ce:	4298      	cmp	r0, r3
 80006d0:	d301      	bcc.n	80006d6 <__clzsi2+0xe>
 80006d2:	0c00      	lsrs	r0, r0, #16
 80006d4:	3910      	subs	r1, #16
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	4298      	cmp	r0, r3
 80006da:	d301      	bcc.n	80006e0 <__clzsi2+0x18>
 80006dc:	0a00      	lsrs	r0, r0, #8
 80006de:	3908      	subs	r1, #8
 80006e0:	091b      	lsrs	r3, r3, #4
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d301      	bcc.n	80006ea <__clzsi2+0x22>
 80006e6:	0900      	lsrs	r0, r0, #4
 80006e8:	3904      	subs	r1, #4
 80006ea:	a202      	add	r2, pc, #8	@ (adr r2, 80006f4 <__clzsi2+0x2c>)
 80006ec:	5c10      	ldrb	r0, [r2, r0]
 80006ee:	1840      	adds	r0, r0, r1
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	02020304 	.word	0x02020304
 80006f8:	01010101 	.word	0x01010101
	...

08000704 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0018      	movs	r0, r3
 800070e:	230c      	movs	r3, #12
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f007 fab5 	bl	8007c82 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000718:	4b3f      	ldr	r3, [pc, #252]	@ (8000818 <MX_ADC_Init+0x114>)
 800071a:	4a40      	ldr	r2, [pc, #256]	@ (800081c <MX_ADC_Init+0x118>)
 800071c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800071e:	4b3e      	ldr	r3, [pc, #248]	@ (8000818 <MX_ADC_Init+0x114>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <MX_ADC_Init+0x114>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <MX_ADC_Init+0x114>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000730:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <MX_ADC_Init+0x114>)
 8000732:	2201      	movs	r2, #1
 8000734:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <MX_ADC_Init+0x114>)
 8000738:	2204      	movs	r2, #4
 800073a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800073c:	4b36      	ldr	r3, [pc, #216]	@ (8000818 <MX_ADC_Init+0x114>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_ADC_Init+0x114>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000748:	4b33      	ldr	r3, [pc, #204]	@ (8000818 <MX_ADC_Init+0x114>)
 800074a:	2201      	movs	r2, #1
 800074c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_ADC_Init+0x114>)
 8000750:	2200      	movs	r2, #0
 8000752:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <MX_ADC_Init+0x114>)
 8000756:	22c2      	movs	r2, #194	@ 0xc2
 8000758:	32ff      	adds	r2, #255	@ 0xff
 800075a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075c:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_ADC_Init+0x114>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_ADC_Init+0x114>)
 8000764:	2224      	movs	r2, #36	@ 0x24
 8000766:	2101      	movs	r1, #1
 8000768:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_ADC_Init+0x114>)
 800076c:	2201      	movs	r2, #1
 800076e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000770:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <MX_ADC_Init+0x114>)
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fc8c 	bl	8003090 <HAL_ADC_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800077c:	f002 f88c 	bl	8002898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0152      	lsls	r2, r2, #5
 800078c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2207      	movs	r2, #7
 8000792:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000794:	1d3a      	adds	r2, r7, #4
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_ADC_Init+0x114>)
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fec8 	bl	8003530 <HAL_ADC_ConfigChannel>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80007a4:	f002 f878 	bl	8002898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_ADC_Init+0x114>)
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 febb 	bl	8003530 <HAL_ADC_ConfigChannel>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80007be:	f002 f86b 	bl	8002898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2203      	movs	r2, #3
 80007c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c8:	1d3a      	adds	r2, r7, #4
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_ADC_Init+0x114>)
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 feae 	bl	8003530 <HAL_ADC_ConfigChannel>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80007d8:	f002 f85e 	bl	8002898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2204      	movs	r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_ADC_Init+0x114>)
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fea1 	bl	8003530 <HAL_ADC_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80007f2:	f002 f851 	bl	8002898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2211      	movs	r2, #17
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_ADC_Init+0x114>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f002 fe94 	bl	8003530 <HAL_ADC_ConfigChannel>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800080c:	f002 f844 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b004      	add	sp, #16
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000038 	.word	0x20000038
 800081c:	40012400 	.word	0x40012400

08000820 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08b      	sub	sp, #44	@ 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	2414      	movs	r4, #20
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f007 fa25 	bl	8007c82 <memset>
  if(adcHandle->Instance==ADC1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a2d      	ldr	r2, [pc, #180]	@ (80008f4 <HAL_ADC_MspInit+0xd4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d153      	bne.n	80008ea <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	0089      	lsls	r1, r1, #2
 800084c:	430a      	orrs	r2, r1
 800084e:	619a      	str	r2, [r3, #24]
 8000850:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <HAL_ADC_MspInit+0xd8>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	221b      	movs	r2, #27
 800087e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2203      	movs	r2, #3
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	193a      	adds	r2, r7, r4
 800088e:	2390      	movs	r3, #144	@ 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f003 fcbb 	bl	8004210 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 800089c:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <HAL_ADC_MspInit+0xe0>)
 800089e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008bc:	2280      	movs	r2, #128	@ 0x80
 80008be:	00d2      	lsls	r2, r2, #3
 80008c0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f003 fa87 	bl	8003de4 <HAL_DMA_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80008da:	f001 ffdd 	bl	8002898 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_ADC_MspInit+0xdc>)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b00b      	add	sp, #44	@ 0x2c
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	40012400 	.word	0x40012400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	20000078 	.word	0x20000078
 8000900:	40020008 	.word	0x40020008

08000904 <on_tx_done>:
volatile uint32_t g_frame_count = 0;  // <-- add this line here (global, not static)

//TX Buffer and State
static uint8_t tx_buf[TX_MAX_SIZE];
static volatile uint8_t tx_busy = 0;
static void on_tx_done(void){ tx_busy = 0; }
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <on_tx_done+0x10>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200003cc 	.word	0x200003cc

08000918 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){ if (huart==g_huart) on_tx_done(); }
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_UART_TxCpltCallback+0x20>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d101      	bne.n	800092e <HAL_UART_TxCpltCallback+0x16>
 800092a:	f7ff ffeb 	bl	8000904 <on_tx_done>
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	200000bc 	.word	0x200000bc

0800093c <put_u16le>:


/*** tiny helpers ***/

// --- little-endian writers ---
static void put_u16le(uint8_t *p, uint16_t v){ p[0]=(uint8_t)v; p[1]=(uint8_t)(v>>8); }
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	000a      	movs	r2, r1
 8000946:	1cbb      	adds	r3, r7, #2
 8000948:	801a      	strh	r2, [r3, #0]
 800094a:	1cbb      	adds	r3, r7, #2
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	1cbb      	adds	r3, r7, #2
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	b29a      	uxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}

0800096c <put_u32le>:
static void put_u32le(uint8_t *p, uint32_t v){ p[0]=v; p[1]=v>>8; p[2]=v>>16; p[3]=v>>24; }
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	0a1a      	lsrs	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	0c1a      	lsrs	r2, r3, #16
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3302      	adds	r3, #2
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	0e1a      	lsrs	r2, r3, #24
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3303      	adds	r3, #3
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}

080009aa <tlv_put_u32>:

// --- tiny TLV writer, used for ping payload ---
uint8_t* tlv_put_u32(uint8_t *w, uint8_t type, uint32_t v){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	200b      	movs	r0, #11
 80009b6:	183b      	adds	r3, r7, r0
 80009b8:	1c0a      	adds	r2, r1, #0
 80009ba:	701a      	strb	r2, [r3, #0]
    *w++ = type; *w++ = 4; *w++ = 0;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60fa      	str	r2, [r7, #12]
 80009c2:	183a      	adds	r2, r7, r0
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60fa      	str	r2, [r7, #12]
 80009ce:	2204      	movs	r2, #4
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	60fa      	str	r2, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)v; *w++ = (uint8_t)(v>>8); *w++ = (uint8_t)(v>>16); *w++ = (uint8_t)(v>>24);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60fa      	str	r2, [r7, #12]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0a19      	lsrs	r1, r3, #8
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60fa      	str	r2, [r7, #12]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0c19      	lsrs	r1, r3, #16
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	60fa      	str	r2, [r7, #12]
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	0e19      	lsrs	r1, r3, #24
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60fa      	str	r2, [r7, #12]
 8000a0e:	b2ca      	uxtb	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
    return w;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b004      	add	sp, #16
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <tlv_put_i32>:

uint8_t* tlv_put_i32(uint8_t *w, uint8_t type, int32_t v){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	200b      	movs	r0, #11
 8000a28:	183b      	adds	r3, r7, r0
 8000a2a:	1c0a      	adds	r2, r1, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
    *w++ = type; *w++ = 4; *w++ = 0;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60fa      	str	r2, [r7, #12]
 8000a34:	183a      	adds	r2, r7, r0
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60fa      	str	r2, [r7, #12]
 8000a40:	2204      	movs	r2, #4
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60fa      	str	r2, [r7, #12]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v      );
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	60fa      	str	r2, [r7, #12]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >>  8);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	1219      	asrs	r1, r3, #8
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	60fa      	str	r2, [r7, #12]
 8000a64:	b2ca      	uxtb	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 16);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	1419      	asrs	r1, r3, #16
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 24);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1619      	asrs	r1, r3, #24
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	60fa      	str	r2, [r7, #12]
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
    return w;
 8000a84:	68fb      	ldr	r3, [r7, #12]
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b004      	add	sp, #16
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <crc32c>:

// --- CRC-32C (Castagnoli), small bitwise version ---
static uint32_t crc32c(const uint8_t *p, size_t n){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFFu;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	60fb      	str	r3, [r7, #12]
    while(n--){
 8000a9e:	e028      	b.n	8000af2 <crc32c+0x64>
        crc ^= *p++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4053      	eors	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
        for(int k=0;k<8;k++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	e01a      	b.n	8000aec <crc32c+0x5e>
            crc = (crc>>1) ^ (0x82F63B78u & (-(int)(crc & 1)));
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0858      	lsrs	r0, r3, #1
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	000b      	movs	r3, r1
 8000ac4:	025b      	lsls	r3, r3, #9
 8000ac6:	1a5b      	subs	r3, r3, r1
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	1a5b      	subs	r3, r3, r1
 8000acc:	009a      	lsls	r2, r3, #2
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	00da      	lsls	r2, r3, #3
 8000ad2:	1ad2      	subs	r2, r2, r3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	1852      	adds	r2, r2, r1
 8000ad8:	0152      	lsls	r2, r2, #5
 8000ada:	1852      	adds	r2, r2, r1
 8000adc:	0113      	lsls	r3, r2, #4
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4043      	eors	r3, r0
 8000ae4:	60fb      	str	r3, [r7, #12]
        for(int k=0;k<8;k++)
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b07      	cmp	r3, #7
 8000af0:	dde1      	ble.n	8000ab6 <crc32c+0x28>
    while(n--){
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	1e5a      	subs	r2, r3, #1
 8000af6:	603a      	str	r2, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1d1      	bne.n	8000aa0 <crc32c+0x12>
    }
    return ~crc;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43db      	mvns	r3, r3
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b004      	add	sp, #16
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <dma_head_now>:

// 1) ask the DMA "head" position (where it has written up to)
//    NDTR = remaining transfers; head = (size - NDTR) modulo size
static inline uint16_t dma_head_now(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
    uint16_t remaining = __HAL_DMA_GET_COUNTER(g_huart->hdmarx);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <dma_head_now+0x30>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	801a      	strh	r2, [r3, #0]
    return (uint16_t)((RX_DMA_SIZE - remaining) & (RX_DMA_SIZE - 1));
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	0ddb      	lsrs	r3, r3, #23
 8000b2c:	b29b      	uxth	r3, r3
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	200000bc 	.word	0x200000bc

08000b3c <circ_peek>:

// 2) read one byte from the circular buffer at index 'idx' (no consume)
static inline uint8_t circ_peek(uint16_t idx){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	801a      	strh	r2, [r3, #0]
    return rx_dma_buf[idx % RX_DMA_SIZE];
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	0ddb      	lsrs	r3, r3, #23
 8000b50:	4a02      	ldr	r2, [pc, #8]	@ (8000b5c <circ_peek+0x20>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000c0 	.word	0x200000c0

08000b60 <circ_read>:

// copy N bytes from circular buffer at idx into linear dst
static void circ_read(uint16_t idx, uint8_t *dst, uint16_t n){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6039      	str	r1, [r7, #0]
 8000b68:	0011      	movs	r1, r2
 8000b6a:	1dbb      	adds	r3, r7, #6
 8000b6c:	1c02      	adds	r2, r0, #0
 8000b6e:	801a      	strh	r2, [r3, #0]
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	1c0a      	adds	r2, r1, #0
 8000b74:	801a      	strh	r2, [r3, #0]
    while (n--) { *dst++ = rx_dma_buf[idx++ % RX_DMA_SIZE]; }
 8000b76:	e00c      	b.n	8000b92 <circ_read+0x32>
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	1dba      	adds	r2, r7, #6
 8000b7e:	1c59      	adds	r1, r3, #1
 8000b80:	8011      	strh	r1, [r2, #0]
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	0dda      	lsrs	r2, r3, #23
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	1c59      	adds	r1, r3, #1
 8000b8a:	6039      	str	r1, [r7, #0]
 8000b8c:	4907      	ldr	r1, [pc, #28]	@ (8000bac <circ_read+0x4c>)
 8000b8e:	5c8a      	ldrb	r2, [r1, r2]
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	1d3a      	adds	r2, r7, #4
 8000b98:	1e59      	subs	r1, r3, #1
 8000b9a:	8011      	strh	r1, [r2, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1eb      	bne.n	8000b78 <circ_read+0x18>
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	200000c0 	.word	0x200000c0

08000bb0 <have_bytes>:

// how many bytes are available from 'from' to current head (modulo)
static int have_bytes(uint16_t from, uint16_t need){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	801a      	strh	r2, [r3, #0]
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	1c0a      	adds	r2, r1, #0
 8000bc0:	801a      	strh	r2, [r3, #0]
    int32_t avail = (int32_t)((rx_dma_head - from + RX_DMA_SIZE) % RX_DMA_SIZE);
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <have_bytes+0x54>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	001a      	movs	r2, r3
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	4694      	mov	ip, r2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <have_bytes+0x58>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d503      	bpl.n	8000be6 <have_bytes+0x36>
 8000bde:	3b01      	subs	r3, #1
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <have_bytes+0x5c>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
    return (avail >= (int32_t)need);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	17d0      	asrs	r0, r2, #31
 8000bf0:	0fd9      	lsrs	r1, r3, #31
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	4148      	adcs	r0, r1
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	b2db      	uxtb	r3, r3
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	200002c0 	.word	0x200002c0
 8000c08:	800001ff 	.word	0x800001ff
 8000c0c:	fffffe00 	.word	0xfffffe00

08000c10 <read_u16le_circ>:

// read little-endian u16 at circular position
static uint16_t read_u16le_circ(uint16_t idx){
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	801a      	strh	r2, [r3, #0]
    uint8_t b0 = circ_peek(idx);
 8000c1c:	250f      	movs	r5, #15
 8000c1e:	197c      	adds	r4, r7, r5
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff89 	bl	8000b3c <circ_peek>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	7023      	strb	r3, [r4, #0]
    uint8_t b1 = circ_peek((uint16_t)(idx+1));
 8000c2e:	1dbb      	adds	r3, r7, #6
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	260e      	movs	r6, #14
 8000c38:	19bc      	adds	r4, r7, r6
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff7e 	bl	8000b3c <circ_peek>
 8000c40:	0003      	movs	r3, r0
 8000c42:	7023      	strb	r3, [r4, #0]
    return (uint16_t)(b0 | ((uint16_t)b1<<8));
 8000c44:	197b      	adds	r3, r7, r5
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	19bb      	adds	r3, r7, r6
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	b29b      	uxth	r3, r3
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b005      	add	sp, #20
 8000c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c62 <tlv_find_u32>:
    }
    return 0;
}

int tlv_find_u32(const uint8_t *p, uint16_t len, uint8_t want_type, uint32_t *out)
{
 8000c62:	b5b0      	push	{r4, r5, r7, lr}
 8000c64:	b088      	sub	sp, #32
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	0008      	movs	r0, r1
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	230a      	movs	r3, #10
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	1c02      	adds	r2, r0, #0
 8000c76:	801a      	strh	r2, [r3, #0]
 8000c78:	2309      	movs	r3, #9
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	1c0a      	adds	r2, r1, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
    uint16_t i = 0;
 8000c80:	231e      	movs	r3, #30
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	801a      	strh	r2, [r3, #0]
    while (i + 3 <= len) {
 8000c88:	e05c      	b.n	8000d44 <tlv_find_u32+0xe2>
        uint8_t t = p[i];
 8000c8a:	201e      	movs	r0, #30
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	251d      	movs	r5, #29
 8000c96:	197b      	adds	r3, r7, r5
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
        uint16_t L = (uint16_t)(p[i+1] | (p[i+2] << 8));
 8000c9c:	183b      	adds	r3, r7, r0
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	183b      	adds	r3, r7, r0
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	18cb      	adds	r3, r1, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	241a      	movs	r4, #26
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	801a      	strh	r2, [r3, #0]
        i += 3;
 8000cc6:	0001      	movs	r1, r0
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	187a      	adds	r2, r7, r1
 8000ccc:	8812      	ldrh	r2, [r2, #0]
 8000cce:	3203      	adds	r2, #3
 8000cd0:	801a      	strh	r2, [r3, #0]
        if (i + L > len) break;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	881a      	ldrh	r2, [r3, #0]
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	18d2      	adds	r2, r2, r3
 8000cdc:	230a      	movs	r3, #10
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dc38      	bgt.n	8000d58 <tlv_find_u32+0xf6>
        if (t == want_type && L == 4) {
 8000ce6:	197a      	adds	r2, r7, r5
 8000ce8:	2309      	movs	r3, #9
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d11e      	bne.n	8000d32 <tlv_find_u32+0xd0>
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d11a      	bne.n	8000d32 <tlv_find_u32+0xd0>
            const uint8_t *v = &p[i];
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
            *out = (uint32_t)v[0] | ((uint32_t)v[1] << 8) | ((uint32_t)v[2] << 16) | ((uint32_t)v[3] << 24);
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	431a      	orrs	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3303      	adds	r3, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	061b      	lsls	r3, r3, #24
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
            return 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e014      	b.n	8000d5c <tlv_find_u32+0xfa>
        }
        i += L;
 8000d32:	221e      	movs	r2, #30
 8000d34:	18bb      	adds	r3, r7, r2
 8000d36:	18b9      	adds	r1, r7, r2
 8000d38:	221a      	movs	r2, #26
 8000d3a:	18ba      	adds	r2, r7, r2
 8000d3c:	8809      	ldrh	r1, [r1, #0]
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	188a      	adds	r2, r1, r2
 8000d42:	801a      	strh	r2, [r3, #0]
    while (i + 3 <= len) {
 8000d44:	231e      	movs	r3, #30
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	1c9a      	adds	r2, r3, #2
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	db99      	blt.n	8000c8a <tlv_find_u32+0x28>
 8000d56:	e000      	b.n	8000d5a <tlv_find_u32+0xf8>
        if (i + L > len) break;
 8000d58:	46c0      	nop			@ (mov r8, r8)
    }
    return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b008      	add	sp, #32
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}

08000d64 <tlv_put_u64>:

uint8_t* tlv_put_u64(uint8_t *w, uint8_t type, uint64_t v){
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b091      	sub	sp, #68	@ 0x44
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d70:	200b      	movs	r0, #11
 8000d72:	2630      	movs	r6, #48	@ 0x30
 8000d74:	1983      	adds	r3, r0, r6
 8000d76:	19da      	adds	r2, r3, r7
 8000d78:	1c0b      	adds	r3, r1, #0
 8000d7a:	7013      	strb	r3, [r2, #0]
    *w++ = type; *w++ = 8; *w++ = 0;
 8000d7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d7e:	1c53      	adds	r3, r2, #1
 8000d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d82:	1983      	adds	r3, r0, r6
 8000d84:	19db      	adds	r3, r3, r7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	7013      	strb	r3, [r2, #0]
 8000d8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d8c:	1c53      	adds	r3, r2, #1
 8000d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d90:	2308      	movs	r3, #8
 8000d92:	7013      	strb	r3, [r2, #0]
 8000d94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d96:	1c53      	adds	r3, r2, #1
 8000d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	7013      	strb	r3, [r2, #0]
    // little-endian
    *w++ = (uint8_t)(v      );
 8000d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000da0:	1c4b      	adds	r3, r1, #1
 8000da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da8:	1c13      	adds	r3, r2, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	700b      	strb	r3, [r1, #0]
    *w++ = (uint8_t)(v >>  8);
 8000dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db0:	061a      	lsls	r2, r3, #24
 8000db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000db4:	0a1c      	lsrs	r4, r3, #8
 8000db6:	4314      	orrs	r4, r2
 8000db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dba:	0a1d      	lsrs	r5, r3, #8
 8000dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dbe:	1c53      	adds	r3, r2, #1
 8000dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dc2:	b2e3      	uxtb	r3, r4
 8000dc4:	7013      	strb	r3, [r2, #0]
    *w++ = (uint8_t)(v >> 16);
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000de2:	2228      	movs	r2, #40	@ 0x28
 8000de4:	18ba      	adds	r2, r7, r2
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 24);
 8000dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000df0:	0e12      	lsrs	r2, r2, #24
 8000df2:	623a      	str	r2, [r7, #32]
 8000df4:	6a3a      	ldr	r2, [r7, #32]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	623a      	str	r2, [r7, #32]
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfc:	0e1b      	lsrs	r3, r3, #24
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e06:	2220      	movs	r2, #32
 8000e08:	18ba      	adds	r2, r7, r2
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 32);
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e10:	001b      	movs	r3, r3
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e1e:	7e3a      	ldrb	r2, [r7, #24]
 8000e20:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 40);
 8000e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e32:	7c3a      	ldrb	r2, [r7, #16]
 8000e34:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 48);
 8000e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e46:	7a3a      	ldrb	r2, [r7, #8]
 8000e48:	701a      	strb	r2, [r3, #0]
    *w++ = (uint8_t)(v >> 56);
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4c:	0e1b      	lsrs	r3, r3, #24
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e5a:	783a      	ldrb	r2, [r7, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
    return w;
 8000e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b011      	add	sp, #68	@ 0x44
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e68 <tlv_find_u64>:

int tlv_find_u64(const uint8_t *p, uint16_t len, uint8_t want_type, uint64_t *out)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b0b3      	sub	sp, #204	@ 0xcc
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	26ac      	movs	r6, #172	@ 0xac
 8000e70:	19be      	adds	r6, r7, r6
 8000e72:	6030      	str	r0, [r6, #0]
 8000e74:	0010      	movs	r0, r2
 8000e76:	22a4      	movs	r2, #164	@ 0xa4
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	26a0      	movs	r6, #160	@ 0xa0
 8000e80:	199b      	adds	r3, r3, r6
 8000e82:	19da      	adds	r2, r3, r7
 8000e84:	1c0b      	adds	r3, r1, #0
 8000e86:	8013      	strh	r3, [r2, #0]
 8000e88:	2309      	movs	r3, #9
 8000e8a:	0031      	movs	r1, r6
 8000e8c:	185b      	adds	r3, r3, r1
 8000e8e:	19da      	adds	r2, r3, r7
 8000e90:	1c03      	adds	r3, r0, #0
 8000e92:	7013      	strb	r3, [r2, #0]
    uint16_t i = 0;
 8000e94:	2326      	movs	r3, #38	@ 0x26
 8000e96:	185b      	adds	r3, r3, r1
 8000e98:	19da      	adds	r2, r3, r7
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	8013      	strh	r3, [r2, #0]
    while (i + 3 <= len) {
 8000e9e:	e141      	b.n	8001124 <tlv_find_u64+0x2bc>
        uint8_t t = p[i];
 8000ea0:	2026      	movs	r0, #38	@ 0x26
 8000ea2:	26a0      	movs	r6, #160	@ 0xa0
 8000ea4:	1983      	adds	r3, r0, r6
 8000ea6:	19db      	adds	r3, r3, r7
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	21ac      	movs	r1, #172	@ 0xac
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	189b      	adds	r3, r3, r2
 8000eb2:	2225      	movs	r2, #37	@ 0x25
 8000eb4:	1992      	adds	r2, r2, r6
 8000eb6:	19d2      	adds	r2, r2, r7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	7013      	strb	r3, [r2, #0]
        uint16_t L = (uint16_t)(p[i+1] | (p[i+2] << 8));
 8000ebc:	1983      	adds	r3, r0, r6
 8000ebe:	19db      	adds	r3, r3, r7
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	189b      	adds	r3, r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b219      	sxth	r1, r3
 8000ece:	1983      	adds	r3, r0, r6
 8000ed0:	19db      	adds	r3, r3, r7
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	1c9a      	adds	r2, r3, #2
 8000ed6:	23ac      	movs	r3, #172	@ 0xac
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	189b      	adds	r3, r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	2622      	movs	r6, #34	@ 0x22
 8000eec:	22a0      	movs	r2, #160	@ 0xa0
 8000eee:	18b2      	adds	r2, r6, r2
 8000ef0:	19d2      	adds	r2, r2, r7
 8000ef2:	8013      	strh	r3, [r2, #0]
        i += 3;
 8000ef4:	0001      	movs	r1, r0
 8000ef6:	20a0      	movs	r0, #160	@ 0xa0
 8000ef8:	180a      	adds	r2, r1, r0
 8000efa:	19d2      	adds	r2, r2, r7
 8000efc:	180b      	adds	r3, r1, r0
 8000efe:	19db      	adds	r3, r3, r7
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	3303      	adds	r3, #3
 8000f04:	8013      	strh	r3, [r2, #0]
        if (i + L > len) break;
 8000f06:	180a      	adds	r2, r1, r0
 8000f08:	19d3      	adds	r3, r2, r7
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	1833      	adds	r3, r6, r0
 8000f0e:	19db      	adds	r3, r3, r7
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	18d2      	adds	r2, r2, r3
 8000f14:	230a      	movs	r3, #10
 8000f16:	181b      	adds	r3, r3, r0
 8000f18:	19db      	adds	r3, r3, r7
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dd00      	ble.n	8000f22 <tlv_find_u64+0xba>
 8000f20:	e10e      	b.n	8001140 <tlv_find_u64+0x2d8>
        if (t == want_type && L == 8) {
 8000f22:	2225      	movs	r2, #37	@ 0x25
 8000f24:	1812      	adds	r2, r2, r0
 8000f26:	19d2      	adds	r2, r2, r7
 8000f28:	2309      	movs	r3, #9
 8000f2a:	181b      	adds	r3, r3, r0
 8000f2c:	19db      	adds	r3, r3, r7
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d000      	beq.n	8000f38 <tlv_find_u64+0xd0>
 8000f36:	e0e7      	b.n	8001108 <tlv_find_u64+0x2a0>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	18b0      	adds	r0, r6, r2
 8000f3c:	19c3      	adds	r3, r0, r7
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d000      	beq.n	8000f46 <tlv_find_u64+0xde>
 8000f44:	e0e0      	b.n	8001108 <tlv_find_u64+0x2a0>
            const uint8_t *v = &p[i];
 8000f46:	188a      	adds	r2, r1, r2
 8000f48:	19d3      	adds	r3, r2, r7
 8000f4a:	881a      	ldrh	r2, [r3, #0]
 8000f4c:	21ac      	movs	r1, #172	@ 0xac
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	26bc      	movs	r6, #188	@ 0xbc
 8000f56:	19ba      	adds	r2, r7, r6
 8000f58:	6013      	str	r3, [r2, #0]
            uint64_t x =  ((uint64_t)v[0])        |
 8000f5a:	19bb      	adds	r3, r7, r6
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2290      	movs	r2, #144	@ 0x90
 8000f62:	18b9      	adds	r1, r7, r2
 8000f64:	600b      	str	r3, [r1, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	2194      	movs	r1, #148	@ 0x94
 8000f6a:	1879      	adds	r1, r7, r1
 8000f6c:	600b      	str	r3, [r1, #0]
                         (((uint64_t)v[1]) <<  8) |
 8000f6e:	19b9      	adds	r1, r7, r6
 8000f70:	680b      	ldr	r3, [r1, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2288      	movs	r2, #136	@ 0x88
 8000f78:	18b9      	adds	r1, r7, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	218c      	movs	r1, #140	@ 0x8c
 8000f80:	1879      	adds	r1, r7, r1
 8000f82:	600b      	str	r3, [r1, #0]
 8000f84:	18b9      	adds	r1, r7, r2
 8000f86:	684a      	ldr	r2, [r1, #4]
 8000f88:	6809      	ldr	r1, [r1, #0]
 8000f8a:	000b      	movs	r3, r1
 8000f8c:	0e1b      	lsrs	r3, r3, #24
 8000f8e:	0010      	movs	r0, r2
 8000f90:	0205      	lsls	r5, r0, #8
 8000f92:	431d      	orrs	r5, r3
 8000f94:	000b      	movs	r3, r1
 8000f96:	021c      	lsls	r4, r3, #8
            uint64_t x =  ((uint64_t)v[0])        |
 8000f98:	2390      	movs	r3, #144	@ 0x90
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	4321      	orrs	r1, r4
 8000fa4:	2080      	movs	r0, #128	@ 0x80
 8000fa6:	1838      	adds	r0, r7, r0
 8000fa8:	6001      	str	r1, [r0, #0]
 8000faa:	432b      	orrs	r3, r5
 8000fac:	2284      	movs	r2, #132	@ 0x84
 8000fae:	18ba      	adds	r2, r7, r2
 8000fb0:	6013      	str	r3, [r2, #0]
                         (((uint64_t)v[2]) << 16) |
 8000fb2:	19ba      	adds	r2, r7, r6
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000fc0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000fc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	0010      	movs	r0, r2
 8000fca:	0400      	lsls	r0, r0, #16
 8000fcc:	249c      	movs	r4, #156	@ 0x9c
 8000fce:	193d      	adds	r5, r7, r4
 8000fd0:	6028      	str	r0, [r5, #0]
 8000fd2:	193d      	adds	r5, r7, r4
 8000fd4:	6828      	ldr	r0, [r5, #0]
 8000fd6:	4318      	orrs	r0, r3
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	6020      	str	r0, [r4, #0]
 8000fdc:	000b      	movs	r3, r1
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	2498      	movs	r4, #152	@ 0x98
 8000fe2:	193a      	adds	r2, r7, r4
 8000fe4:	6013      	str	r3, [r2, #0]
                         (((uint64_t)v[1]) <<  8) |
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	0008      	movs	r0, r1
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	685c      	ldr	r4, [r3, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	001d      	movs	r5, r3
 8000ff8:	4328      	orrs	r0, r5
 8000ffa:	6738      	str	r0, [r7, #112]	@ 0x70
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	431a      	orrs	r2, r3
 8001000:	677a      	str	r2, [r7, #116]	@ 0x74
                         (((uint64_t)v[3]) << 24) |
 8001002:	19bb      	adds	r3, r7, r6
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3303      	adds	r3, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800100c:	2300      	movs	r3, #0
 800100e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001012:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8001014:	001a      	movs	r2, r3
 8001016:	0a12      	lsrs	r2, r2, #8
 8001018:	667a      	str	r2, [r7, #100]	@ 0x64
 800101a:	061b      	lsls	r3, r3, #24
 800101c:	663b      	str	r3, [r7, #96]	@ 0x60
                         (((uint64_t)v[2]) << 16) |
 800101e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001020:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001022:	0008      	movs	r0, r1
 8001024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001026:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8001028:	001d      	movs	r5, r3
 800102a:	4328      	orrs	r0, r5
 800102c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800102e:	0023      	movs	r3, r4
 8001030:	431a      	orrs	r2, r3
 8001032:	65fa      	str	r2, [r7, #92]	@ 0x5c
                         (((uint64_t)v[4]) << 32) |
 8001034:	19bb      	adds	r3, r7, r6
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	653b      	str	r3, [r7, #80]	@ 0x50
 800103e:	2300      	movs	r3, #0
 8001040:	657b      	str	r3, [r7, #84]	@ 0x54
 8001042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001044:	001b      	movs	r3, r3
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001048:	2300      	movs	r3, #0
 800104a:	64bb      	str	r3, [r7, #72]	@ 0x48
                         (((uint64_t)v[3]) << 24) |
 800104c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800104e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001050:	0008      	movs	r0, r1
 8001052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001054:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001056:	001d      	movs	r5, r3
 8001058:	4328      	orrs	r0, r5
 800105a:	6438      	str	r0, [r7, #64]	@ 0x40
 800105c:	0023      	movs	r3, r4
 800105e:	431a      	orrs	r2, r3
 8001060:	647a      	str	r2, [r7, #68]	@ 0x44
                         (((uint64_t)v[5]) << 40) |
 8001062:	19bb      	adds	r3, r7, r6
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3305      	adds	r3, #5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
                         (((uint64_t)v[4]) << 32) |
 800107a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800107c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800107e:	0008      	movs	r0, r1
 8001080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001082:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001084:	001d      	movs	r5, r3
 8001086:	4328      	orrs	r0, r5
 8001088:	62b8      	str	r0, [r7, #40]	@ 0x28
 800108a:	0023      	movs	r3, r4
 800108c:	431a      	orrs	r2, r3
 800108e:	62fa      	str	r2, [r7, #44]	@ 0x2c
                         (((uint64_t)v[6]) << 48) |
 8001090:	19bb      	adds	r3, r7, r6
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3306      	adds	r3, #6
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
                         (((uint64_t)v[5]) << 40) |
 80010a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010ac:	0008      	movs	r0, r1
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	69fc      	ldr	r4, [r7, #28]
 80010b2:	001d      	movs	r5, r3
 80010b4:	4328      	orrs	r0, r5
 80010b6:	6138      	str	r0, [r7, #16]
 80010b8:	0023      	movs	r3, r4
 80010ba:	431a      	orrs	r2, r3
 80010bc:	617a      	str	r2, [r7, #20]
                         (((uint64_t)v[7]) << 56);
 80010be:	19bb      	adds	r3, r7, r6
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3307      	adds	r3, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	061b      	lsls	r3, r3, #24
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
            uint64_t x =  ((uint64_t)v[0])        |
 80010d6:	693c      	ldr	r4, [r7, #16]
 80010d8:	697d      	ldr	r5, [r7, #20]
 80010da:	0023      	movs	r3, r4
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	0008      	movs	r0, r1
 80010e2:	4303      	orrs	r3, r0
 80010e4:	20b0      	movs	r0, #176	@ 0xb0
 80010e6:	183e      	adds	r6, r7, r0
 80010e8:	6033      	str	r3, [r6, #0]
 80010ea:	002b      	movs	r3, r5
 80010ec:	4313      	orrs	r3, r2
 80010ee:	22b4      	movs	r2, #180	@ 0xb4
 80010f0:	18ba      	adds	r2, r7, r2
 80010f2:	6013      	str	r3, [r2, #0]
            *out = x;
 80010f4:	23a4      	movs	r3, #164	@ 0xa4
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	183b      	adds	r3, r7, r0
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	600a      	str	r2, [r1, #0]
 8001102:	604b      	str	r3, [r1, #4]
            return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e01d      	b.n	8001144 <tlv_find_u64+0x2dc>
        }
        i += L;
 8001108:	2326      	movs	r3, #38	@ 0x26
 800110a:	22a0      	movs	r2, #160	@ 0xa0
 800110c:	1899      	adds	r1, r3, r2
 800110e:	19c9      	adds	r1, r1, r7
 8001110:	0010      	movs	r0, r2
 8001112:	189b      	adds	r3, r3, r2
 8001114:	19da      	adds	r2, r3, r7
 8001116:	2322      	movs	r3, #34	@ 0x22
 8001118:	181b      	adds	r3, r3, r0
 800111a:	19db      	adds	r3, r3, r7
 800111c:	8812      	ldrh	r2, [r2, #0]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	800b      	strh	r3, [r1, #0]
    while (i + 3 <= len) {
 8001124:	2326      	movs	r3, #38	@ 0x26
 8001126:	21a0      	movs	r1, #160	@ 0xa0
 8001128:	185b      	adds	r3, r3, r1
 800112a:	19db      	adds	r3, r3, r7
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	230a      	movs	r3, #10
 8001132:	185b      	adds	r3, r3, r1
 8001134:	19db      	adds	r3, r3, r7
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	da00      	bge.n	800113e <tlv_find_u64+0x2d6>
 800113c:	e6b0      	b.n	8000ea0 <tlv_find_u64+0x38>
 800113e:	e000      	b.n	8001142 <tlv_find_u64+0x2da>
        if (i + L > len) break;
 8001140:	46c0      	nop			@ (mov r8, r8)
    }
    return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b033      	add	sp, #204	@ 0xcc
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800114c <next_seq>:


/*** public API ***/

static uint8_t next_seq(void){ static uint8_t s=0; return ++s; }
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <next_seq+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <next_seq+0x1c>)
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <next_seq+0x1c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	200003cd 	.word	0x200003cd

0800116c <comm_send>:
enum { COMM_START_BYTE = 0x45, COMM_HDR_SIZE = 8, COMM_VER = 0x01 };

int comm_send(uint8_t rx_id, uint8_t tx_id, uint8_t msg_type,
              uint8_t flags, uint8_t reqid,
              const uint8_t *payload, uint16_t payload_len)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	0005      	movs	r5, r0
 8001174:	000c      	movs	r4, r1
 8001176:	0010      	movs	r0, r2
 8001178:	0019      	movs	r1, r3
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	1c2a      	adds	r2, r5, #0
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	1c22      	adds	r2, r4, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	1d7b      	adds	r3, r7, #5
 8001188:	1c02      	adds	r2, r0, #0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	1c0a      	adds	r2, r1, #0
 8001190:	701a      	strb	r2, [r3, #0]
    const uint16_t total = 1 + 2 + COMM_HDR_SIZE + payload_len + 4;
 8001192:	2116      	movs	r1, #22
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2230      	movs	r2, #48	@ 0x30
 8001198:	18ba      	adds	r2, r7, r2
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	320f      	adds	r2, #15
 800119e:	801a      	strh	r2, [r3, #0]
    if (total > TX_MAX_SIZE) return -1;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d902      	bls.n	80011b2 <comm_send+0x46>
 80011ac:	2301      	movs	r3, #1
 80011ae:	425b      	negs	r3, r3
 80011b0:	e086      	b.n	80012c0 <comm_send+0x154>

    // ---> reserve the TX buffer BEFORE writing into it
	while (tx_busy) { /* spin or yield */ }
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <comm_send+0x15c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1fa      	bne.n	80011b4 <comm_send+0x48>
	tx_busy = 1;
 80011be:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <comm_send+0x15c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]

    uint8_t *w = tx_buf;
 80011c4:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <comm_send+0x160>)
 80011c6:	613b      	str	r3, [r7, #16]
    *w++ = COMM_START_BYTE;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	613a      	str	r2, [r7, #16]
 80011ce:	2245      	movs	r2, #69	@ 0x45
 80011d0:	701a      	strb	r2, [r3, #0]
    put_u16le(w, total); w += 2;
 80011d2:	2316      	movs	r3, #22
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fbad 	bl	800093c <put_u16le>
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3302      	adds	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

    const uint8_t seq = next_seq();
 80011e8:	250f      	movs	r5, #15
 80011ea:	197c      	adds	r4, r7, r5
 80011ec:	f7ff ffae 	bl	800114c <next_seq>
 80011f0:	0003      	movs	r3, r0
 80011f2:	7023      	strb	r3, [r4, #0]
    *w++ = rx_id; *w++ = tx_id; *w++ = msg_type; *w++ = COMM_VER;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	613a      	str	r2, [r7, #16]
 80011fa:	1dfa      	adds	r2, r7, #7
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	613a      	str	r2, [r7, #16]
 8001206:	1dba      	adds	r2, r7, #6
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	613a      	str	r2, [r7, #16]
 8001212:	1d7a      	adds	r2, r7, #5
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	613a      	str	r2, [r7, #16]
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    *w++ = 0x01;  /* flags: FINAL bit set */
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	613a      	str	r2, [r7, #16]
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
    *w++ = seq;
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	613a      	str	r2, [r7, #16]
 8001232:	197a      	adds	r2, r7, r5
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	701a      	strb	r2, [r3, #0]
    *w++ = reqid;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	613a      	str	r2, [r7, #16]
 800123e:	2228      	movs	r2, #40	@ 0x28
 8001240:	18ba      	adds	r2, r7, r2
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
    *w++ = 0;     /* reserved */
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	613a      	str	r2, [r7, #16]
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

    if (payload_len && payload) memcpy(w, payload, payload_len);
 8001250:	2230      	movs	r2, #48	@ 0x30
 8001252:	18bb      	adds	r3, r7, r2
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <comm_send+0x102>
 800125a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <comm_send+0x102>
 8001260:	18bb      	adds	r3, r7, r2
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	0018      	movs	r0, r3
 800126a:	f006 fd37 	bl	8007cdc <memcpy>

    uint32_t crc = crc32c(tx_buf, 1+2+COMM_HDR_SIZE+payload_len);
 800126e:	2430      	movs	r4, #48	@ 0x30
 8001270:	193b      	adds	r3, r7, r4
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	330b      	adds	r3, #11
 8001276:	001a      	movs	r2, r3
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <comm_send+0x160>)
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff fc06 	bl	8000a8e <crc32c>
 8001282:	0003      	movs	r3, r0
 8001284:	60bb      	str	r3, [r7, #8]
    put_u32le(tx_buf + (1+2+COMM_HDR_SIZE+payload_len), crc);
 8001286:	193b      	adds	r3, r7, r4
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	330b      	adds	r3, #11
 800128c:	001a      	movs	r2, r3
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <comm_send+0x160>)
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff fb68 	bl	800096c <put_u32le>

    if (HAL_UART_Transmit_DMA(g_huart, tx_buf, total) != HAL_OK){
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <comm_send+0x164>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	2316      	movs	r3, #22
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	881a      	ldrh	r2, [r3, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <comm_send+0x160>)
 80012a8:	0019      	movs	r1, r3
 80012aa:	f005 fb3d 	bl	8006928 <HAL_UART_Transmit_DMA>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d005      	beq.n	80012be <comm_send+0x152>
        tx_busy = 0; return -2;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <comm_send+0x15c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	425b      	negs	r3, r3
 80012bc:	e000      	b.n	80012c0 <comm_send+0x154>
    }
    return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b006      	add	sp, #24
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	200003cc 	.word	0x200003cc
 80012cc:	200002cc 	.word	0x200002cc
 80012d0:	200000bc 	.word	0x200000bc

080012d4 <comm_init>:

void comm_init(UART_HandleTypeDef *huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <comm_init+0x48>)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
    rx_dma_head = 0;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <comm_init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]
    rx_cons = 0;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <comm_init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]

    // start continuous RX into our circular buffer
    HAL_UART_Receive_DMA(g_huart, rx_dma_buf, RX_DMA_SIZE);
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <comm_init+0x48>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	490c      	ldr	r1, [pc, #48]	@ (8001328 <comm_init+0x54>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f005 fba5 	bl	8006a48 <HAL_UART_Receive_DMA>

    // enable IDLE-line interrupt so we get poked when a burst of bytes ends
    __HAL_UART_ENABLE_IT(g_huart, UART_IT_IDLE);
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <comm_init+0x48>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <comm_init+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2110      	movs	r1, #16
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	200000bc 	.word	0x200000bc
 8001320:	200002c0 	.word	0x200002c0
 8001324:	200002c2 	.word	0x200002c2
 8001328:	200000c0 	.word	0x200000c0

0800132c <comm_on_uart_idle_irq>:

void comm_on_uart_idle_irq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    // acknowledge the IDLE event and snapshot the new DMA head
    __HAL_UART_CLEAR_IDLEFLAG(g_huart);
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <comm_on_uart_idle_irq+0x20>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2210      	movs	r2, #16
 8001338:	621a      	str	r2, [r3, #32]
    rx_dma_head = dma_head_now();
 800133a:	f7ff fbe5 	bl	8000b08 <dma_head_now>
 800133e:	0003      	movs	r3, r0
 8001340:	001a      	movs	r2, r3
 8001342:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <comm_on_uart_idle_irq+0x24>)
 8001344:	801a      	strh	r2, [r3, #0]

    // (nothing else yet — we’ll parse in comm_poll() in a later step)
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000bc 	.word	0x200000bc
 8001350:	200002c0 	.word	0x200002c0

08001354 <deliver_checked>:

static void deliver_checked(const uint8_t *frame, uint16_t len){
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	000a      	movs	r2, r1
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	801a      	strh	r2, [r3, #0]
    if (len < (1+2+COMM_HDR_SIZE+4)) return;            // min size check
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b0e      	cmp	r3, #14
 8001368:	d800      	bhi.n	800136c <deliver_checked+0x18>
 800136a:	e082      	b.n	8001472 <deliver_checked+0x11e>
    if (frame[0] != COMM_START_BYTE) return;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b45      	cmp	r3, #69	@ 0x45
 8001372:	d000      	beq.n	8001376 <deliver_checked+0x22>
 8001374:	e07f      	b.n	8001476 <deliver_checked+0x122>

    uint16_t L = (uint16_t)(frame[1] | (frame[2]<<8));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b21a      	sxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3302      	adds	r3, #2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b21b      	sxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	2126      	movs	r1, #38	@ 0x26
 8001390:	187b      	adds	r3, r7, r1
 8001392:	801a      	strh	r2, [r3, #0]
    if (L != len) return;
 8001394:	187a      	adds	r2, r7, r1
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d16c      	bne.n	800147a <deliver_checked+0x126>

    // CRC check: over Start..end-of-payload
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 80013a0:	1cbb      	adds	r3, r7, #2
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	3b04      	subs	r3, #4
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	0019      	movs	r1, r3
 80013ae:	1cbb      	adds	r3, r7, #2
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	3b03      	subs	r3, #3
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	18d3      	adds	r3, r2, r3
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	000a      	movs	r2, r1
 80013be:	431a      	orrs	r2, r3
                      ((uint32_t)frame[len-2]<<16) | ((uint32_t)frame[len-1]<<24);
 80013c0:	1cbb      	adds	r3, r7, #2
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	18cb      	adds	r3, r1, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	041b      	lsls	r3, r3, #16
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 80013ce:	431a      	orrs	r2, r3
                      ((uint32_t)frame[len-2]<<16) | ((uint32_t)frame[len-1]<<24);
 80013d0:	1cbb      	adds	r3, r7, #2
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	18cb      	adds	r3, r1, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	061b      	lsls	r3, r3, #24
    uint32_t crc_rx = (uint32_t)frame[len-4] | ((uint32_t)frame[len-3]<<8) |
 80013de:	4313      	orrs	r3, r2
 80013e0:	623b      	str	r3, [r7, #32]
    uint32_t crc = crc32c(frame, len-4);
 80013e2:	1cbb      	adds	r3, r7, #2
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	3b04      	subs	r3, #4
 80013e8:	001a      	movs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0011      	movs	r1, r2
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fb4d 	bl	8000a8e <crc32c>
 80013f4:	0003      	movs	r3, r0
 80013f6:	61fb      	str	r3, [r7, #28]
    if (crc != crc_rx) return;
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d13e      	bne.n	800147e <deliver_checked+0x12a>

    // Build parsed view
    comm_frame_t f;
    f.rx_id = frame[3]; f.tx_id = frame[4]; f.msg_type = frame[5]; f.ver = frame[6];
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3303      	adds	r3, #3
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	210c      	movs	r1, #12
 8001408:	187b      	adds	r3, r7, r1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3304      	adds	r3, #4
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	187b      	adds	r3, r7, r1
 8001414:	705a      	strb	r2, [r3, #1]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3305      	adds	r3, #5
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	709a      	strb	r2, [r3, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3306      	adds	r3, #6
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	187b      	adds	r3, r7, r1
 8001428:	70da      	strb	r2, [r3, #3]
    f.flags = frame[7]; f.seq = frame[8]; f.reqid = frame[9]; f.rsv = frame[10];
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3307      	adds	r3, #7
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	187b      	adds	r3, r7, r1
 8001432:	711a      	strb	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3308      	adds	r3, #8
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	187b      	adds	r3, r7, r1
 800143c:	715a      	strb	r2, [r3, #5]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3309      	adds	r3, #9
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	187b      	adds	r3, r7, r1
 8001446:	719a      	strb	r2, [r3, #6]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	330a      	adds	r3, #10
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	187b      	adds	r3, r7, r1
 8001450:	71da      	strb	r2, [r3, #7]
    f.payload = &frame[11];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	330b      	adds	r3, #11
 8001456:	001a      	movs	r2, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	609a      	str	r2, [r3, #8]
    f.payload_len = (uint16_t)(len - (1+2+COMM_HDR_SIZE) - 4);
 800145c:	1cbb      	adds	r3, r7, #2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	3b0f      	subs	r3, #15
 8001462:	b29a      	uxth	r2, r3
 8001464:	187b      	adds	r3, r7, r1
 8001466:	819a      	strh	r2, [r3, #12]

    comm_on_frame(&f);
 8001468:	187b      	adds	r3, r7, r1
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fdac 	bl	8001fc8 <comm_on_frame>
 8001470:	e006      	b.n	8001480 <deliver_checked+0x12c>
    if (len < (1+2+COMM_HDR_SIZE+4)) return;            // min size check
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	e004      	b.n	8001480 <deliver_checked+0x12c>
    if (frame[0] != COMM_START_BYTE) return;
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	e002      	b.n	8001480 <deliver_checked+0x12c>
    if (L != len) return;
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	e000      	b.n	8001480 <deliver_checked+0x12c>
    if (crc != crc_rx) return;
 800147e:	46c0      	nop			@ (mov r8, r8)
}
 8001480:	46bd      	mov	sp, r7
 8001482:	b00a      	add	sp, #40	@ 0x28
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <comm_poll>:

void comm_poll(void)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
	// Fallback: keep DMA head fresh even if IDLE interrupt doesn’t fire
	rx_dma_head = dma_head_now();
 800148e:	f7ff fb3b 	bl	8000b08 <dma_head_now>
 8001492:	0003      	movs	r3, r0
 8001494:	001a      	movs	r2, r3
 8001496:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <comm_poll+0x170>)
 8001498:	801a      	strh	r2, [r3, #0]
	while (rx_cons != rx_dma_head){
 800149a:	e09d      	b.n	80015d8 <comm_poll+0x150>
	        switch (pstate){
 800149c:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <comm_poll+0x174>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d100      	bne.n	80014a6 <comm_poll+0x1e>
 80014a4:	e069      	b.n	800157a <comm_poll+0xf2>
 80014a6:	dd00      	ble.n	80014aa <comm_poll+0x22>
 80014a8:	e096      	b.n	80015d8 <comm_poll+0x150>
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <comm_poll+0x2c>
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d02d      	beq.n	800150e <comm_poll+0x86>
 80014b2:	e091      	b.n	80015d8 <comm_poll+0x150>

	        case S_FIND_START: {
	            uint8_t b = circ_peek(rx_cons);
 80014b4:	4b52      	ldr	r3, [pc, #328]	@ (8001600 <comm_poll+0x178>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	1d7c      	adds	r4, r7, #5
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7ff fb3e 	bl	8000b3c <circ_peek>
 80014c0:	0003      	movs	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]
	            rx_cons = (uint16_t)((rx_cons + 1) % RX_DMA_SIZE);
 80014c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <comm_poll+0x178>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001604 <comm_poll+0x17c>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	d503      	bpl.n	80014d8 <comm_poll+0x50>
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001608 <comm_poll+0x180>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b49      	ldr	r3, [pc, #292]	@ (8001600 <comm_poll+0x178>)
 80014dc:	801a      	strh	r2, [r3, #0]
	            if (b == 0x45) {  // COMM_START_BYTE later
 80014de:	1d7b      	adds	r3, r7, #5
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b45      	cmp	r3, #69	@ 0x45
 80014e4:	d000      	beq.n	80014e8 <comm_poll+0x60>
 80014e6:	e076      	b.n	80015d6 <comm_poll+0x14e>
	                start_pos = (uint16_t)((rx_cons - 1 + RX_DMA_SIZE) % RX_DMA_SIZE);
 80014e8:	4b45      	ldr	r3, [pc, #276]	@ (8001600 <comm_poll+0x178>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	4a47      	ldr	r2, [pc, #284]	@ (800160c <comm_poll+0x184>)
 80014ee:	4694      	mov	ip, r2
 80014f0:	4463      	add	r3, ip
 80014f2:	4a44      	ldr	r2, [pc, #272]	@ (8001604 <comm_poll+0x17c>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	d503      	bpl.n	8001500 <comm_poll+0x78>
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4a43      	ldr	r2, [pc, #268]	@ (8001608 <comm_poll+0x180>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	3301      	adds	r3, #1
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b43      	ldr	r3, [pc, #268]	@ (8001610 <comm_poll+0x188>)
 8001504:	801a      	strh	r2, [r3, #0]
	                pstate = S_READ_LEN;
 8001506:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <comm_poll+0x174>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
	            }
	        } break;
 800150c:	e063      	b.n	80015d6 <comm_poll+0x14e>

	        case S_READ_LEN: {
	            // need Start + 2 bytes of length available
	            if (!have_bytes(start_pos, 3)) return;  // wait for more
 800150e:	4b40      	ldr	r3, [pc, #256]	@ (8001610 <comm_poll+0x188>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	2103      	movs	r1, #3
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fb4b 	bl	8000bb0 <have_bytes>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d100      	bne.n	8001520 <comm_poll+0x98>
 800151e:	e064      	b.n	80015ea <comm_poll+0x162>
	            uint16_t L = read_u16le_circ((uint16_t)(start_pos + 1));
 8001520:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <comm_poll+0x188>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	b29b      	uxth	r3, r3
 8001528:	1dbc      	adds	r4, r7, #6
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff fb70 	bl	8000c10 <read_u16le_circ>
 8001530:	0003      	movs	r3, r0
 8001532:	8023      	strh	r3, [r4, #0]

	            // sanity window: min 15 bytes (Start+Len+8B header+4B CRC), max 512 for now
	            if (L < 15 || L > 512){
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b0e      	cmp	r3, #14
 800153a:	d905      	bls.n	8001548 <comm_poll+0xc0>
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	881a      	ldrh	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d910      	bls.n	800156a <comm_poll+0xe2>
	                // bad length -> resync by shifting one byte
	                start_pos = (uint16_t)((start_pos + 1) % RX_DMA_SIZE);
 8001548:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <comm_poll+0x188>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <comm_poll+0x17c>)
 8001550:	4013      	ands	r3, r2
 8001552:	d503      	bpl.n	800155c <comm_poll+0xd4>
 8001554:	3b01      	subs	r3, #1
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <comm_poll+0x180>)
 8001558:	4313      	orrs	r3, r2
 800155a:	3301      	adds	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <comm_poll+0x188>)
 8001560:	801a      	strh	r2, [r3, #0]
	                pstate = S_FIND_START;
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <comm_poll+0x174>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	                break;
 8001568:	e036      	b.n	80015d8 <comm_poll+0x150>
	            }
	            want_len = L;
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <comm_poll+0x18c>)
 800156c:	1dba      	adds	r2, r7, #6
 800156e:	8812      	ldrh	r2, [r2, #0]
 8001570:	801a      	strh	r2, [r3, #0]
	            pstate = S_READ_FRAME;
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <comm_poll+0x174>)
 8001574:	2202      	movs	r2, #2
 8001576:	701a      	strb	r2, [r3, #0]
	        } break;
 8001578:	e02e      	b.n	80015d8 <comm_poll+0x150>

	        case S_READ_FRAME: {
	            if (!have_bytes(start_pos, want_len)) return;  // not all bytes here yet
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <comm_poll+0x188>)
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <comm_poll+0x18c>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f7ff fb13 	bl	8000bb0 <have_bytes>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d02f      	beq.n	80015ee <comm_poll+0x166>

	            static uint8_t scratch[TX_MAX_SIZE];
	            if (want_len <= sizeof(scratch)){
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <comm_poll+0x18c>)
 8001590:	881a      	ldrh	r2, [r3, #0]
 8001592:	2380      	movs	r3, #128	@ 0x80
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	429a      	cmp	r2, r3
 8001598:	d80e      	bhi.n	80015b8 <comm_poll+0x130>
	                circ_read(start_pos, scratch, want_len);
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <comm_poll+0x188>)
 800159c:	8818      	ldrh	r0, [r3, #0]
 800159e:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <comm_poll+0x18c>)
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <comm_poll+0x190>)
 80015a4:	0019      	movs	r1, r3
 80015a6:	f7ff fadb 	bl	8000b60 <circ_read>
	                deliver_checked(scratch, want_len);
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <comm_poll+0x18c>)
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <comm_poll+0x190>)
 80015b0:	0011      	movs	r1, r2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff fece 	bl	8001354 <deliver_checked>
	            }

	            // advance past the frame and search again
	            rx_cons = (uint16_t)((start_pos + want_len) % RX_DMA_SIZE);
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <comm_poll+0x188>)
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <comm_poll+0x18c>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	0ddb      	lsrs	r3, r3, #23
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <comm_poll+0x178>)
 80015cc:	801a      	strh	r2, [r3, #0]
	            pstate = S_FIND_START;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <comm_poll+0x174>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	        } break;
 80015d4:	e000      	b.n	80015d8 <comm_poll+0x150>
	        } break;
 80015d6:	46c0      	nop			@ (mov r8, r8)
	while (rx_cons != rx_dma_head){
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <comm_poll+0x178>)
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <comm_poll+0x170>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d000      	beq.n	80015e8 <comm_poll+0x160>
 80015e6:	e759      	b.n	800149c <comm_poll+0x14>
 80015e8:	e002      	b.n	80015f0 <comm_poll+0x168>
	            if (!have_bytes(start_pos, 3)) return;  // wait for more
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	e000      	b.n	80015f0 <comm_poll+0x168>
	            if (!have_bytes(start_pos, want_len)) return;  // not all bytes here yet
 80015ee:	46c0      	nop			@ (mov r8, r8)

	        } // switch
	    }
}
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b003      	add	sp, #12
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	200002c0 	.word	0x200002c0
 80015fc:	200002c4 	.word	0x200002c4
 8001600:	200002c2 	.word	0x200002c2
 8001604:	800001ff 	.word	0x800001ff
 8001608:	fffffe00 	.word	0xfffffe00
 800160c:	000001ff 	.word	0x000001ff
 8001610:	200002c6 	.word	0x200002c6
 8001614:	200002c8 	.word	0x200002c8
 8001618:	200003d0 	.word	0x200003d0

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_DMA_Init+0x48>)
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_DMA_Init+0x48>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <MX_DMA_Init+0x48>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2009      	movs	r0, #9
 8001640:	f002 fb9e 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001644:	2009      	movs	r0, #9
 8001646:	f002 fbb0 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	200a      	movs	r0, #10
 8001650:	f002 fb96 	bl	8003d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001654:	200a      	movs	r0, #10
 8001656:	f002 fba8 	bl	8003daa <HAL_NVIC_EnableIRQ>

}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	40021000 	.word	0x40021000

08001668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	240c      	movs	r4, #12
 8001670:	193b      	adds	r3, r7, r4
 8001672:	0018      	movs	r0, r3
 8001674:	2314      	movs	r3, #20
 8001676:	001a      	movs	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	f006 fb02 	bl	8007c82 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800167e:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <MX_GPIO_Init+0xc4>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <MX_GPIO_Init+0xc4>)
 8001684:	2180      	movs	r1, #128	@ 0x80
 8001686:	03c9      	lsls	r1, r1, #15
 8001688:	430a      	orrs	r2, r1
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <MX_GPIO_Init+0xc4>)
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	03db      	lsls	r3, r3, #15
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <MX_GPIO_Init+0xc4>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <MX_GPIO_Init+0xc4>)
 80016a0:	2180      	movs	r1, #128	@ 0x80
 80016a2:	0289      	lsls	r1, r1, #10
 80016a4:	430a      	orrs	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_GPIO_Init+0xc4>)
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <MX_GPIO_Init+0xc4>)
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <MX_GPIO_Init+0xc4>)
 80016bc:	2180      	movs	r1, #128	@ 0x80
 80016be:	02c9      	lsls	r1, r1, #11
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <MX_GPIO_Init+0xc4>)
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	4013      	ands	r3, r2
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_GPIO_Init+0xc8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	0018      	movs	r0, r3
 80016da:	f002 ff1e 	bl	800451a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	2201      	movs	r2, #1
 80016e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <MX_GPIO_Init+0xc8>)
 80016fa:	0019      	movs	r1, r3
 80016fc:	0010      	movs	r0, r2
 80016fe:	f002 fd87 	bl	8004210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001702:	0021      	movs	r1, r4
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2201      	movs	r2, #1
 8001714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	187b      	adds	r3, r7, r1
 8001718:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <MX_GPIO_Init+0xc8>)
 800171a:	0019      	movs	r1, r3
 800171c:	0010      	movs	r0, r2
 800171e:	f002 fd77 	bl	8004210 <HAL_GPIO_Init>

}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b009      	add	sp, #36	@ 0x24
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400

08001734 <hx711_udelay_ticks>:

#include "hx711.h"

// small ~sub-microsecond delay; exact value not critical.
// We only need to ensure SCK high time is short (<60us).
static inline void hx711_udelay_ticks(int n){
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  for (volatile int i = 0; i < n; i++) __NOP();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e003      	b.n	800174a <hx711_udelay_ticks+0x16>
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dcf7      	bgt.n	8001742 <hx711_udelay_ticks+0xe>
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b004      	add	sp, #16
 800175a:	bd80      	pop	{r7, pc}

0800175c <hx711_sck_high>:
static inline void hx711_sck_high(void){ HAL_GPIO_WritePin(HX711_SCK_GPIO, HX711_SCK_PIN, GPIO_PIN_SET); }
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <hx711_sck_high+0x18>)
 8001762:	2201      	movs	r2, #1
 8001764:	2101      	movs	r1, #1
 8001766:	0018      	movs	r0, r3
 8001768:	f002 fed7 	bl	800451a <HAL_GPIO_WritePin>
 800176c:	46c0      	nop			@ (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	48000400 	.word	0x48000400

08001778 <hx711_sck_low>:
static inline void hx711_sck_low (void){ HAL_GPIO_WritePin(HX711_SCK_GPIO, HX711_SCK_PIN, GPIO_PIN_RESET); }
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <hx711_sck_low+0x18>)
 800177e:	2200      	movs	r2, #0
 8001780:	2101      	movs	r1, #1
 8001782:	0018      	movs	r0, r3
 8001784:	f002 fec9 	bl	800451a <HAL_GPIO_WritePin>
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	48000400 	.word	0x48000400

08001794 <hx711_dout>:
static inline int  hx711_dout(void){ return HAL_GPIO_ReadPin(HX711_DOUT_GPIO, HX711_DOUT_PIN) ? 1 : 0; }
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <hx711_dout+0x1c>)
 800179a:	2102      	movs	r1, #2
 800179c:	0018      	movs	r0, r3
 800179e:	f002 fe9f 	bl	80044e0 <HAL_GPIO_ReadPin>
 80017a2:	0003      	movs	r3, r0
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	4193      	sbcs	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	48000400 	.word	0x48000400

080017b4 <hx711_dout_level>:

// public: simple pin read (used by telemetry_service)
int hx711_dout_level(void){ return hx711_dout(); }
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	f7ff ffec 	bl	8001794 <hx711_dout>
 80017bc:	0003      	movs	r3, r0
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <hx711_init>:

static inline void short_pulse(void){
  for (volatile int i=0;i<30;i++) __NOP();
}

void hx711_init(void){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  // Ensure SCK is low at idle; high >60us would power down the HX711.
  hx711_sck_low();
 80017c8:	f7ff ffd6 	bl	8001778 <hx711_sck_low>
}
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <hx711_read_raw>:

int hx711_read_raw(int32_t *out, uint32_t timeout_ms)
{
 80017d2:	b590      	push	{r4, r7, lr}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
  uint32_t t0 = HAL_GetTick();
 80017dc:	f001 fc4e 	bl	800307c <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]

  // 1) wait for data ready (DOUT low) or timeout
  while (hx711_dout()){
 80017e4:	e009      	b.n	80017fa <hx711_read_raw+0x28>
    if ((HAL_GetTick() - t0) >= timeout_ms) return 0;
 80017e6:	f001 fc49 	bl	800307c <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d801      	bhi.n	80017fa <hx711_read_raw+0x28>
 80017f6:	2300      	movs	r3, #0
 80017f8:	e03b      	b.n	8001872 <hx711_read_raw+0xa0>
  while (hx711_dout()){
 80017fa:	f7ff ffcb 	bl	8001794 <hx711_dout>
 80017fe:	1e03      	subs	r3, r0, #0
 8001800:	d1f1      	bne.n	80017e6 <hx711_read_raw+0x14>
  }

  // 2) clock out 24 bits, MSB first
  uint32_t v = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 24; i++){
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e017      	b.n	800183c <hx711_read_raw+0x6a>
    hx711_sck_high();
 800180c:	f7ff ffa6 	bl	800175c <hx711_sck_high>
    hx711_udelay_ticks(30);            // short high pulse
 8001810:	201e      	movs	r0, #30
 8001812:	f7ff ff8f 	bl	8001734 <hx711_udelay_ticks>
    v = (v << 1) | (hx711_dout() ? 1u : 0u);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005c      	lsls	r4, r3, #1
 800181a:	f7ff ffbb 	bl	8001794 <hx711_dout>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d001      	beq.n	8001826 <hx711_read_raw+0x54>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <hx711_read_raw+0x56>
 8001826:	2300      	movs	r3, #0
 8001828:	4323      	orrs	r3, r4
 800182a:	617b      	str	r3, [r7, #20]
    hx711_sck_low();
 800182c:	f7ff ffa4 	bl	8001778 <hx711_sck_low>
    hx711_udelay_ticks(30);
 8001830:	201e      	movs	r0, #30
 8001832:	f7ff ff7f 	bl	8001734 <hx711_udelay_ticks>
  for (int i = 0; i < 24; i++){
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3301      	adds	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b17      	cmp	r3, #23
 8001840:	dde4      	ble.n	800180c <hx711_read_raw+0x3a>
  }

  // 3) set GAIN for NEXT conversion (128 = +1 extra clock)
  hx711_sck_high();
 8001842:	f7ff ff8b 	bl	800175c <hx711_sck_high>
  hx711_udelay_ticks(30);
 8001846:	201e      	movs	r0, #30
 8001848:	f7ff ff74 	bl	8001734 <hx711_udelay_ticks>
  hx711_sck_low();
 800184c:	f7ff ff94 	bl	8001778 <hx711_sck_low>
  hx711_udelay_ticks(30);
 8001850:	201e      	movs	r0, #30
 8001852:	f7ff ff6f 	bl	8001734 <hx711_udelay_ticks>

  // 4) sign-extend 24-bit two's complement to 32-bit
  if (v & 0x800000u) v |= 0xFF000000u;
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	4013      	ands	r3, r2
 800185e:	d004      	beq.n	800186a <hx711_read_raw+0x98>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	22ff      	movs	r2, #255	@ 0xff
 8001864:	0612      	lsls	r2, r2, #24
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
  *out = (int32_t)v;
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]
  return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b007      	add	sp, #28
 8001878:	bd90      	pop	{r4, r7, pc}
	...

0800187c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <MX_I2C1_Init+0x74>)
 8001882:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <MX_I2C1_Init+0x78>)
 8001884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_I2C1_Init+0x74>)
 8001888:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <MX_I2C1_Init+0x7c>)
 800188a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_I2C1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_I2C1_Init+0x74>)
 8001894:	2201      	movs	r2, #1
 8001896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MX_I2C1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018b8:	0018      	movs	r0, r3
 80018ba:	f002 fe4b 	bl	8004554 <HAL_I2C_Init>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018c2:	f000 ffe9 	bl	8002898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	0018      	movs	r0, r3
 80018cc:	f002 fee8 	bl	80046a0 <HAL_I2CEx_ConfigAnalogFilter>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018d4:	f000 ffe0 	bl	8002898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <MX_I2C1_Init+0x74>)
 80018da:	2100      	movs	r1, #0
 80018dc:	0018      	movs	r0, r3
 80018de:	f002 ff2b 	bl	8004738 <HAL_I2CEx_ConfigDigitalFilter>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018e6:	f000 ffd7 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200004d0 	.word	0x200004d0
 80018f4:	40005400 	.word	0x40005400
 80018f8:	00201d2b 	.word	0x00201d2b

080018fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08b      	sub	sp, #44	@ 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	2414      	movs	r4, #20
 8001906:	193b      	adds	r3, r7, r4
 8001908:	0018      	movs	r0, r3
 800190a:	2314      	movs	r3, #20
 800190c:	001a      	movs	r2, r3
 800190e:	2100      	movs	r1, #0
 8001910:	f006 f9b7 	bl	8007c82 <memset>
  if(i2cHandle->Instance==I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_I2C_MspInit+0xd8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d156      	bne.n	80019cc <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	0289      	lsls	r1, r1, #10
 8001928:	430a      	orrs	r2, r1
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	02c9      	lsls	r1, r1, #11
 8001944:	430a      	orrs	r2, r1
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	02db      	lsls	r3, r3, #11
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001956:	193b      	adds	r3, r7, r4
 8001958:	2280      	movs	r2, #128	@ 0x80
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	193b      	adds	r3, r7, r4
 8001960:	2212      	movs	r2, #18
 8001962:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	193b      	adds	r3, r7, r4
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2203      	movs	r2, #3
 800196e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2204      	movs	r2, #4
 8001974:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	193a      	adds	r2, r7, r4
 8001978:	2390      	movs	r3, #144	@ 0x90
 800197a:	05db      	lsls	r3, r3, #23
 800197c:	0011      	movs	r1, r2
 800197e:	0018      	movs	r0, r3
 8001980:	f002 fc46 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	0021      	movs	r1, r4
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2212      	movs	r2, #18
 8001990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2203      	movs	r2, #3
 800199c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2201      	movs	r2, #1
 80019a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <HAL_I2C_MspInit+0xe0>)
 80019a8:	0019      	movs	r1, r3
 80019aa:	0010      	movs	r0, r2
 80019ac:	f002 fc30 	bl	8004210 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	0389      	lsls	r1, r1, #14
 80019ba:	430a      	orrs	r2, r1
 80019bc:	61da      	str	r2, [r3, #28]
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_I2C_MspInit+0xdc>)
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	039b      	lsls	r3, r3, #14
 80019c6:	4013      	ands	r3, r2
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b00b      	add	sp, #44	@ 0x2c
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	40005400 	.word	0x40005400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000400 	.word	0x48000400

080019e0 <ema_u32>:
#define MAGNETS                 28
#define POLE_PAIRS              (MAGNETS/2)   // = 14
#define PULSES_PER_ELEC_REV     1             // try 1 first; if RPM is off by ×3 or ×6, set to 3 or 6
#define TACH_PULSES_PER_MECHREV (POLE_PAIRS * PULSES_PER_ELEC_REV)  // 14, 42, or 84 typically

static inline uint32_t ema_u32(uint32_t old, uint32_t x) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    return (old == 0u) ? x : ((old * ((1u<<EMA_SHIFT)-1u) + x) >> EMA_SHIFT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <ema_u32+0x20>
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	0013      	movs	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	189a      	adds	r2, r3, r2
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	e000      	b.n	8001a02 <ema_u32+0x22>
 8001a00:	683b      	ldr	r3, [r7, #0]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <esc_apply_hw>:
static volatile ic_ch_t g_ic[2];  // [0]=CH1 (PA5), [1]=CH2 (PB3)
static volatile uint32_t ic_irq_count = 0;  // keep this (telemetry)
static volatile uint32_t ic1_irq = 0, ic2_irq = 0;
static const uint32_t TIMER_HZ = 1000000u; // 1 MHz after PSC=47

static inline void esc_apply_hw(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, g_esc1_us);
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <esc_apply_hw+0x20>)
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <esc_apply_hw+0x24>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, g_esc2_us);
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <esc_apply_hw+0x28>)
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <esc_apply_hw+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	2000000a 	.word	0x2000000a
 8001a30:	20000574 	.word	0x20000574
 8001a34:	2000000c 	.word	0x2000000c

08001a38 <esc_init>:

static void esc_init(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  // start PWM outputs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a3c:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <esc_init+0x24>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 fc9b 	bl	800537c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <esc_init+0x24>)
 8001a48:	210c      	movs	r1, #12
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f003 fc96 	bl	800537c <HAL_TIM_PWM_Start>
  esc_apply_hw();
 8001a50:	f7ff ffdc 	bl	8001a0c <esc_apply_hw>
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	20000574 	.word	0x20000574

08001a60 <esc_set_us>:

static void esc_set_us(uint32_t ch, uint32_t us){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  if (us < 1050) us = 1050;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa8 <esc_set_us+0x48>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d801      	bhi.n	8001a76 <esc_set_us+0x16>
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <esc_set_us+0x4c>)
 8001a74:	603b      	str	r3, [r7, #0]
  if (us > 1940) us = 1940;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <esc_set_us+0x50>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <esc_set_us+0x22>
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <esc_set_us+0x50>)
 8001a80:	603b      	str	r3, [r7, #0]
  if (ch == 1) g_esc1_us = (uint16_t)us;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d104      	bne.n	8001a92 <esc_set_us+0x32>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <esc_set_us+0x54>)
 8001a8e:	801a      	strh	r2, [r3, #0]
 8001a90:	e003      	b.n	8001a9a <esc_set_us+0x3a>
  else         g_esc2_us = (uint16_t)us;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <esc_set_us+0x58>)
 8001a98:	801a      	strh	r2, [r3, #0]
  esc_apply_hw();
 8001a9a:	f7ff ffb7 	bl	8001a0c <esc_apply_hw>
}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	00000419 	.word	0x00000419
 8001aac:	0000041a 	.word	0x0000041a
 8001ab0:	00000794 	.word	0x00000794
 8001ab4:	2000000a 	.word	0x2000000a
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <adc_try_start>:
#define VREFINT_CAL_ADDR  ((uint16_t*)0x1FFFF7BA)  // STM32F0 ref manual
#endif
#define ADC_FULL_SCALE 4095u


static inline void adc_try_start(void){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    HAL_ADC_Stop_DMA(&hadc);  // in case something was half-started
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <adc_try_start+0x58>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f001 fca6 	bl	8003414 <HAL_ADC_Stop_DMA>
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK) { g_adc_ok = 0; return; }
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <adc_try_start+0x58>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f002 f804 	bl	8003ad8 <HAL_ADCEx_Calibration_Start>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d003      	beq.n	8001adc <adc_try_start+0x20>
 8001ad4:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <adc_try_start+0x5c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e018      	b.n	8001b0e <adc_try_start+0x52>
    if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)g_adc, ADC_COUNT) != HAL_OK)   { g_adc_ok = 0; return; }
 8001adc:	490f      	ldr	r1, [pc, #60]	@ (8001b1c <adc_try_start+0x60>)
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <adc_try_start+0x58>)
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 fc14 	bl	8003310 <HAL_ADC_Start_DMA>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d003      	beq.n	8001af4 <adc_try_start+0x38>
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <adc_try_start+0x5c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e00c      	b.n	8001b0e <adc_try_start+0x52>
    __HAL_DMA_DISABLE_IT(hadc.DMA_Handle, DMA_IT_HT | DMA_IT_TC | DMA_IT_TE);
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <adc_try_start+0x58>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <adc_try_start+0x58>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	210e      	movs	r1, #14
 8001b04:	438a      	bics	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
    g_adc_ok = 1;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <adc_try_start+0x5c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
}
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	20000038 	.word	0x20000038
 8001b18:	20000542 	.word	0x20000542
 8001b1c:	20000538 	.word	0x20000538

08001b20 <current_calibrate_zero>:

static inline void current_calibrate_zero()
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b092      	sub	sp, #72	@ 0x48
 8001b24:	af00      	add	r7, sp, #0
	uint64_t acc1=0, acc2=0; uint32_t ok=0;
 8001b26:	2200      	movs	r2, #0
 8001b28:	2300      	movs	r3, #0
 8001b2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2300      	movs	r3, #0
 8001b32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b36:	2300      	movs	r3, #0
 8001b38:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t vref_cal = *VREFINT_CAL_ADDR;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <current_calibrate_zero+0x168>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
	if (vref_cal < 1000 || vref_cal > 3000) vref_cal = 1500;
 8001b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b42:	23fa      	movs	r3, #250	@ 0xfa
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d303      	bcc.n	8001b52 <current_calibrate_zero+0x32>
 8001b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c8c <current_calibrate_zero+0x16c>)
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d901      	bls.n	8001b56 <current_calibrate_zero+0x36>
 8001b52:	4b4f      	ldr	r3, [pc, #316]	@ (8001c90 <current_calibrate_zero+0x170>)
 8001b54:	633b      	str	r3, [r7, #48]	@ 0x30

	for (uint8_t i=0; i<20; ++i){
 8001b56:	232f      	movs	r3, #47	@ 0x2f
 8001b58:	18fa      	adds	r2, r7, r3
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	7013      	strb	r3, [r2, #0]
 8001b5e:	e06a      	b.n	8001c36 <current_calibrate_zero+0x116>
		uint16_t raw_ref = g_adc[ADC_IDX_VREF];
 8001b60:	212c      	movs	r1, #44	@ 0x2c
 8001b62:	187a      	adds	r2, r7, r1
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <current_calibrate_zero+0x174>)
 8001b66:	891b      	ldrh	r3, [r3, #8]
 8001b68:	8013      	strh	r3, [r2, #0]
		if (!raw_ref) continue;
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d05a      	beq.n	8001c28 <current_calibrate_zero+0x108>
		uint32_t vdd_mV = (3300u * vref_cal) / raw_ref;
 8001b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b74:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <current_calibrate_zero+0x178>)
 8001b76:	435a      	muls	r2, r3
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	0010      	movs	r0, r2
 8001b80:	f7fe fac2 	bl	8000108 <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
		acc1 += (((uint64_t)g_adc[ADC_IDX_I1] * vdd_mV + 2047) / 4095u);
 8001b88:	4b42      	ldr	r3, [pc, #264]	@ (8001c94 <current_calibrate_zero+0x174>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	6a38      	ldr	r0, [r7, #32]
 8001ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ba4:	f7fe fb80 	bl	80002a8 <__aeabi_lmul>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	000b      	movs	r3, r1
 8001bac:	0010      	movs	r0, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8001c9c <current_calibrate_zero+0x17c>)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	1880      	adds	r0, r0, r2
 8001bb6:	4159      	adcs	r1, r3
 8001bb8:	4a39      	ldr	r2, [pc, #228]	@ (8001ca0 <current_calibrate_zero+0x180>)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f7fe fb54 	bl	8000268 <__aeabi_uldivmod>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	000b      	movs	r3, r1
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bcc:	1812      	adds	r2, r2, r0
 8001bce:	414b      	adcs	r3, r1
 8001bd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001bd2:	647b      	str	r3, [r7, #68]	@ 0x44
		acc2 += (((uint64_t)g_adc[ADC_IDX_I2] * vdd_mV + 2047) / 4095u);
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <current_calibrate_zero+0x174>)
 8001bd6:	885b      	ldrh	r3, [r3, #2]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6938      	ldr	r0, [r7, #16]
 8001bee:	6979      	ldr	r1, [r7, #20]
 8001bf0:	f7fe fb5a 	bl	80002a8 <__aeabi_lmul>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	000b      	movs	r3, r1
 8001bf8:	0010      	movs	r0, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	4a27      	ldr	r2, [pc, #156]	@ (8001c9c <current_calibrate_zero+0x17c>)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	1880      	adds	r0, r0, r2
 8001c02:	4159      	adcs	r1, r3
 8001c04:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <current_calibrate_zero+0x180>)
 8001c06:	2300      	movs	r3, #0
 8001c08:	f7fe fb2e 	bl	8000268 <__aeabi_uldivmod>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	000b      	movs	r3, r1
 8001c10:	0010      	movs	r0, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c18:	1812      	adds	r2, r2, r0
 8001c1a:	414b      	adcs	r3, r1
 8001c1c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ok++;
 8001c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c22:	3301      	adds	r3, #1
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c26:	e000      	b.n	8001c2a <current_calibrate_zero+0x10a>
		if (!raw_ref) continue;
 8001c28:	46c0      	nop			@ (mov r8, r8)
	for (uint8_t i=0; i<20; ++i){
 8001c2a:	232f      	movs	r3, #47	@ 0x2f
 8001c2c:	18fa      	adds	r2, r7, r3
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	7013      	strb	r3, [r2, #0]
 8001c36:	232f      	movs	r3, #47	@ 0x2f
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b13      	cmp	r3, #19
 8001c3e:	d98f      	bls.n	8001b60 <current_calibrate_zero+0x40>
	}
	if (ok){
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01b      	beq.n	8001c7e <current_calibrate_zero+0x15e>
		g_i1_zero_mV = (uint32_t)(acc1/ok);
 8001c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c56:	f7fe fb07 	bl	8000268 <__aeabi_uldivmod>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	000b      	movs	r3, r1
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <current_calibrate_zero+0x184>)
 8001c60:	601a      	str	r2, [r3, #0]
		g_i2_zero_mV = (uint32_t)(acc2/ok);
 8001c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c64:	001c      	movs	r4, r3
 8001c66:	2300      	movs	r3, #0
 8001c68:	001d      	movs	r5, r3
 8001c6a:	0022      	movs	r2, r4
 8001c6c:	002b      	movs	r3, r5
 8001c6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c72:	f7fe faf9 	bl	8000268 <__aeabi_uldivmod>
 8001c76:	0002      	movs	r2, r0
 8001c78:	000b      	movs	r3, r1
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <current_calibrate_zero+0x188>)
 8001c7c:	601a      	str	r2, [r3, #0]
	}

}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b012      	add	sp, #72	@ 0x48
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	1ffff7ba 	.word	0x1ffff7ba
 8001c8c:	00000bb8 	.word	0x00000bb8
 8001c90:	000005dc 	.word	0x000005dc
 8001c94:	20000538 	.word	0x20000538
 8001c98:	00000ce4 	.word	0x00000ce4
 8001c9c:	000007ff 	.word	0x000007ff
 8001ca0:	00000fff 	.word	0x00000fff
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <adc_compute_mv>:


static inline void adc_compute_mv(void)
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cae:	b0a9      	sub	sp, #164	@ 0xa4
 8001cb0:	af00      	add	r7, sp, #0
    if (!g_adc_ok) return;
 8001cb2:	4bb4      	ldr	r3, [pc, #720]	@ (8001f84 <adc_compute_mv+0x2d8>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <adc_compute_mv+0x10>
 8001cba:	e15d      	b.n	8001f78 <adc_compute_mv+0x2cc>

    // Fixed order: [0]=PA0, [1]=PA1, [2]=PA3, [3]=PA4, [4]=VREFINT
    uint16_t raw_i1  = g_adc[ADC_IDX_I1];
 8001cbc:	2332      	movs	r3, #50	@ 0x32
 8001cbe:	2068      	movs	r0, #104	@ 0x68
 8001cc0:	181b      	adds	r3, r3, r0
 8001cc2:	19da      	adds	r2, r3, r7
 8001cc4:	4bb0      	ldr	r3, [pc, #704]	@ (8001f88 <adc_compute_mv+0x2dc>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	8013      	strh	r3, [r2, #0]
    uint16_t raw_i2  = g_adc[ADC_IDX_I2];
 8001cca:	2330      	movs	r3, #48	@ 0x30
 8001ccc:	181b      	adds	r3, r3, r0
 8001cce:	19da      	adds	r2, r3, r7
 8001cd0:	4bad      	ldr	r3, [pc, #692]	@ (8001f88 <adc_compute_mv+0x2dc>)
 8001cd2:	885b      	ldrh	r3, [r3, #2]
 8001cd4:	8013      	strh	r3, [r2, #0]
    uint16_t raw_v1  = g_adc[ADC_IDX_V1];
 8001cd6:	232e      	movs	r3, #46	@ 0x2e
 8001cd8:	181b      	adds	r3, r3, r0
 8001cda:	19da      	adds	r2, r3, r7
 8001cdc:	4baa      	ldr	r3, [pc, #680]	@ (8001f88 <adc_compute_mv+0x2dc>)
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	8013      	strh	r3, [r2, #0]
    uint16_t raw_v2  = g_adc[ADC_IDX_V2];
 8001ce2:	232c      	movs	r3, #44	@ 0x2c
 8001ce4:	181b      	adds	r3, r3, r0
 8001ce6:	19da      	adds	r2, r3, r7
 8001ce8:	4ba7      	ldr	r3, [pc, #668]	@ (8001f88 <adc_compute_mv+0x2dc>)
 8001cea:	88db      	ldrh	r3, [r3, #6]
 8001cec:	8013      	strh	r3, [r2, #0]
    uint16_t raw_ref = g_adc[ADC_IDX_VREF];
 8001cee:	212a      	movs	r1, #42	@ 0x2a
 8001cf0:	180b      	adds	r3, r1, r0
 8001cf2:	19da      	adds	r2, r3, r7
 8001cf4:	4ba4      	ldr	r3, [pc, #656]	@ (8001f88 <adc_compute_mv+0x2dc>)
 8001cf6:	891b      	ldrh	r3, [r3, #8]
 8001cf8:	8013      	strh	r3, [r2, #0]
    if (raw_ref == 0) return;  // avoid div/0 while VREFINT wakes up
 8001cfa:	180b      	adds	r3, r1, r0
 8001cfc:	19db      	adds	r3, r3, r7
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d100      	bne.n	8001d06 <adc_compute_mv+0x5a>
 8001d04:	e13a      	b.n	8001f7c <adc_compute_mv+0x2d0>

    // --- VDD from factory calibration ---
    uint32_t vref_cal = *VREFINT_CAL_ADDR;           // ~1500 @ 3.3V
 8001d06:	4ba1      	ldr	r3, [pc, #644]	@ (8001f8c <adc_compute_mv+0x2e0>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	219c      	movs	r1, #156	@ 0x9c
 8001d0c:	187a      	adds	r2, r7, r1
 8001d0e:	6013      	str	r3, [r2, #0]
    if (vref_cal < 1000 || vref_cal > 3000) vref_cal = 1500;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	23fa      	movs	r3, #250	@ 0xfa
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d304      	bcc.n	8001d26 <adc_compute_mv+0x7a>
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b9b      	ldr	r3, [pc, #620]	@ (8001f90 <adc_compute_mv+0x2e4>)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d903      	bls.n	8001d2e <adc_compute_mv+0x82>
 8001d26:	4b9b      	ldr	r3, [pc, #620]	@ (8001f94 <adc_compute_mv+0x2e8>)
 8001d28:	229c      	movs	r2, #156	@ 0x9c
 8001d2a:	18ba      	adds	r2, r7, r2
 8001d2c:	6013      	str	r3, [r2, #0]
    uint32_t vdd_mV = (3300u * vref_cal) / raw_ref;
 8001d2e:	239c      	movs	r3, #156	@ 0x9c
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b98      	ldr	r3, [pc, #608]	@ (8001f98 <adc_compute_mv+0x2ec>)
 8001d36:	435a      	muls	r2, r3
 8001d38:	232a      	movs	r3, #42	@ 0x2a
 8001d3a:	2168      	movs	r1, #104	@ 0x68
 8001d3c:	185b      	adds	r3, r3, r1
 8001d3e:	19db      	adds	r3, r3, r7
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	0019      	movs	r1, r3
 8001d44:	0010      	movs	r0, r2
 8001d46:	f7fe f9df 	bl	8000108 <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	268c      	movs	r6, #140	@ 0x8c
 8001d4e:	19b8      	adds	r0, r7, r6
 8001d50:	6003      	str	r3, [r0, #0]

    // --- Node voltages (mV) at each ADC pin (64-bit to avoid overflow later) ---
    uint32_t node_i1_mV = (uint32_t)(((uint64_t)raw_i1 * vdd_mV + 2047) / 4095u);
 8001d52:	2332      	movs	r3, #50	@ 0x32
 8001d54:	2268      	movs	r2, #104	@ 0x68
 8001d56:	189b      	adds	r3, r3, r2
 8001d58:	19db      	adds	r3, r3, r7
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d60:	2300      	movs	r3, #0
 8001d62:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d64:	19bb      	adds	r3, r7, r6
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	001c      	movs	r4, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	001d      	movs	r5, r3
 8001d6e:	0022      	movs	r2, r4
 8001d70:	002b      	movs	r3, r5
 8001d72:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001d74:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001d76:	f7fe fa97 	bl	80002a8 <__aeabi_lmul>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	000b      	movs	r3, r1
 8001d7e:	0010      	movs	r0, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	4a86      	ldr	r2, [pc, #536]	@ (8001f9c <adc_compute_mv+0x2f0>)
 8001d84:	2300      	movs	r3, #0
 8001d86:	1880      	adds	r0, r0, r2
 8001d88:	4159      	adcs	r1, r3
 8001d8a:	4a85      	ldr	r2, [pc, #532]	@ (8001fa0 <adc_compute_mv+0x2f4>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f7fe fa6b 	bl	8000268 <__aeabi_uldivmod>
 8001d92:	0002      	movs	r2, r0
 8001d94:	000b      	movs	r3, r1
 8001d96:	0013      	movs	r3, r2
 8001d98:	2188      	movs	r1, #136	@ 0x88
 8001d9a:	1878      	adds	r0, r7, r1
 8001d9c:	6003      	str	r3, [r0, #0]
    uint32_t node_i2_mV = (uint32_t)(((uint64_t)raw_i2 * vdd_mV + 2047) / 4095u);
 8001d9e:	2330      	movs	r3, #48	@ 0x30
 8001da0:	2568      	movs	r5, #104	@ 0x68
 8001da2:	195b      	adds	r3, r3, r5
 8001da4:	19db      	adds	r3, r3, r7
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001dac:	2300      	movs	r3, #0
 8001dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001db0:	0034      	movs	r4, r6
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001db8:	2300      	movs	r3, #0
 8001dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001dc2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001dc4:	f7fe fa70 	bl	80002a8 <__aeabi_lmul>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	000b      	movs	r3, r1
 8001dcc:	0010      	movs	r0, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	4a72      	ldr	r2, [pc, #456]	@ (8001f9c <adc_compute_mv+0x2f0>)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	1880      	adds	r0, r0, r2
 8001dd6:	4159      	adcs	r1, r3
 8001dd8:	4a71      	ldr	r2, [pc, #452]	@ (8001fa0 <adc_compute_mv+0x2f4>)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f7fe fa44 	bl	8000268 <__aeabi_uldivmod>
 8001de0:	0002      	movs	r2, r0
 8001de2:	000b      	movs	r3, r1
 8001de4:	0013      	movs	r3, r2
 8001de6:	2284      	movs	r2, #132	@ 0x84
 8001de8:	18b8      	adds	r0, r7, r2
 8001dea:	6003      	str	r3, [r0, #0]
    uint32_t node_v1_mV = (uint32_t)(((uint64_t)raw_v1 * vdd_mV + 2047) / 4095u);
 8001dec:	232e      	movs	r3, #46	@ 0x2e
 8001dee:	1958      	adds	r0, r3, r5
 8001df0:	19c3      	adds	r3, r0, r7
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dfc:	1938      	adds	r0, r7, r4
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e02:	2300      	movs	r3, #0
 8001e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001e0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001e0e:	f7fe fa4b 	bl	80002a8 <__aeabi_lmul>
 8001e12:	0002      	movs	r2, r0
 8001e14:	000b      	movs	r3, r1
 8001e16:	0010      	movs	r0, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	4a60      	ldr	r2, [pc, #384]	@ (8001f9c <adc_compute_mv+0x2f0>)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	1880      	adds	r0, r0, r2
 8001e20:	4159      	adcs	r1, r3
 8001e22:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa0 <adc_compute_mv+0x2f4>)
 8001e24:	2300      	movs	r3, #0
 8001e26:	f7fe fa1f 	bl	8000268 <__aeabi_uldivmod>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	0013      	movs	r3, r2
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	19b8      	adds	r0, r7, r6
 8001e34:	6003      	str	r3, [r0, #0]
    uint32_t node_v2_mV = (uint32_t)(((uint64_t)raw_v2 * vdd_mV + 2047) / 4095u);
 8001e36:	232c      	movs	r3, #44	@ 0x2c
 8001e38:	1958      	adds	r0, r3, r5
 8001e3a:	19c3      	adds	r3, r0, r7
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e42:	2300      	movs	r3, #0
 8001e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e46:	1938      	adds	r0, r7, r4
 8001e48:	6803      	ldr	r3, [r0, #0]
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e58:	f7fe fa26 	bl	80002a8 <__aeabi_lmul>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	000b      	movs	r3, r1
 8001e60:	0010      	movs	r0, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	4a4d      	ldr	r2, [pc, #308]	@ (8001f9c <adc_compute_mv+0x2f0>)
 8001e66:	2300      	movs	r3, #0
 8001e68:	1880      	adds	r0, r0, r2
 8001e6a:	4159      	adcs	r1, r3
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa0 <adc_compute_mv+0x2f4>)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f7fe f9fa 	bl	8000268 <__aeabi_uldivmod>
 8001e74:	0002      	movs	r2, r0
 8001e76:	000b      	movs	r3, r1
 8001e78:	0013      	movs	r3, r2
 8001e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // --- External voltages through dividers (19:1) ---
    const uint32_t k1 = (R_HIGH1 + R_LOW1), k2 = (R_HIGH2 + R_LOW2);
 8001e7c:	4b49      	ldr	r3, [pc, #292]	@ (8001fa4 <adc_compute_mv+0x2f8>)
 8001e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e80:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <adc_compute_mv+0x2f8>)
 8001e82:	677b      	str	r3, [r7, #116]	@ 0x74
    g_vin1_mV = (uint32_t)(((uint64_t)node_v1_mV * k1 + R_LOW1/2) / R_LOW1);
 8001e84:	19b8      	adds	r0, r7, r6
 8001e86:	6803      	ldr	r3, [r0, #0]
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e9e:	f7fe fa03 	bl	80002a8 <__aeabi_lmul>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	000b      	movs	r3, r1
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa8 <adc_compute_mv+0x2fc>)
 8001eac:	2300      	movs	r3, #0
 8001eae:	1880      	adds	r0, r0, r2
 8001eb0:	4159      	adcs	r1, r3
 8001eb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fac <adc_compute_mv+0x300>)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f7fe f9d7 	bl	8000268 <__aeabi_uldivmod>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb0 <adc_compute_mv+0x304>)
 8001ec0:	601a      	str	r2, [r3, #0]
    g_vin2_mV = (uint32_t)(((uint64_t)node_v2_mV * k2 + R_LOW2/2) / R_LOW2);
 8001ec2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	69f9      	ldr	r1, [r7, #28]
 8001eda:	f7fe f9e5 	bl	80002a8 <__aeabi_lmul>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	000b      	movs	r3, r1
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	4a30      	ldr	r2, [pc, #192]	@ (8001fa8 <adc_compute_mv+0x2fc>)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	1880      	adds	r0, r0, r2
 8001eec:	4159      	adcs	r1, r3
 8001eee:	4a2f      	ldr	r2, [pc, #188]	@ (8001fac <adc_compute_mv+0x300>)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f7fe f9b9 	bl	8000268 <__aeabi_uldivmod>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	000b      	movs	r3, r1
 8001efa:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <adc_compute_mv+0x308>)
 8001efc:	601a      	str	r2, [r3, #0]


    //Current Calculation
    int32_t dv1_mV = (int32_t)node_i1_mV - (int32_t)g_i1_zero_mV;
 8001efe:	2188      	movs	r1, #136	@ 0x88
 8001f00:	1879      	adds	r1, r7, r1
 8001f02:	680a      	ldr	r2, [r1, #0]
 8001f04:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb8 <adc_compute_mv+0x30c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	673b      	str	r3, [r7, #112]	@ 0x70
    int32_t dv2_mV = (int32_t)node_i2_mV - (int32_t)g_i2_zero_mV;
 8001f0c:	2384      	movs	r3, #132	@ 0x84
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <adc_compute_mv+0x310>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // I(mA) = (dv_mV * 1000) / (mV per A)
    g_i1_mA = (int32_t)(((int64_t)dv1_mV * 1000) / I1_SENS_mV_PER_A);
 8001f1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	17db      	asrs	r3, r3, #31
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	22fa      	movs	r2, #250	@ 0xfa
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	2300      	movs	r3, #0
 8001f28:	68b8      	ldr	r0, [r7, #8]
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	f7fe f9bc 	bl	80002a8 <__aeabi_lmul>
 8001f30:	0002      	movs	r2, r0
 8001f32:	000b      	movs	r3, r1
 8001f34:	0010      	movs	r0, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	2218      	movs	r2, #24
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f7fe f970 	bl	8000220 <__aeabi_ldivmod>
 8001f40:	0002      	movs	r2, r0
 8001f42:	000b      	movs	r3, r1
 8001f44:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <adc_compute_mv+0x314>)
 8001f46:	601a      	str	r2, [r3, #0]
    g_i2_mA = (int32_t)(((int64_t)dv2_mV * 1000) / I2_SENS_mV_PER_A);
 8001f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	17db      	asrs	r3, r3, #31
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	22fa      	movs	r2, #250	@ 0xfa
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	2300      	movs	r3, #0
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	f7fe f9a5 	bl	80002a8 <__aeabi_lmul>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	000b      	movs	r3, r1
 8001f62:	0010      	movs	r0, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	2218      	movs	r2, #24
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f7fe f959 	bl	8000220 <__aeabi_ldivmod>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	000b      	movs	r3, r1
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <adc_compute_mv+0x318>)
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e002      	b.n	8001f7e <adc_compute_mv+0x2d2>
    if (!g_adc_ok) return;
 8001f78:	46c0      	nop			@ (mov r8, r8)
 8001f7a:	e000      	b.n	8001f7e <adc_compute_mv+0x2d2>
    if (raw_ref == 0) return;  // avoid div/0 while VREFINT wakes up
 8001f7c:	46c0      	nop			@ (mov r8, r8)
}
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b029      	add	sp, #164	@ 0xa4
 8001f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f84:	20000542 	.word	0x20000542
 8001f88:	20000538 	.word	0x20000538
 8001f8c:	1ffff7ba 	.word	0x1ffff7ba
 8001f90:	00000bb8 	.word	0x00000bb8
 8001f94:	000005dc 	.word	0x000005dc
 8001f98:	00000ce4 	.word	0x00000ce4
 8001f9c:	000007ff 	.word	0x000007ff
 8001fa0:	00000fff 	.word	0x00000fff
 8001fa4:	0002e630 	.word	0x0002e630
 8001fa8:	00001388 	.word	0x00001388
 8001fac:	00002710 	.word	0x00002710
 8001fb0:	20000544 	.word	0x20000544
 8001fb4:	20000548 	.word	0x20000548
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	20000524 	.word	0x20000524
 8001fc4:	20000528 	.word	0x20000528

08001fc8 <comm_on_frame>:


void comm_on_frame(const comm_frame_t *f)
{
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	b0b2      	sub	sp, #200	@ 0xc8
 8001fcc:	af04      	add	r7, sp, #16
 8001fce:	6078      	str	r0, [r7, #4]
	// Handle Ping
    if (f->msg_type == MT_PING) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	789b      	ldrb	r3, [r3, #2]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d13e      	bne.n	8002056 <comm_on_frame+0x8e>
        uint64_t host_ms64 = 0;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2490      	movs	r4, #144	@ 0x90
 8001fde:	1939      	adds	r1, r7, r4
 8001fe0:	600a      	str	r2, [r1, #0]
 8001fe2:	604b      	str	r3, [r1, #4]
        (void)tlv_find_u64(f->payload, f->payload_len, TLV_TS_HOST_MS, &host_ms64);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6898      	ldr	r0, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	8999      	ldrh	r1, [r3, #12]
 8001fec:	193b      	adds	r3, r7, r4
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f7fe ff3a 	bl	8000e68 <tlv_find_u64>

        uint8_t buf[24]; uint8_t *w = buf;
 8001ff4:	2578      	movs	r5, #120	@ 0x78
 8001ff6:	197b      	adds	r3, r7, r5
 8001ff8:	2198      	movs	r1, #152	@ 0x98
 8001ffa:	187a      	adds	r2, r7, r1
 8001ffc:	6013      	str	r3, [r2, #0]
        w = tlv_put_u64(w, TLV_TS_HOST_MS, host_ms64);   // echo host 64-bit time
 8001ffe:	193b      	adds	r3, r7, r4
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	000c      	movs	r4, r1
 8002006:	1939      	adds	r1, r7, r4
 8002008:	6808      	ldr	r0, [r1, #0]
 800200a:	2102      	movs	r1, #2
 800200c:	f7fe feaa 	bl	8000d64 <tlv_put_u64>
 8002010:	0003      	movs	r3, r0
 8002012:	193a      	adds	r2, r7, r4
 8002014:	6013      	str	r3, [r2, #0]
        w = tlv_put_u32(w, TLV_TS_MS, HAL_GetTick());    // device uptime (u32)
 8002016:	f001 f831 	bl	800307c <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	193b      	adds	r3, r7, r4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	0018      	movs	r0, r3
 8002024:	f7fe fcc1 	bl	80009aa <tlv_put_u32>
 8002028:	0003      	movs	r3, r0
 800202a:	0022      	movs	r2, r4
 800202c:	18b9      	adds	r1, r7, r2
 800202e:	600b      	str	r3, [r1, #0]

        comm_send(f->tx_id, f->rx_id, MT_PING, 0x01, 0, buf, (uint16_t)(w - buf));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7858      	ldrb	r0, [r3, #1]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7819      	ldrb	r1, [r3, #0]
 8002038:	197b      	adds	r3, r7, r5
 800203a:	18ba      	adds	r2, r7, r2
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	197b      	adds	r3, r7, r5
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	2300      	movs	r3, #0
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	2205      	movs	r2, #5
 8002050:	f7ff f88c 	bl	800116c <comm_send>
 8002054:	e165      	b.n	8002322 <comm_on_frame+0x35a>
        return;
    }
    // Handle Command
    if (f->msg_type == MT_COMMAND) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	789b      	ldrb	r3, [r3, #2]
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d000      	beq.n	8002060 <comm_on_frame+0x98>
 800205e:	e160      	b.n	8002322 <comm_on_frame+0x35a>
            // Parse the command code (u32)
            uint32_t cmd = 0xFFFFFFFFu;
 8002060:	2301      	movs	r3, #1
 8002062:	425b      	negs	r3, r3
 8002064:	677b      	str	r3, [r7, #116]	@ 0x74
            (void)tlv_find_u32(f->payload, f->payload_len, TLV_CMD_CODE, &cmd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6898      	ldr	r0, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8999      	ldrh	r1, [r3, #12]
 800206e:	2374      	movs	r3, #116	@ 0x74
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	224f      	movs	r2, #79	@ 0x4f
 8002074:	f7fe fdf5 	bl	8000c62 <tlv_find_u32>

            uint32_t result = 0; // OK by default
 8002078:	2300      	movs	r3, #0
 800207a:	22b4      	movs	r2, #180	@ 0xb4
 800207c:	18ba      	adds	r2, r7, r2
 800207e:	6013      	str	r3, [r2, #0]

			if (cmd == CMD_ECHO) {
 8002080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002082:	2b00      	cmp	r3, #0
 8002084:	d100      	bne.n	8002088 <comm_on_frame+0xc0>
 8002086:	e119      	b.n	80022bc <comm_on_frame+0x2f4>
				// nothing else to do
			}
			else if (cmd == CMD_SNAPSHOT) {
 8002088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800208a:	2b01      	cmp	r3, #1
 800208c:	d13f      	bne.n	800210e <comm_on_frame+0x146>
				// Build one telemetry frame (MT_TEL_A) with a timestamp TLV for now
				uint8_t t[16]; uint8_t *tw = t;
 800208e:	2354      	movs	r3, #84	@ 0x54
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	24b0      	movs	r4, #176	@ 0xb0
 8002094:	193a      	adds	r2, r7, r4
 8002096:	6013      	str	r3, [r2, #0]

				// Read HX711 (timeout e.g. 50ms; pick 10SPS or 80SPS rate on your module pin)
				int32_t raw = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	653b      	str	r3, [r7, #80]	@ 0x50
				int ok = hx711_read_raw(&raw, 50);
 800209c:	2350      	movs	r3, #80	@ 0x50
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2132      	movs	r1, #50	@ 0x32
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7ff fb95 	bl	80017d2 <hx711_read_raw>
 80020a8:	0003      	movs	r3, r0
 80020aa:	25a0      	movs	r5, #160	@ 0xa0
 80020ac:	197a      	adds	r2, r7, r5
 80020ae:	6013      	str	r3, [r2, #0]

				tw = tlv_put_u32(tw, TLV_TS_MS, HAL_GetTick());
 80020b0:	f000 ffe4 	bl	800307c <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2101      	movs	r1, #1
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe fc74 	bl	80009aa <tlv_put_u32>
 80020c2:	0003      	movs	r3, r0
 80020c4:	193a      	adds	r2, r7, r4
 80020c6:	6013      	str	r3, [r2, #0]

				if (ok) {
 80020c8:	197b      	adds	r3, r7, r5
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <comm_on_frame+0x11c>
					// reuse u32 helper but cast the bytes of raw (two's complement)
					tw = tlv_put_i32(tw, TLV_LOAD_RAW, raw);  // if you don’t have tlv_put_i32 yet, I can add it; else use tlv_put_u32 on (uint32_t)raw
 80020d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020d2:	193b      	adds	r3, r7, r4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2130      	movs	r1, #48	@ 0x30
 80020d8:	0018      	movs	r0, r3
 80020da:	f7fe fc9f 	bl	8000a1c <tlv_put_i32>
 80020de:	0003      	movs	r3, r0
 80020e0:	193a      	adds	r2, r7, r4
 80020e2:	6013      	str	r3, [r2, #0]
				}
				// Send telemetry to the command sender
				comm_send(f->tx_id, f->rx_id, MT_TEL_A, 0x01, /*reqid=*/0, t, (uint16_t)(tw - t));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7858      	ldrb	r0, [r3, #1]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	2454      	movs	r4, #84	@ 0x54
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	22b0      	movs	r2, #176	@ 0xb0
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	9302      	str	r3, [sp, #8]
 80020fc:	193b      	adds	r3, r7, r4
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2300      	movs	r3, #0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2301      	movs	r3, #1
 8002106:	2265      	movs	r2, #101	@ 0x65
 8002108:	f7ff f830 	bl	800116c <comm_send>
 800210c:	e0d6      	b.n	80022bc <comm_on_frame+0x2f4>
			}
			else if (cmd == CMD_STREAM) {
 800210e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002110:	2b02      	cmp	r3, #2
 8002112:	d118      	bne.n	8002146 <comm_on_frame+0x17e>
			    uint32_t per = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	64fb      	str	r3, [r7, #76]	@ 0x4c
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_STREAM_PERIOD_MS, &per);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6898      	ldr	r0, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8999      	ldrh	r1, [r3, #12]
 8002120:	234c      	movs	r3, #76	@ 0x4c
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2240      	movs	r2, #64	@ 0x40
 8002126:	f7fe fd9c 	bl	8000c62 <tlv_find_u32>

			    g_stream_period_ms = per;
 800212a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800212c:	4b7e      	ldr	r3, [pc, #504]	@ (8002328 <comm_on_frame+0x360>)
 800212e:	601a      	str	r2, [r3, #0]
			    g_next_stream_ms   = HAL_GetTick() + 1;
 8002130:	f000 ffa4 	bl	800307c <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	4b7c      	ldr	r3, [pc, #496]	@ (800232c <comm_on_frame+0x364>)
 800213a:	601a      	str	r2, [r3, #0]
			    g_stream_dest_id   = f->tx_id;          // send to whoever asked
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	785a      	ldrb	r2, [r3, #1]
 8002140:	4b7b      	ldr	r3, [pc, #492]	@ (8002330 <comm_on_frame+0x368>)
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e0ba      	b.n	80022bc <comm_on_frame+0x2f4>

			    // result = OK (0)
			}
			else if (cmd == CMD_SET_ESC) {
 8002146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002148:	2b10      	cmp	r3, #16
 800214a:	d000      	beq.n	800214e <comm_on_frame+0x186>
 800214c:	e07e      	b.n	800224c <comm_on_frame+0x284>
			    uint32_t ch = 0, us = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002152:	2300      	movs	r3, #0
 8002154:	647b      	str	r3, [r7, #68]	@ 0x44
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_ESC_CH, &ch);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6898      	ldr	r0, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8999      	ldrh	r1, [r3, #12]
 800215e:	2348      	movs	r3, #72	@ 0x48
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2260      	movs	r2, #96	@ 0x60
 8002164:	f7fe fd7d 	bl	8000c62 <tlv_find_u32>
			    (void)tlv_find_u32(f->payload, f->payload_len, TLV_ESC_US, &us);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6898      	ldr	r0, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8999      	ldrh	r1, [r3, #12]
 8002170:	2344      	movs	r3, #68	@ 0x44
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2261      	movs	r2, #97	@ 0x61
 8002176:	f7fe fd74 	bl	8000c62 <tlv_find_u32>

			    uint32_t result = 0; // OK
 800217a:	2300      	movs	r3, #0
 800217c:	22ac      	movs	r2, #172	@ 0xac
 800217e:	18b9      	adds	r1, r7, r2
 8002180:	600b      	str	r3, [r1, #0]
			    if ((ch != 1u) && (ch != 2u)) {
 8002182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002184:	2b01      	cmp	r3, #1
 8002186:	d006      	beq.n	8002196 <comm_on_frame+0x1ce>
 8002188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800218a:	2b02      	cmp	r3, #2
 800218c:	d003      	beq.n	8002196 <comm_on_frame+0x1ce>
			        result = 2; // invalid channel
 800218e:	2302      	movs	r3, #2
 8002190:	18ba      	adds	r2, r7, r2
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e013      	b.n	80021be <comm_on_frame+0x1f6>
			    } else if (us < 800 || us > 2200) { // loose input guard; hard clamp to 1050..1940
 8002196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002198:	23c8      	movs	r3, #200	@ 0xc8
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d303      	bcc.n	80021a8 <comm_on_frame+0x1e0>
 80021a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021a2:	4a64      	ldr	r2, [pc, #400]	@ (8002334 <comm_on_frame+0x36c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d904      	bls.n	80021b2 <comm_on_frame+0x1ea>
			        result = 1; // out of plausible range
 80021a8:	2301      	movs	r3, #1
 80021aa:	22ac      	movs	r2, #172	@ 0xac
 80021ac:	18ba      	adds	r2, r7, r2
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e005      	b.n	80021be <comm_on_frame+0x1f6>
			    } else {
			        esc_set_us(ch, us); // clamps internally to 1050..1940
 80021b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021b6:	0011      	movs	r1, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff fc51 	bl	8001a60 <esc_set_us>
			    }

			    uint8_t ack[24]; uint8_t *aw = ack;
 80021be:	252c      	movs	r5, #44	@ 0x2c
 80021c0:	197b      	adds	r3, r7, r5
 80021c2:	24a4      	movs	r4, #164	@ 0xa4
 80021c4:	193a      	adds	r2, r7, r4
 80021c6:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 80021c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	214f      	movs	r1, #79	@ 0x4f
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fbea 	bl	80009aa <tlv_put_u32>
 80021d6:	0003      	movs	r3, r0
 80021d8:	0021      	movs	r1, r4
 80021da:	187a      	adds	r2, r7, r1
 80021dc:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_RESULT, result);
 80021de:	23ac      	movs	r3, #172	@ 0xac
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	000c      	movs	r4, r1
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2150      	movs	r1, #80	@ 0x50
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe fbdc 	bl	80009aa <tlv_put_u32>
 80021f2:	0003      	movs	r3, r0
 80021f4:	193a      	adds	r2, r7, r4
 80021f6:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_ESC_CH,     ch);
 80021f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2160      	movs	r1, #96	@ 0x60
 8002200:	0018      	movs	r0, r3
 8002202:	f7fe fbd2 	bl	80009aa <tlv_put_u32>
 8002206:	0003      	movs	r3, r0
 8002208:	193a      	adds	r2, r7, r4
 800220a:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_ESC_US,     us);
 800220c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800220e:	193b      	adds	r3, r7, r4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2161      	movs	r1, #97	@ 0x61
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe fbc8 	bl	80009aa <tlv_put_u32>
 800221a:	0003      	movs	r3, r0
 800221c:	0021      	movs	r1, r4
 800221e:	187a      	adds	r2, r7, r1
 8002220:	6013      	str	r3, [r2, #0]
			    comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7858      	ldrb	r0, [r3, #1]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	781c      	ldrb	r4, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	799b      	ldrb	r3, [r3, #6]
 800222e:	197a      	adds	r2, r7, r5
 8002230:	1879      	adds	r1, r7, r1
 8002232:	6809      	ldr	r1, [r1, #0]
 8002234:	1a8a      	subs	r2, r1, r2
 8002236:	b292      	uxth	r2, r2
 8002238:	9202      	str	r2, [sp, #8]
 800223a:	197a      	adds	r2, r7, r5
 800223c:	9201      	str	r2, [sp, #4]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	220b      	movs	r2, #11
 8002244:	0021      	movs	r1, r4
 8002246:	f7fe ff91 	bl	800116c <comm_send>
 800224a:	e06a      	b.n	8002322 <comm_on_frame+0x35a>
			    return;
			}
			else if (cmd == CMD_CALIB_I_ZERO) {
 800224c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800224e:	2b20      	cmp	r3, #32
 8002250:	d130      	bne.n	80022b4 <comm_on_frame+0x2ec>

				current_calibrate_zero();
 8002252:	f7ff fc65 	bl	8001b20 <current_calibrate_zero>

			    uint8_t ack[32]; uint8_t *aw = ack;
 8002256:	250c      	movs	r5, #12
 8002258:	197b      	adds	r3, r7, r5
 800225a:	24a8      	movs	r4, #168	@ 0xa8
 800225c:	193a      	adds	r2, r7, r4
 800225e:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 8002260:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002262:	193b      	adds	r3, r7, r4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	214f      	movs	r1, #79	@ 0x4f
 8002268:	0018      	movs	r0, r3
 800226a:	f7fe fb9e 	bl	80009aa <tlv_put_u32>
 800226e:	0003      	movs	r3, r0
 8002270:	193a      	adds	r2, r7, r4
 8002272:	6013      	str	r3, [r2, #0]
			    aw = tlv_put_u32(aw, TLV_CMD_RESULT, 0);
 8002274:	193b      	adds	r3, r7, r4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2150      	movs	r1, #80	@ 0x50
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe fb94 	bl	80009aa <tlv_put_u32>
 8002282:	0003      	movs	r3, r0
 8002284:	0021      	movs	r1, r4
 8002286:	187a      	adds	r2, r7, r1
 8002288:	6013      	str	r3, [r2, #0]
			    comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7858      	ldrb	r0, [r3, #1]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	781c      	ldrb	r4, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	799b      	ldrb	r3, [r3, #6]
 8002296:	197a      	adds	r2, r7, r5
 8002298:	1879      	adds	r1, r7, r1
 800229a:	6809      	ldr	r1, [r1, #0]
 800229c:	1a8a      	subs	r2, r1, r2
 800229e:	b292      	uxth	r2, r2
 80022a0:	9202      	str	r2, [sp, #8]
 80022a2:	197a      	adds	r2, r7, r5
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2301      	movs	r3, #1
 80022aa:	220b      	movs	r2, #11
 80022ac:	0021      	movs	r1, r4
 80022ae:	f7fe ff5d 	bl	800116c <comm_send>
 80022b2:	e036      	b.n	8002322 <comm_on_frame+0x35a>
			    return;
			}

			else {
				result = 3; // BAD/unknown command
 80022b4:	2303      	movs	r3, #3
 80022b6:	22b4      	movs	r2, #180	@ 0xb4
 80022b8:	18ba      	adds	r2, r7, r2
 80022ba:	6013      	str	r3, [r2, #0]
			}

			// Always send an ACK for MT_COMMAND, echoing the CMD_CODE
			uint8_t ack[16]; uint8_t *aw = ack;
 80022bc:	2564      	movs	r5, #100	@ 0x64
 80022be:	197b      	adds	r3, r7, r5
 80022c0:	249c      	movs	r4, #156	@ 0x9c
 80022c2:	193a      	adds	r2, r7, r4
 80022c4:	6013      	str	r3, [r2, #0]
			aw = tlv_put_u32(aw, TLV_CMD_CODE,   cmd);
 80022c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	214f      	movs	r1, #79	@ 0x4f
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7fe fb6b 	bl	80009aa <tlv_put_u32>
 80022d4:	0003      	movs	r3, r0
 80022d6:	0021      	movs	r1, r4
 80022d8:	187a      	adds	r2, r7, r1
 80022da:	6013      	str	r3, [r2, #0]
			aw = tlv_put_u32(aw, TLV_CMD_RESULT, result);
 80022dc:	23b4      	movs	r3, #180	@ 0xb4
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	000c      	movs	r4, r1
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2150      	movs	r1, #80	@ 0x50
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7fe fb5d 	bl	80009aa <tlv_put_u32>
 80022f0:	0003      	movs	r3, r0
 80022f2:	0021      	movs	r1, r4
 80022f4:	187a      	adds	r2, r7, r1
 80022f6:	6013      	str	r3, [r2, #0]
			comm_send(f->tx_id, f->rx_id, MT_COMMAND_ACK, 0x01, f->reqid, ack, (uint16_t)(aw - ack));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7858      	ldrb	r0, [r3, #1]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781c      	ldrb	r4, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	799b      	ldrb	r3, [r3, #6]
 8002304:	197a      	adds	r2, r7, r5
 8002306:	1879      	adds	r1, r7, r1
 8002308:	6809      	ldr	r1, [r1, #0]
 800230a:	1a8a      	subs	r2, r1, r2
 800230c:	b292      	uxth	r2, r2
 800230e:	9202      	str	r2, [sp, #8]
 8002310:	197a      	adds	r2, r7, r5
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2301      	movs	r3, #1
 8002318:	220b      	movs	r2, #11
 800231a:	0021      	movs	r1, r4
 800231c:	f7fe ff26 	bl	800116c <comm_send>
			return;
 8002320:	46c0      	nop			@ (mov r8, r8)

        }
    // ...
}
 8002322:	46bd      	mov	sp, r7
 8002324:	b02e      	add	sp, #184	@ 0xb8
 8002326:	bdb0      	pop	{r4, r5, r7, pc}
 8002328:	2000052c 	.word	0x2000052c
 800232c:	20000530 	.word	0x20000530
 8002330:	20000008 	.word	0x20000008
 8002334:	00000898 	.word	0x00000898

08002338 <tach_hz_from_period_us>:

static uint32_t tach_hz_from_period_us(uint32_t us) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
        return (us ? (1000000u + us/2) / us : 0u);  // rounded
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <tach_hz_from_period_us+0x24>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <tach_hz_from_period_us+0x30>)
 800234c:	4694      	mov	ip, r2
 800234e:	4463      	add	r3, ip
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f7fd fed8 	bl	8000108 <__udivsi3>
 8002358:	0003      	movs	r3, r0
 800235a:	e000      	b.n	800235e <tach_hz_from_period_us+0x26>
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	000f4240 	.word	0x000f4240

0800236c <telemetry_service>:

static void telemetry_service(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0a4      	sub	sp, #144	@ 0x90
 8002370:	af04      	add	r7, sp, #16
    if (g_stream_period_ms == 0) return;
 8002372:	4b7c      	ldr	r3, [pc, #496]	@ (8002564 <telemetry_service+0x1f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d100      	bne.n	800237c <telemetry_service+0x10>
 800237a:	e0ec      	b.n	8002556 <telemetry_service+0x1ea>
        if (ic_irq_count == last_ic_irqs) ic_has_lock = 0;
        last_ic_irqs = ic_irq_count;
        last_ic_check_ms = now;
    }*/

    uint32_t now = HAL_GetTick();
 800237c:	f000 fe7e 	bl	800307c <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	67bb      	str	r3, [r7, #120]	@ 0x78
    // not time yet?
    if ((int32_t)(now - g_next_stream_ms) < 0) return;
 8002384:	4b78      	ldr	r3, [pc, #480]	@ (8002568 <telemetry_service+0x1fc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	d500      	bpl.n	8002390 <telemetry_service+0x24>
 800238e:	e0e4      	b.n	800255a <telemetry_service+0x1ee>
    g_next_stream_ms = now + g_stream_period_ms;
 8002390:	4b74      	ldr	r3, [pc, #464]	@ (8002564 <telemetry_service+0x1f8>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002396:	18d2      	adds	r2, r2, r3
 8002398:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <telemetry_service+0x1fc>)
 800239a:	601a      	str	r2, [r3, #0]

    extern int hx711_dout_level(void);

    // read HX711 if ready (non-blocking)
    int32_t raw = 0; int ok = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	663b      	str	r3, [r7, #96]	@ 0x60
 80023a0:	2300      	movs	r3, #0
 80023a2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (hx711_dout_level() == 0) {        // data ready low
 80023a4:	f7ff fa06 	bl	80017b4 <hx711_dout_level>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d110      	bne.n	80023ce <telemetry_service+0x62>
        ok = hx711_read_raw(&raw, 0);     // no wait
 80023ac:	2360      	movs	r3, #96	@ 0x60
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2100      	movs	r1, #0
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7ff fa0d 	bl	80017d2 <hx711_read_raw>
 80023b8:	0003      	movs	r3, r0
 80023ba:	677b      	str	r3, [r7, #116]	@ 0x74
        if (ok) { g_last_raw = raw; g_last_raw_valid = 1; }
 80023bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <telemetry_service+0x62>
 80023c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023c4:	4b69      	ldr	r3, [pc, #420]	@ (800256c <telemetry_service+0x200>)
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	4b69      	ldr	r3, [pc, #420]	@ (8002570 <telemetry_service+0x204>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    }

    uint8_t t[96]; uint8_t *tw = t;
 80023ce:	003b      	movs	r3, r7
 80023d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_TS_MS, now);
 80023d2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80023d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023d6:	2101      	movs	r1, #1
 80023d8:	0018      	movs	r0, r3
 80023da:	f7fe fae6 	bl	80009aa <tlv_put_u32>
 80023de:	0003      	movs	r3, r0
 80023e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC1_US, g_esc1_us);
 80023e2:	4b64      	ldr	r3, [pc, #400]	@ (8002574 <telemetry_service+0x208>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	001a      	movs	r2, r3
 80023e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023ea:	2162      	movs	r1, #98	@ 0x62
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7fe fadc 	bl	80009aa <tlv_put_u32>
 80023f2:	0003      	movs	r3, r0
 80023f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC2_US, g_esc2_us);
 80023f6:	4b60      	ldr	r3, [pc, #384]	@ (8002578 <telemetry_service+0x20c>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	001a      	movs	r2, r3
 80023fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023fe:	2163      	movs	r1, #99	@ 0x63
 8002400:	0018      	movs	r0, r3
 8002402:	f7fe fad2 	bl	80009aa <tlv_put_u32>
 8002406:	0003      	movs	r3, r0
 8002408:	67fb      	str	r3, [r7, #124]	@ 0x7c

    if (g_last_raw_valid) tw = tlv_put_i32(tw, TLV_LOAD_RAW, g_last_raw);
 800240a:	4b59      	ldr	r3, [pc, #356]	@ (8002570 <telemetry_service+0x204>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <telemetry_service+0xb8>
 8002412:	4b56      	ldr	r3, [pc, #344]	@ (800256c <telemetry_service+0x200>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002418:	2130      	movs	r1, #48	@ 0x30
 800241a:	0018      	movs	r0, r3
 800241c:	f7fe fafe 	bl	8000a1c <tlv_put_i32>
 8002420:	0003      	movs	r3, r0
 8002422:	67fb      	str	r3, [r7, #124]	@ 0x7c





    uint32_t hz1 = tach_hz_from_period_us(ic1_period_us);
 8002424:	4b55      	ldr	r3, [pc, #340]	@ (800257c <telemetry_service+0x210>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff ff85 	bl	8002338 <tach_hz_from_period_us>
 800242e:	0003      	movs	r3, r0
 8002430:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t hz2 = tach_hz_from_period_us(ic2_period_us);
 8002432:	4b53      	ldr	r3, [pc, #332]	@ (8002580 <telemetry_service+0x214>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff7e 	bl	8002338 <tach_hz_from_period_us>
 800243c:	0003      	movs	r3, r0
 800243e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    uint32_t rpm_ch2 = (hz1 ? (hz1 * 60u) / TACH_PULSES_PER_MECHREV : 0u);
 8002440:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <telemetry_service+0xf0>
 8002446:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002448:	0013      	movs	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	210e      	movs	r1, #14
 8002452:	0018      	movs	r0, r3
 8002454:	f7fd fe58 	bl	8000108 <__udivsi3>
 8002458:	0003      	movs	r3, r0
 800245a:	e000      	b.n	800245e <telemetry_service+0xf2>
 800245c:	2300      	movs	r3, #0
 800245e:	66bb      	str	r3, [r7, #104]	@ 0x68
    uint32_t rpm_ch1 = (hz2 ? (hz2 * 60u) / TACH_PULSES_PER_MECHREV : 0u);
 8002460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <telemetry_service+0x110>
 8002466:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002468:	0013      	movs	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	210e      	movs	r1, #14
 8002472:	0018      	movs	r0, r3
 8002474:	f7fd fe48 	bl	8000108 <__udivsi3>
 8002478:	0003      	movs	r3, r0
 800247a:	e000      	b.n	800247e <telemetry_service+0x112>
 800247c:	2300      	movs	r3, #0
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64

    // Map to ESC1/ESC2 as you intend (swap temporarily if your wiring is crossed)
    tw = tlv_put_u32(tw, TLV_ESC_RPM1, rpm_ch1);
 8002480:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002484:	2170      	movs	r1, #112	@ 0x70
 8002486:	0018      	movs	r0, r3
 8002488:	f7fe fa8f 	bl	80009aa <tlv_put_u32>
 800248c:	0003      	movs	r3, r0
 800248e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_ESC_RPM2, rpm_ch2);
 8002490:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002494:	2171      	movs	r1, #113	@ 0x71
 8002496:	0018      	movs	r0, r3
 8002498:	f7fe fa87 	bl	80009aa <tlv_put_u32>
 800249c:	0003      	movs	r3, r0
 800249e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0xA0, ic1_period_us);
 80024a0:	4b36      	ldr	r3, [pc, #216]	@ (800257c <telemetry_service+0x210>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024a6:	21a0      	movs	r1, #160	@ 0xa0
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7fe fa7e 	bl	80009aa <tlv_put_u32>
 80024ae:	0003      	movs	r3, r0
 80024b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0xA1, ic2_period_us);
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <telemetry_service+0x214>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024b8:	21a1      	movs	r1, #161	@ 0xa1
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7fe fa75 	bl	80009aa <tlv_put_u32>
 80024c0:	0003      	movs	r3, r0
 80024c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0xA2, ic1_irq);
 80024c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002584 <telemetry_service+0x218>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ca:	21a2      	movs	r1, #162	@ 0xa2
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7fe fa6c 	bl	80009aa <tlv_put_u32>
 80024d2:	0003      	movs	r3, r0
 80024d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0xA3, ic2_irq);
 80024d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002588 <telemetry_service+0x21c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024dc:	21a3      	movs	r1, #163	@ 0xa3
 80024de:	0018      	movs	r0, r3
 80024e0:	f7fe fa63 	bl	80009aa <tlv_put_u32>
 80024e4:	0003      	movs	r3, r0
 80024e6:	67fb      	str	r3, [r7, #124]	@ 0x7c



    // new voltage TLVs (always include)
    adc_compute_mv();
 80024e8:	f7ff fbe0 	bl	8001cac <adc_compute_mv>
    tw = tlv_put_u32(tw, TLV_VIN1_MV, g_vin1_mV);
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <telemetry_service+0x220>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024f2:	2180      	movs	r1, #128	@ 0x80
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fe fa58 	bl	80009aa <tlv_put_u32>
 80024fa:	0003      	movs	r3, r0
 80024fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, TLV_VIN2_MV, g_vin2_mV);
 80024fe:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <telemetry_service+0x224>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002504:	2181      	movs	r1, #129	@ 0x81
 8002506:	0018      	movs	r0, r3
 8002508:	f7fe fa4f 	bl	80009aa <tlv_put_u32>
 800250c:	0003      	movs	r3, r0
 800250e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_u32(tw, 0x92, g_adc[ADC_IDX_V1]);   // RAW_PA3 (VIN1 node)
    tw = tlv_put_u32(tw, 0x93, g_adc[ADC_IDX_V2]);   // RAW_PA4 (VIN2 node)
    tw = tlv_put_u32(tw, 0x94, g_adc[ADC_IDX_VREF]); // RAW_VREFINT
    */

    tw = tlv_put_i32(tw, TLV_I1_MA, g_i1_mA);
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <telemetry_service+0x228>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002516:	2182      	movs	r1, #130	@ 0x82
 8002518:	0018      	movs	r0, r3
 800251a:	f7fe fa7f 	bl	8000a1c <tlv_put_i32>
 800251e:	0003      	movs	r3, r0
 8002520:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tw = tlv_put_i32(tw, TLV_I2_MA, g_i2_mA);
 8002522:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <telemetry_service+0x22c>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002528:	2183      	movs	r1, #131	@ 0x83
 800252a:	0018      	movs	r0, r3
 800252c:	f7fe fa76 	bl	8000a1c <tlv_put_i32>
 8002530:	0003      	movs	r3, r0
 8002532:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // send telemetry to whoever requested streaming
    extern int comm_send(uint8_t rx_id, uint8_t tx_id, uint8_t msg_type,
                         uint8_t flags, uint8_t reqid, const uint8_t *payload, uint16_t payload_len);

    comm_send(g_stream_dest_id, 0x20/*MCU id*/, MT_TEL_A, 0x01, 0, t, (uint16_t)(tw - t));
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <telemetry_service+0x230>)
 8002536:	7818      	ldrb	r0, [r3, #0]
 8002538:	003b      	movs	r3, r7
 800253a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b29b      	uxth	r3, r3
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	003b      	movs	r3, r7
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2265      	movs	r2, #101	@ 0x65
 800254e:	2120      	movs	r1, #32
 8002550:	f7fe fe0c 	bl	800116c <comm_send>
 8002554:	e002      	b.n	800255c <telemetry_service+0x1f0>
    if (g_stream_period_ms == 0) return;
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	e000      	b.n	800255c <telemetry_service+0x1f0>
    if ((int32_t)(now - g_next_stream_ms) < 0) return;
 800255a:	46c0      	nop			@ (mov r8, r8)
}
 800255c:	46bd      	mov	sp, r7
 800255e:	b020      	add	sp, #128	@ 0x80
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	2000052c 	.word	0x2000052c
 8002568:	20000530 	.word	0x20000530
 800256c:	2000054c 	.word	0x2000054c
 8002570:	20000550 	.word	0x20000550
 8002574:	2000000a 	.word	0x2000000a
 8002578:	2000000c 	.word	0x2000000c
 800257c:	2000055c 	.word	0x2000055c
 8002580:	20000560 	.word	0x20000560
 8002584:	2000056c 	.word	0x2000056c
 8002588:	20000570 	.word	0x20000570
 800258c:	20000544 	.word	0x20000544
 8002590:	20000548 	.word	0x20000548
 8002594:	20000524 	.word	0x20000524
 8002598:	20000528 	.word	0x20000528
 800259c:	20000008 	.word	0x20000008

080025a0 <heartbeat_service>:

static void heartbeat_service(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af04      	add	r7, sp, #16
    const uint32_t period_ms = 1000; // adjust as you like (>= 50ms recommended)
 80025a6:	23fa      	movs	r3, #250	@ 0xfa
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	617b      	str	r3, [r7, #20]
    uint32_t now = HAL_GetTick();
 80025ac:	f000 fd66 	bl	800307c <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	613b      	str	r3, [r7, #16]
    if ((int32_t)(now - hb_next_ms) < 0) return;
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <heartbeat_service+0x64>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	d41e      	bmi.n	80025fc <heartbeat_service+0x5c>
    hb_next_ms = now + period_ms;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	18d2      	adds	r2, r2, r3
 80025c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <heartbeat_service+0x64>)
 80025c6:	601a      	str	r2, [r3, #0]

    // Minimal payload: device uptime
    uint8_t p[8];
    uint8_t *w = p;
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	60fb      	str	r3, [r7, #12]
    w = tlv_put_u32(w, TLV_TS_MS, now);
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2101      	movs	r1, #1
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fe f9e9 	bl	80009aa <tlv_put_u32>
 80025d8:	0003      	movs	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

    // Send to PC (rx=0x0A), from MCU (tx=0x20)
    comm_send(0x0A, 0x20, MT_PING, 0x01, 0, p, (uint16_t)(w - p));
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	2205      	movs	r2, #5
 80025f2:	2120      	movs	r1, #32
 80025f4:	200a      	movs	r0, #10
 80025f6:	f7fe fdb9 	bl	800116c <comm_send>
 80025fa:	e000      	b.n	80025fe <heartbeat_service+0x5e>
    if ((int32_t)(now - hb_next_ms) < 0) return;
 80025fc:	46c0      	nop			@ (mov r8, r8)
}
 80025fe:	46bd      	mov	sp, r7
 8002600:	b006      	add	sp, #24
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000534 	.word	0x20000534

08002608 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM2) return;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	05db      	lsls	r3, r3, #23
 8002618:	429a      	cmp	r2, r3
 800261a:	d167      	bne.n	80026ec <HAL_TIM_IC_CaptureCallback+0xe4>

    uint32_t cap, prev, diff;

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f1b      	ldrb	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d12f      	bne.n	8002684 <HAL_TIM_IC_CaptureCallback+0x7c>
        cap  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2100      	movs	r1, #0
 8002628:	0018      	movs	r0, r3
 800262a:	f003 fbd7 	bl	8005ddc <HAL_TIM_ReadCapturedValue>
 800262e:	0003      	movs	r3, r0
 8002630:	617b      	str	r3, [r7, #20]
        prev = ic1_last; ic1_last = cap;
 8002632:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <HAL_TIM_IC_CaptureCallback+0xf4>)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]
        diff = cap - prev;                          // unsigned, wrap-safe
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	60fb      	str	r3, [r7, #12]
        if (diff < PERIOD_US_MIN || diff > PERIOD_US_MAX) return;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b4f      	cmp	r3, #79	@ 0x4f
 800264a:	d951      	bls.n	80026f0 <HAL_TIM_IC_CaptureCallback+0xe8>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a2c      	ldr	r2, [pc, #176]	@ (8002700 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d84d      	bhi.n	80026f0 <HAL_TIM_IC_CaptureCallback+0xe8>
        ic1_period_us = ema_u32(ic1_period_us, diff);
 8002654:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff f9bf 	bl	80019e0 <ema_u32>
 8002662:	0002      	movs	r2, r0
 8002664:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002666:	601a      	str	r2, [r3, #0]
        ic1_lock = 1; ic_irq_count++; ic1_irq++;
 8002668:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_TIM_IC_CaptureCallback+0x100>)
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_TIM_IC_CaptureCallback+0x104>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_TIM_IC_CaptureCallback+0x104>)
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_TIM_IC_CaptureCallback+0x108>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e038      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xee>

    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7f1b      	ldrb	r3, [r3, #28]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d134      	bne.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xee>
        cap  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2104      	movs	r1, #4
 8002690:	0018      	movs	r0, r3
 8002692:	f003 fba3 	bl	8005ddc <HAL_TIM_ReadCapturedValue>
 8002696:	0003      	movs	r3, r0
 8002698:	617b      	str	r3, [r7, #20]
        prev = ic2_last; ic2_last = cap;
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]
        diff = cap - prev;                          // unsigned, wrap-safe
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	60fb      	str	r3, [r7, #12]
        if (diff < PERIOD_US_MIN || diff > PERIOD_US_MAX) return;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b4f      	cmp	r3, #79	@ 0x4f
 80026b2:	d91f      	bls.n	80026f4 <HAL_TIM_IC_CaptureCallback+0xec>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d81b      	bhi.n	80026f4 <HAL_TIM_IC_CaptureCallback+0xec>
        ic2_period_us = ema_u32(ic2_period_us, diff);
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_TIM_IC_CaptureCallback+0x110>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff f98b 	bl	80019e0 <ema_u32>
 80026ca:	0002      	movs	r2, r0
 80026cc:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_TIM_IC_CaptureCallback+0x110>)
 80026ce:	601a      	str	r2, [r3, #0]
        ic2_lock = 1; ic_irq_count++; ic2_irq++;
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_TIM_IC_CaptureCallback+0x114>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <HAL_TIM_IC_CaptureCallback+0x104>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_TIM_IC_CaptureCallback+0x104>)
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_TIM_IC_CaptureCallback+0x118>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_TIM_IC_CaptureCallback+0x118>)
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e004      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xee>
    if (htim->Instance != TIM2) return;
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	e002      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xee>
        if (diff < PERIOD_US_MIN || diff > PERIOD_US_MAX) return;
 80026f0:	46c0      	nop			@ (mov r8, r8)
 80026f2:	e000      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xee>
        if (diff < PERIOD_US_MIN || diff > PERIOD_US_MAX) return;
 80026f4:	46c0      	nop			@ (mov r8, r8)
    }
}
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b006      	add	sp, #24
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000554 	.word	0x20000554
 8002700:	00030d40 	.word	0x00030d40
 8002704:	2000055c 	.word	0x2000055c
 8002708:	20000564 	.word	0x20000564
 800270c:	20000568 	.word	0x20000568
 8002710:	2000056c 	.word	0x2000056c
 8002714:	20000558 	.word	0x20000558
 8002718:	20000560 	.word	0x20000560
 800271c:	20000565 	.word	0x20000565
 8002720:	20000570 	.word	0x20000570

08002724 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
        // if you want, you can detect “no pulse” here (timeout)
        // e.g., zero ic_has_lock after some ms without captures
    }
}
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800273a:	f000 fc45 	bl	8002fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800273e:	f000 f841 	bl	80027c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002742:	f7fe ff91 	bl	8001668 <MX_GPIO_Init>
  MX_DMA_Init();
 8002746:	f7fe ff69 	bl	800161c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800274a:	f000 fb37 	bl	8002dbc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800274e:	f7ff f895 	bl	800187c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002752:	f000 f933 	bl	80029bc <MX_TIM1_Init>
  MX_ADC_Init();
 8002756:	f7fd ffd5 	bl	8000704 <MX_ADC_Init>
  MX_TIM2_Init();
 800275a:	f000 f9f1 	bl	8002b40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  esc_init();
 800275e:	f7ff f96b 	bl	8001a38 <esc_init>

  // apply initial µs (will be overwritten by commands)
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1050);
 8002762:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <main+0x80>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a14      	ldr	r2, [pc, #80]	@ (80027b8 <main+0x84>)
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1050);
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <main+0x80>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <main+0x84>)
 8002770:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <main+0x88>)
 8002774:	2100      	movs	r1, #0
 8002776:	0018      	movs	r0, r3
 8002778:	f002 fefc 	bl	8005574 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800277c:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <main+0x88>)
 800277e:	2104      	movs	r1, #4
 8002780:	0018      	movs	r0, r3
 8002782:	f002 fef7 	bl	8005574 <HAL_TIM_IC_Start_IT>

  adc_try_start();          // non-fatal start (sets g_adc_ok)
 8002786:	f7ff f999 	bl	8001abc <adc_try_start>

  comm_init(&huart1);
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <main+0x8c>)
 800278c:	0018      	movs	r0, r3
 800278e:	f7fe fda1 	bl	80012d4 <comm_init>
  uint32_t last_hello = HAL_GetTick();
 8002792:	f000 fc73 	bl	800307c <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	607b      	str	r3, [r7, #4]

  hx711_init();
 800279a:	f7ff f813 	bl	80017c4 <hx711_init>

  //Calibrate Current ADC after all Inits are complete
  current_calibrate_zero();
 800279e:	f7ff f9bf 	bl	8001b20 <current_calibrate_zero>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  comm_poll();
 80027a2:	f7fe fe71 	bl	8001488 <comm_poll>
	  telemetry_service();
 80027a6:	f7ff fde1 	bl	800236c <telemetry_service>
	  heartbeat_service();
 80027aa:	f7ff fef9 	bl	80025a0 <heartbeat_service>
	  comm_poll();
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	e7f7      	b.n	80027a2 <main+0x6e>
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	20000574 	.word	0x20000574
 80027b8:	0000041a 	.word	0x0000041a
 80027bc:	200005bc 	.word	0x200005bc
 80027c0:	20000604 	.word	0x20000604

080027c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b095      	sub	sp, #84	@ 0x54
 80027c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ca:	2420      	movs	r4, #32
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	0018      	movs	r0, r3
 80027d0:	2330      	movs	r3, #48	@ 0x30
 80027d2:	001a      	movs	r2, r3
 80027d4:	2100      	movs	r1, #0
 80027d6:	f005 fa54 	bl	8007c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027da:	2310      	movs	r3, #16
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	0018      	movs	r0, r3
 80027e0:	2310      	movs	r3, #16
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f005 fa4c 	bl	8007c82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ea:	003b      	movs	r3, r7
 80027ec:	0018      	movs	r0, r3
 80027ee:	2310      	movs	r3, #16
 80027f0:	001a      	movs	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	f005 fa45 	bl	8007c82 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80027f8:	0021      	movs	r1, r4
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2212      	movs	r2, #18
 80027fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2201      	movs	r2, #1
 8002804:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2201      	movs	r2, #1
 800280a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2210      	movs	r2, #16
 8002810:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2210      	movs	r2, #16
 8002816:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2202      	movs	r2, #2
 800281c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	22a0      	movs	r2, #160	@ 0xa0
 8002828:	0392      	lsls	r2, r2, #14
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2200      	movs	r2, #0
 8002830:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002832:	187b      	adds	r3, r7, r1
 8002834:	0018      	movs	r0, r3
 8002836:	f001 ffcb 	bl	80047d0 <HAL_RCC_OscConfig>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800283e:	f000 f82b 	bl	8002898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002842:	2110      	movs	r1, #16
 8002844:	187b      	adds	r3, r7, r1
 8002846:	2207      	movs	r2, #7
 8002848:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2202      	movs	r2, #2
 800284e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2101      	movs	r1, #1
 8002860:	0018      	movs	r0, r3
 8002862:	f002 facf 	bl	8004e04 <HAL_RCC_ClockConfig>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800286a:	f000 f815 	bl	8002898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800286e:	003b      	movs	r3, r7
 8002870:	2221      	movs	r2, #33	@ 0x21
 8002872:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002874:	003b      	movs	r3, r7
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800287a:	003b      	movs	r3, r7
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002880:	003b      	movs	r3, r7
 8002882:	0018      	movs	r0, r3
 8002884:	f002 fc04 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800288c:	f000 f804 	bl	8002898 <Error_Handler>
  }
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b015      	add	sp, #84	@ 0x54
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	e7fd      	b.n	80028a0 <Error_Handler+0x8>

080028a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <HAL_MspInit+0x44>)
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <HAL_MspInit+0x44>)
 80028b0:	2101      	movs	r1, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	619a      	str	r2, [r3, #24]
 80028b6:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <HAL_MspInit+0x44>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_MspInit+0x44>)
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <HAL_MspInit+0x44>)
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	0549      	lsls	r1, r1, #21
 80028cc:	430a      	orrs	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_MspInit+0x44>)
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	055b      	lsls	r3, r3, #21
 80028d8:	4013      	ands	r3, r2
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	40021000 	.word	0x40021000

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	e7fd      	b.n	80028f0 <NMI_Handler+0x4>

080028f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	e7fd      	b.n	80028f8 <HardFault_Handler+0x4>

080028fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002914:	f000 fba0 	bl	8003058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002918:	46c0      	nop			@ (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002924:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <DMA1_Channel1_IRQHandler+0x14>)
 8002926:	0018      	movs	r0, r3
 8002928:	f001 fb87 	bl	800403a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	20000078 	.word	0x20000078

08002938 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800293e:	0018      	movs	r0, r3
 8002940:	f001 fb7b 	bl	800403a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002946:	0018      	movs	r0, r3
 8002948:	f001 fb77 	bl	800403a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	200006d0 	.word	0x200006d0
 8002958:	2000068c 	.word	0x2000068c

0800295c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <TIM2_IRQHandler+0x14>)
 8002962:	0018      	movs	r0, r3
 8002964:	f002 ff0e 	bl	8005784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002968:	46c0      	nop			@ (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	200005bc 	.word	0x200005bc

08002974 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) &&
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <USART1_IRQHandler+0x38>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2210      	movs	r2, #16
 8002980:	4013      	ands	r3, r2
 8002982:	2b10      	cmp	r3, #16
 8002984:	d10b      	bne.n	800299e <USART1_IRQHandler+0x2a>
	    __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE)) {
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <USART1_IRQHandler+0x38>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2210      	movs	r2, #16
 800298e:	4013      	ands	r3, r2
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) &&
 8002990:	d005      	beq.n	800299e <USART1_IRQHandler+0x2a>
	    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <USART1_IRQHandler+0x38>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2210      	movs	r2, #16
 8002998:	621a      	str	r2, [r3, #32]
	    comm_on_uart_idle_irq();   // <- tells the parser new bytes arrived
 800299a:	f7fe fcc7 	bl	800132c <comm_on_uart_idle_irq>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800299e:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <USART1_IRQHandler+0x38>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f004 f8a9 	bl	8006af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000604 	.word	0x20000604

080029b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029b4:	46c0      	nop			@ (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b096      	sub	sp, #88	@ 0x58
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c2:	2348      	movs	r3, #72	@ 0x48
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	0018      	movs	r0, r3
 80029c8:	2310      	movs	r3, #16
 80029ca:	001a      	movs	r2, r3
 80029cc:	2100      	movs	r1, #0
 80029ce:	f005 f958 	bl	8007c82 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d2:	2340      	movs	r3, #64	@ 0x40
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	0018      	movs	r0, r3
 80029d8:	2308      	movs	r3, #8
 80029da:	001a      	movs	r2, r3
 80029dc:	2100      	movs	r1, #0
 80029de:	f005 f950 	bl	8007c82 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e2:	2324      	movs	r3, #36	@ 0x24
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	0018      	movs	r0, r3
 80029e8:	231c      	movs	r3, #28
 80029ea:	001a      	movs	r2, r3
 80029ec:	2100      	movs	r1, #0
 80029ee:	f005 f948 	bl	8007c82 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	0018      	movs	r0, r3
 80029f6:	2320      	movs	r3, #32
 80029f8:	001a      	movs	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f005 f941 	bl	8007c82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a00:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a02:	4a4c      	ldr	r2, [pc, #304]	@ (8002b34 <MX_TIM1_Init+0x178>)
 8002a04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a08:	222f      	movs	r2, #47	@ 0x2f
 8002a0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b48      	ldr	r3, [pc, #288]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a14:	4a48      	ldr	r2, [pc, #288]	@ (8002b38 <MX_TIM1_Init+0x17c>)
 8002a16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a18:	4b45      	ldr	r3, [pc, #276]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a1e:	4b44      	ldr	r3, [pc, #272]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a24:	4b42      	ldr	r3, [pc, #264]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f002 fbfd 	bl	800522c <HAL_TIM_Base_Init>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002a36:	f7ff ff2f 	bl	8002898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3a:	2148      	movs	r1, #72	@ 0x48
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2280      	movs	r2, #128	@ 0x80
 8002a40:	0152      	lsls	r2, r2, #5
 8002a42:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a44:	187a      	adds	r2, r7, r1
 8002a46:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f003 f8f2 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002a54:	f7ff ff20 	bl	8002898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a58:	4b35      	ldr	r3, [pc, #212]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f002 fc36 	bl	80052cc <HAL_TIM_PWM_Init>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002a64:	f7ff ff18 	bl	8002898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a68:	2140      	movs	r1, #64	@ 0x40
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2200      	movs	r2, #0
 8002a74:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a76:	187a      	adds	r2, r7, r1
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f003 fe39 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002a86:	f7ff ff07 	bl	8002898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a8a:	2124      	movs	r1, #36	@ 0x24
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2260      	movs	r2, #96	@ 0x60
 8002a90:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1050;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	4a29      	ldr	r2, [pc, #164]	@ (8002b3c <MX_TIM1_Init+0x180>)
 8002a96:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab6:	1879      	adds	r1, r7, r1
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	0018      	movs	r0, r3
 8002abe:	f002 fff3 	bl	8005aa8 <HAL_TIM_PWM_ConfigChannel>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002ac6:	f7ff fee7 	bl	8002898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aca:	2324      	movs	r3, #36	@ 0x24
 8002acc:	18f9      	adds	r1, r7, r3
 8002ace:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002ad0:	220c      	movs	r2, #12
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 ffe8 	bl	8005aa8 <HAL_TIM_PWM_ConfigChannel>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002adc:	f7ff fedc 	bl	8002898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	2280      	movs	r2, #128	@ 0x80
 8002b02:	0192      	lsls	r2, r2, #6
 8002b04:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b0c:	1d3a      	adds	r2, r7, #4
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002b10:	0011      	movs	r1, r2
 8002b12:	0018      	movs	r0, r3
 8002b14:	f003 fe46 	bl	80067a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b18:	1e03      	subs	r3, r0, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8002b1c:	f7ff febc 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <MX_TIM1_Init+0x174>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f90a 	bl	8002d3c <HAL_TIM_MspPostInit>

}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b016      	add	sp, #88	@ 0x58
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000574 	.word	0x20000574
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	00004e1f 	.word	0x00004e1f
 8002b3c:	0000041a 	.word	0x0000041a

08002b40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b46:	2310      	movs	r3, #16
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	001a      	movs	r2, r3
 8002b50:	2100      	movs	r1, #0
 8002b52:	f005 f896 	bl	8007c82 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b56:	003b      	movs	r3, r7
 8002b58:	0018      	movs	r0, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f005 f88f 	bl	8007c82 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b64:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b66:	2280      	movs	r2, #128	@ 0x80
 8002b68:	05d2      	lsls	r2, r2, #23
 8002b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8002b6c:	4b27      	ldr	r3, [pc, #156]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b6e:	222f      	movs	r2, #47	@ 0x2f
 8002b70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b72:	4b26      	ldr	r3, [pc, #152]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8002b78:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b86:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f002 fca0 	bl	80054d4 <HAL_TIM_IC_Init>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002b98:	f7ff fe7e 	bl	8002898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002baa:	187a      	adds	r2, r7, r1
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002bae:	0011      	movs	r1, r2
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f003 fd9f 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002bba:	f7ff fe6d 	bl	8002898 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bbe:	003b      	movs	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bc4:	003b      	movs	r3, r7
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bca:	003b      	movs	r3, r7
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 4;
 8002bd0:	003b      	movs	r3, r7
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bd6:	0039      	movs	r1, r7
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f002 febf 	bl	8005960 <HAL_TIM_IC_ConfigChannel>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002be6:	f7ff fe57 	bl	8002898 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 8002bea:	003b      	movs	r3, r7
 8002bec:	2200      	movs	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002bf0:	0039      	movs	r1, r7
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <MX_TIM2_Init+0xcc>)
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f002 feb2 	bl	8005960 <HAL_TIM_IC_ConfigChannel>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002c00:	f7ff fe4a 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200005bc 	.word	0x200005bc

08002c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_TIM_Base_MspInit+0x38>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_TIM_Base_MspInit+0x3c>)
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_TIM_Base_MspInit+0x3c>)
 8002c28:	2180      	movs	r1, #128	@ 0x80
 8002c2a:	0109      	lsls	r1, r1, #4
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	619a      	str	r2, [r3, #24]
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_TIM_Base_MspInit+0x3c>)
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40021000 	.word	0x40021000

08002c50 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b08b      	sub	sp, #44	@ 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	2414      	movs	r4, #20
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	2314      	movs	r3, #20
 8002c60:	001a      	movs	r2, r3
 8002c62:	2100      	movs	r1, #0
 8002c64:	f005 f80d 	bl	8007c82 <memset>
  if(tim_icHandle->Instance==TIM2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d15b      	bne.n	8002d2c <HAL_TIM_IC_MspInit+0xdc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c74:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	4b2e      	ldr	r3, [pc, #184]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	61da      	str	r2, [r3, #28]
 8002c80:	4b2c      	ldr	r3, [pc, #176]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8c:	4b29      	ldr	r3, [pc, #164]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	4b28      	ldr	r3, [pc, #160]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	0289      	lsls	r1, r1, #10
 8002c96:	430a      	orrs	r2, r1
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002cae:	2180      	movs	r1, #128	@ 0x80
 8002cb0:	02c9      	lsls	r1, r1, #11
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	615a      	str	r2, [r3, #20]
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d34 <HAL_TIM_IC_MspInit+0xe4>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	02db      	lsls	r3, r3, #11
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2202      	movs	r2, #2
 8002cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	2200      	movs	r2, #0
 8002cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	2202      	movs	r2, #2
 8002ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	193a      	adds	r2, r7, r4
 8002ce4:	2390      	movs	r3, #144	@ 0x90
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fa90 	bl	8004210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cf0:	0021      	movs	r1, r4
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2201      	movs	r2, #1
 8002d02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002d0a:	187b      	adds	r3, r7, r1
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <HAL_TIM_IC_MspInit+0xe8>)
 8002d14:	0019      	movs	r1, r3
 8002d16:	0010      	movs	r0, r2
 8002d18:	f001 fa7a 	bl	8004210 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2100      	movs	r1, #0
 8002d20:	200f      	movs	r0, #15
 8002d22:	f001 f82d 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d26:	200f      	movs	r0, #15
 8002d28:	f001 f83f 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b00b      	add	sp, #44	@ 0x2c
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	48000400 	.word	0x48000400

08002d3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	240c      	movs	r4, #12
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	0018      	movs	r0, r3
 8002d4a:	2314      	movs	r3, #20
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f004 ff97 	bl	8007c82 <memset>
  if(timHandle->Instance==TIM1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <HAL_TIM_MspPostInit+0x78>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d125      	bne.n	8002daa <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_TIM_MspPostInit+0x7c>)
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_TIM_MspPostInit+0x7c>)
 8002d64:	2180      	movs	r1, #128	@ 0x80
 8002d66:	0289      	lsls	r1, r1, #10
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	615a      	str	r2, [r3, #20]
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_TIM_MspPostInit+0x7c>)
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	2290      	movs	r2, #144	@ 0x90
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	0021      	movs	r1, r4
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2202      	movs	r2, #2
 8002d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2202      	movs	r2, #2
 8002d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	187a      	adds	r2, r7, r1
 8002d9e:	2390      	movs	r3, #144	@ 0x90
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	0011      	movs	r1, r2
 8002da4:	0018      	movs	r0, r3
 8002da6:	f001 fa33 	bl	8004210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b009      	add	sp, #36	@ 0x24
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40021000 	.word	0x40021000

08002dbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002dc2:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002dc8:	22e1      	movs	r2, #225	@ 0xe1
 8002dca:	0312      	lsls	r2, r2, #12
 8002dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dce:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002de2:	220c      	movs	r2, #12
 8002de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dec:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dfe:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <MX_USART1_UART_Init+0x58>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f003 fd3d 	bl	8006880 <HAL_UART_Init>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e0a:	f7ff fd45 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000604 	.word	0x20000604
 8002e18:	40013800 	.word	0x40013800

08002e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08b      	sub	sp, #44	@ 0x2c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	2414      	movs	r4, #20
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	0018      	movs	r0, r3
 8002e2a:	2314      	movs	r3, #20
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	2100      	movs	r1, #0
 8002e30:	f004 ff27 	bl	8007c82 <memset>
  if(uartHandle->Instance==USART1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a47      	ldr	r2, [pc, #284]	@ (8002f58 <HAL_UART_MspInit+0x13c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d000      	beq.n	8002e40 <HAL_UART_MspInit+0x24>
 8002e3e:	e087      	b.n	8002f50 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e40:	4b46      	ldr	r3, [pc, #280]	@ (8002f5c <HAL_UART_MspInit+0x140>)
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	4b45      	ldr	r3, [pc, #276]	@ (8002f5c <HAL_UART_MspInit+0x140>)
 8002e46:	2180      	movs	r1, #128	@ 0x80
 8002e48:	01c9      	lsls	r1, r1, #7
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	619a      	str	r2, [r3, #24]
 8002e4e:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <HAL_UART_MspInit+0x140>)
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	01db      	lsls	r3, r3, #7
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f5c <HAL_UART_MspInit+0x140>)
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	4b3e      	ldr	r3, [pc, #248]	@ (8002f5c <HAL_UART_MspInit+0x140>)
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	0289      	lsls	r1, r1, #10
 8002e66:	430a      	orrs	r2, r1
 8002e68:	615a      	str	r2, [r3, #20]
 8002e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f5c <HAL_UART_MspInit+0x140>)
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	2380      	movs	r3, #128	@ 0x80
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002e78:	0021      	movs	r1, r4
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	4a38      	ldr	r2, [pc, #224]	@ (8002f60 <HAL_UART_MspInit+0x144>)
 8002e7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2202      	movs	r2, #2
 8002e84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2201      	movs	r2, #1
 8002e96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	187a      	adds	r2, r7, r1
 8002e9a:	2390      	movs	r3, #144	@ 0x90
 8002e9c:	05db      	lsls	r3, r3, #23
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f001 f9b5 	bl	8004210 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8002f68 <HAL_UART_MspInit+0x14c>)
 8002eaa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eac:	4b2d      	ldr	r3, [pc, #180]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ebe:	4b29      	ldr	r3, [pc, #164]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec4:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002eca:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002ecc:	2220      	movs	r2, #32
 8002ece:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002ed2:	2280      	movs	r2, #128	@ 0x80
 8002ed4:	0152      	lsls	r2, r2, #5
 8002ed6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ed8:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 ff82 	bl	8003de4 <HAL_DMA_Init>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002ee4:	f7ff fcd8 	bl	8002898 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002eec:	675a      	str	r2, [r3, #116]	@ 0x74
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_UART_MspInit+0x148>)
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f70 <HAL_UART_MspInit+0x154>)
 8002ef8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efa:	4b1c      	ldr	r3, [pc, #112]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002efc:	2210      	movs	r2, #16
 8002efe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f06:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f08:	2280      	movs	r2, #128	@ 0x80
 8002f0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f12:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f24:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 ff5c 	bl	8003de4 <HAL_DMA_Init>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8002f30:	f7ff fcb2 	bl	8002898 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f38:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <HAL_UART_MspInit+0x150>)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	201b      	movs	r0, #27
 8002f46:	f000 ff1b 	bl	8003d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f4a:	201b      	movs	r0, #27
 8002f4c:	f000 ff2d 	bl	8003daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b00b      	add	sp, #44	@ 0x2c
 8002f56:	bd90      	pop	{r4, r7, pc}
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	00008004 	.word	0x00008004
 8002f64:	2000068c 	.word	0x2000068c
 8002f68:	40020030 	.word	0x40020030
 8002f6c:	200006d0 	.word	0x200006d0
 8002f70:	4002001c 	.word	0x4002001c

08002f74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f74:	480d      	ldr	r0, [pc, #52]	@ (8002fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f78:	f7ff fd1a 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f7c:	480c      	ldr	r0, [pc, #48]	@ (8002fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f7e:	490d      	ldr	r1, [pc, #52]	@ (8002fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <LoopForever+0xe>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f94:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc0 <LoopForever+0x16>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fa2:	f004 fe77 	bl	8007c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fa6:	f7ff fbc5 	bl	8002734 <main>

08002faa <LoopForever>:

LoopForever:
    b LoopForever
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
  ldr   r0, =_estack
 8002fac:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002fb8:	08007d50 	.word	0x08007d50
  ldr r2, =_sbss
 8002fbc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002fc0:	20000718 	.word	0x20000718

08002fc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_IRQHandler>
	...

08002fc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <HAL_Init+0x24>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_Init+0x24>)
 8002fd2:	2110      	movs	r1, #16
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f000 f809 	bl	8002ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fde:	f7ff fc61 	bl	80028a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <HAL_InitTick+0x5c>)
 8002ffa:	681c      	ldr	r4, [r3, #0]
 8002ffc:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <HAL_InitTick+0x60>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	0019      	movs	r1, r3
 8003002:	23fa      	movs	r3, #250	@ 0xfa
 8003004:	0098      	lsls	r0, r3, #2
 8003006:	f7fd f87f 	bl	8000108 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	0019      	movs	r1, r3
 800300e:	0020      	movs	r0, r4
 8003010:	f7fd f87a 	bl	8000108 <__udivsi3>
 8003014:	0003      	movs	r3, r0
 8003016:	0018      	movs	r0, r3
 8003018:	f000 fed7 	bl	8003dca <HAL_SYSTICK_Config>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d001      	beq.n	8003024 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e00f      	b.n	8003044 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d80b      	bhi.n	8003042 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	2301      	movs	r3, #1
 800302e:	425b      	negs	r3, r3
 8003030:	2200      	movs	r2, #0
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fea4 	bl	8003d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_InitTick+0x64>)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b003      	add	sp, #12
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	20000010 	.word	0x20000010
 8003050:	20000018 	.word	0x20000018
 8003054:	20000014 	.word	0x20000014

08003058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_IncTick+0x1c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	001a      	movs	r2, r3
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_IncTick+0x20>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	18d2      	adds	r2, r2, r3
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_IncTick+0x20>)
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	20000018 	.word	0x20000018
 8003078:	20000714 	.word	0x20000714

0800307c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  return uwTick;
 8003080:	4b02      	ldr	r3, [pc, #8]	@ (800308c <HAL_GetTick+0x10>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	20000714 	.word	0x20000714

08003090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e125      	b.n	80032fa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2234      	movs	r2, #52	@ 0x34
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7fd fbaa 	bl	8000820 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	2210      	movs	r2, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	d000      	beq.n	80030d8 <HAL_ADC_Init+0x48>
 80030d6:	e103      	b.n	80032e0 <HAL_ADC_Init+0x250>
 80030d8:	230f      	movs	r3, #15
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d000      	beq.n	80030e4 <HAL_ADC_Init+0x54>
 80030e2:	e0fd      	b.n	80032e0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80030ee:	d000      	beq.n	80030f2 <HAL_ADC_Init+0x62>
 80030f0:	e0f6      	b.n	80032e0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f6:	4a83      	ldr	r2, [pc, #524]	@ (8003304 <HAL_ADC_Init+0x274>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	2202      	movs	r2, #2
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	2b01      	cmp	r3, #1
 800310e:	d112      	bne.n	8003136 <HAL_ADC_Init+0xa6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2201      	movs	r2, #1
 8003118:	4013      	ands	r3, r2
 800311a:	2b01      	cmp	r3, #1
 800311c:	d009      	beq.n	8003132 <HAL_ADC_Init+0xa2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	401a      	ands	r2, r3
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	429a      	cmp	r2, r3
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Init+0xa6>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_ADC_Init+0xa8>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2218      	movs	r2, #24
 8003144:	4393      	bics	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	0899      	lsrs	r1, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4964      	ldr	r1, [pc, #400]	@ (8003308 <HAL_ADC_Init+0x278>)
 8003176:	400a      	ands	r2, r1
 8003178:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7e1b      	ldrb	r3, [r3, #24]
 800317e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e5b      	ldrb	r3, [r3, #25]
 8003184:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003186:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7e9b      	ldrb	r3, [r3, #26]
 800318c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800318e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	2b01      	cmp	r3, #1
 8003196:	d002      	beq.n	800319e <HAL_ADC_Init+0x10e>
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	015b      	lsls	r3, r3, #5
 800319c:	e000      	b.n	80031a0 <HAL_ADC_Init+0x110>
 800319e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031a6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_Init+0x124>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e000      	b.n	80031b6 <HAL_ADC_Init+0x126>
 80031b4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80031b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2124      	movs	r1, #36	@ 0x24
 80031bc:	5c5b      	ldrb	r3, [r3, r1]
 80031be:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031c0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7edb      	ldrb	r3, [r3, #27]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d115      	bne.n	80031fc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7e9b      	ldrb	r3, [r3, #26]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	0252      	lsls	r2, r2, #9
 80031de:	4313      	orrs	r3, r2
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	e00b      	b.n	80031fc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	2220      	movs	r2, #32
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	2201      	movs	r2, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	23c2      	movs	r3, #194	@ 0xc2
 8003202:	33ff      	adds	r3, #255	@ 0xff
 8003204:	429a      	cmp	r2, r3
 8003206:	d007      	beq.n	8003218 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003210:	4313      	orrs	r3, r2
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68d9      	ldr	r1, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	055b      	lsls	r3, r3, #21
 8003230:	429a      	cmp	r2, r3
 8003232:	d01b      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d017      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	2b02      	cmp	r3, #2
 8003242:	d013      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	2b03      	cmp	r3, #3
 800324a:	d00f      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	2b04      	cmp	r3, #4
 8003252:	d00b      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	2b05      	cmp	r3, #5
 800325a:	d007      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	2b06      	cmp	r3, #6
 8003262:	d003      	beq.n	800326c <HAL_ADC_Init+0x1dc>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	2b07      	cmp	r3, #7
 800326a:	d112      	bne.n	8003292 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2107      	movs	r1, #7
 8003278:	438a      	bics	r2, r1
 800327a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6959      	ldr	r1, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	2207      	movs	r2, #7
 8003288:	401a      	ands	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_ADC_Init+0x27c>)
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10b      	bne.n	80032ba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	2203      	movs	r2, #3
 80032ae:	4393      	bics	r3, r2
 80032b0:	2201      	movs	r2, #1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032b8:	e01c      	b.n	80032f4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032be:	2212      	movs	r2, #18
 80032c0:	4393      	bics	r3, r2
 80032c2:	2210      	movs	r2, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ce:	2201      	movs	r2, #1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80032d6:	230f      	movs	r3, #15
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032de:	e009      	b.n	80032f4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	2210      	movs	r2, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032f4:	230f      	movs	r3, #15
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	fffffefd 	.word	0xfffffefd
 8003308:	fffe0219 	.word	0xfffe0219
 800330c:	833fffe7 	.word	0x833fffe7

08003310 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331c:	2317      	movs	r3, #23
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2204      	movs	r2, #4
 800332c:	4013      	ands	r3, r2
 800332e:	d15e      	bne.n	80033ee <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2234      	movs	r2, #52	@ 0x34
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADC_Start_DMA+0x2e>
 800333a:	2302      	movs	r3, #2
 800333c:	e05e      	b.n	80033fc <HAL_ADC_Start_DMA+0xec>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2234      	movs	r2, #52	@ 0x34
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	7e5b      	ldrb	r3, [r3, #25]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d007      	beq.n	800335e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800334e:	2317      	movs	r3, #23
 8003350:	18fc      	adds	r4, r7, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f9f9 	bl	800374c <ADC_Enable>
 800335a:	0003      	movs	r3, r0
 800335c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800335e:	2317      	movs	r3, #23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d146      	bne.n	80033f6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	4a25      	ldr	r2, [pc, #148]	@ (8003404 <HAL_ADC_Start_DMA+0xf4>)
 800336e:	4013      	ands	r3, r2
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	0052      	lsls	r2, r2, #1
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2234      	movs	r2, #52	@ 0x34
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338c:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <HAL_ADC_Start_DMA+0xf8>)
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	4a1d      	ldr	r2, [pc, #116]	@ (800340c <HAL_ADC_Start_DMA+0xfc>)
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339c:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_ADC_Start_DMA+0x100>)
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	221c      	movs	r2, #28
 80033a6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2110      	movs	r1, #16
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	430a      	orrs	r2, r1
 80033c6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3340      	adds	r3, #64	@ 0x40
 80033d2:	0019      	movs	r1, r3
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f000 fd4c 	bl	8003e74 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2104      	movs	r1, #4
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033ee:	2317      	movs	r3, #23
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80033f6:	2317      	movs	r3, #23
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	781b      	ldrb	r3, [r3, #0]
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b007      	add	sp, #28
 8003402:	bd90      	pop	{r4, r7, pc}
 8003404:	fffff0fe 	.word	0xfffff0fe
 8003408:	080039d1 	.word	0x080039d1
 800340c:	08003a85 	.word	0x08003a85
 8003410:	08003aa3 	.word	0x08003aa3

08003414 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2234      	movs	r2, #52	@ 0x34
 8003428:	5c9b      	ldrb	r3, [r3, r2]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Stop_DMA+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e05f      	b.n	80034f2 <HAL_ADC_Stop_DMA+0xde>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2234      	movs	r2, #52	@ 0x34
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800343a:	250f      	movs	r5, #15
 800343c:	197c      	adds	r4, r7, r5
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fa78 	bl	8003936 <ADC_ConversionStop>
 8003446:	0003      	movs	r3, r0
 8003448:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800344a:	0028      	movs	r0, r5
 800344c:	183b      	adds	r3, r7, r0
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d147      	bne.n	80034e4 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2101      	movs	r1, #1
 8003460:	438a      	bics	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	2221      	movs	r2, #33	@ 0x21
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d112      	bne.n	8003498 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	0005      	movs	r5, r0
 8003478:	183c      	adds	r4, r7, r0
 800347a:	0018      	movs	r0, r3
 800347c:	f000 fd60 	bl	8003f40 <HAL_DMA_Abort>
 8003480:	0003      	movs	r3, r0
 8003482:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003484:	197b      	adds	r3, r7, r5
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	2240      	movs	r2, #64	@ 0x40
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2110      	movs	r1, #16
 80034a4:	438a      	bics	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80034a8:	220f      	movs	r2, #15
 80034aa:	18bb      	adds	r3, r7, r2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80034b2:	18bc      	adds	r4, r7, r2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f9cc 	bl	8003854 <ADC_Disable>
 80034bc:	0003      	movs	r3, r0
 80034be:	7023      	strb	r3, [r4, #0]
 80034c0:	e003      	b.n	80034ca <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 f9c5 	bl	8003854 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034ca:	230f      	movs	r3, #15
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	4a08      	ldr	r2, [pc, #32]	@ (80034fc <HAL_ADC_Stop_DMA+0xe8>)
 80034da:	4013      	ands	r3, r2
 80034dc:	2201      	movs	r2, #1
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2234      	movs	r2, #52	@ 0x34
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80034ec:	230f      	movs	r3, #15
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bdb0      	pop	{r4, r5, r7, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	fffffefe 	.word	0xfffffefe

08003500 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	230f      	movs	r3, #15
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	055b      	lsls	r3, r3, #21
 800354e:	429a      	cmp	r2, r3
 8003550:	d011      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00d      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	2b02      	cmp	r3, #2
 8003560:	d009      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	2b03      	cmp	r3, #3
 8003568:	d005      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	2b04      	cmp	r3, #4
 8003570:	d001      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2234      	movs	r2, #52	@ 0x34
 800357a:	5c9b      	ldrb	r3, [r3, r2]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x54>
 8003580:	2302      	movs	r3, #2
 8003582:	e0d0      	b.n	8003726 <HAL_ADC_ConfigChannel+0x1f6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2234      	movs	r2, #52	@ 0x34
 8003588:	2101      	movs	r1, #1
 800358a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2204      	movs	r2, #4
 8003594:	4013      	ands	r3, r2
 8003596:	d000      	beq.n	800359a <HAL_ADC_ConfigChannel+0x6a>
 8003598:	e0b4      	b.n	8003704 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a64      	ldr	r2, [pc, #400]	@ (8003730 <HAL_ADC_ConfigChannel+0x200>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d100      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x76>
 80035a4:	e082      	b.n	80036ac <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	409a      	lsls	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	055b      	lsls	r3, r3, #21
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d037      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d033      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d02f      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d02b      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d027      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d023      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d01f      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	d01b      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2107      	movs	r1, #7
 800360c:	400b      	ands	r3, r1
 800360e:	429a      	cmp	r2, r3
 8003610:	d012      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2107      	movs	r1, #7
 800361e:	438a      	bics	r2, r1
 8003620:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6959      	ldr	r1, [r3, #20]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2207      	movs	r2, #7
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d007      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x120>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b11      	cmp	r3, #17
 8003646:	d003      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x120>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b12      	cmp	r3, #18
 800364e:	d163      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b10      	cmp	r3, #16
 800365a:	d009      	beq.n	8003670 <HAL_ADC_ConfigChannel+0x140>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b11      	cmp	r3, #17
 8003662:	d102      	bne.n	800366a <HAL_ADC_ConfigChannel+0x13a>
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	03db      	lsls	r3, r3, #15
 8003668:	e004      	b.n	8003674 <HAL_ADC_ConfigChannel+0x144>
 800366a:	2380      	movs	r3, #128	@ 0x80
 800366c:	045b      	lsls	r3, r3, #17
 800366e:	e001      	b.n	8003674 <HAL_ADC_ConfigChannel+0x144>
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	4a2f      	ldr	r2, [pc, #188]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 8003676:	430b      	orrs	r3, r1
 8003678:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d14a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003682:	4b2d      	ldr	r3, [pc, #180]	@ (8003738 <HAL_ADC_ConfigChannel+0x208>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	492d      	ldr	r1, [pc, #180]	@ (800373c <HAL_ADC_ConfigChannel+0x20c>)
 8003688:	0018      	movs	r0, r3
 800368a:	f7fc fd3d 	bl	8000108 <__udivsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	001a      	movs	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	189b      	adds	r3, r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800369c:	e002      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f9      	bne.n	800369e <HAL_ADC_ConfigChannel+0x16e>
 80036aa:	e035      	b.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2101      	movs	r1, #1
 80036b8:	4099      	lsls	r1, r3
 80036ba:	000b      	movs	r3, r1
 80036bc:	43d9      	mvns	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	400a      	ands	r2, r1
 80036c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d007      	beq.n	80036de <HAL_ADC_ConfigChannel+0x1ae>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b11      	cmp	r3, #17
 80036d4:	d003      	beq.n	80036de <HAL_ADC_ConfigChannel+0x1ae>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b12      	cmp	r3, #18
 80036dc:	d11c      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d007      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x1ca>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b11      	cmp	r3, #17
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x1c6>
 80036f2:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_ADC_ConfigChannel+0x210>)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1cc>
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_ADC_ConfigChannel+0x214>)
 80036f8:	e000      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1cc>
 80036fa:	4b13      	ldr	r3, [pc, #76]	@ (8003748 <HAL_ADC_ConfigChannel+0x218>)
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 80036fe:	400b      	ands	r3, r1
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e009      	b.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	2220      	movs	r2, #32
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003710:	230f      	movs	r3, #15
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2234      	movs	r2, #52	@ 0x34
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003720:	230f      	movs	r3, #15
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	781b      	ldrb	r3, [r3, #0]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	00001001 	.word	0x00001001
 8003734:	40012708 	.word	0x40012708
 8003738:	20000010 	.word	0x20000010
 800373c:	000f4240 	.word	0x000f4240
 8003740:	ffbfffff 	.word	0xffbfffff
 8003744:	feffffff 	.word	0xfeffffff
 8003748:	ff7fffff 	.word	0xff7fffff

0800374c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2203      	movs	r2, #3
 8003764:	4013      	ands	r3, r2
 8003766:	2b01      	cmp	r3, #1
 8003768:	d112      	bne.n	8003790 <ADC_Enable+0x44>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	2b01      	cmp	r3, #1
 8003776:	d009      	beq.n	800378c <ADC_Enable+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	401a      	ands	r2, r3
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	429a      	cmp	r2, r3
 800378a:	d101      	bne.n	8003790 <ADC_Enable+0x44>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <ADC_Enable+0x46>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d152      	bne.n	800383c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a2a      	ldr	r2, [pc, #168]	@ (8003848 <ADC_Enable+0xfc>)
 800379e:	4013      	ands	r3, r2
 80037a0:	d00d      	beq.n	80037be <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	2210      	movs	r2, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	2201      	movs	r2, #1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e03f      	b.n	800383e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <ADC_Enable+0x100>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	491f      	ldr	r1, [pc, #124]	@ (8003850 <ADC_Enable+0x104>)
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fc fc97 	bl	8000108 <__udivsi3>
 80037da:	0003      	movs	r3, r0
 80037dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037de:	e002      	b.n	80037e6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f9      	bne.n	80037e0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ec:	f7ff fc46 	bl	800307c <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037f4:	e01b      	b.n	800382e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037f6:	f7ff fc41 	bl	800307c <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d914      	bls.n	800382e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	2b01      	cmp	r3, #1
 8003810:	d00d      	beq.n	800382e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	2210      	movs	r2, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003822:	2201      	movs	r2, #1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e007      	b.n	800383e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	4013      	ands	r3, r2
 8003838:	2b01      	cmp	r3, #1
 800383a:	d1dc      	bne.n	80037f6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	80000017 	.word	0x80000017
 800384c:	20000010 	.word	0x20000010
 8003850:	000f4240 	.word	0x000f4240

08003854 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2203      	movs	r2, #3
 8003868:	4013      	ands	r3, r2
 800386a:	2b01      	cmp	r3, #1
 800386c:	d112      	bne.n	8003894 <ADC_Disable+0x40>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	2b01      	cmp	r3, #1
 800387a:	d009      	beq.n	8003890 <ADC_Disable+0x3c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	2380      	movs	r3, #128	@ 0x80
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	401a      	ands	r2, r3
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	429a      	cmp	r2, r3
 800388e:	d101      	bne.n	8003894 <ADC_Disable+0x40>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <ADC_Disable+0x42>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d048      	beq.n	800392c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2205      	movs	r2, #5
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2102      	movs	r1, #2
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2203      	movs	r2, #3
 80038be:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038c0:	f7ff fbdc 	bl	800307c <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038c8:	e029      	b.n	800391e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	2210      	movs	r2, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	2201      	movs	r2, #1
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e023      	b.n	800392e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038e6:	f7ff fbc9 	bl	800307c <HAL_GetTick>
 80038ea:	0002      	movs	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d914      	bls.n	800391e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2201      	movs	r2, #1
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d10d      	bne.n	800391e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	2210      	movs	r2, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003912:	2201      	movs	r2, #1
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	2b01      	cmp	r3, #1
 800392a:	d0dc      	beq.n	80038e6 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bd80      	pop	{r7, pc}

08003936 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2204      	movs	r2, #4
 800394a:	4013      	ands	r3, r2
 800394c:	d03a      	beq.n	80039c4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2204      	movs	r2, #4
 8003956:	4013      	ands	r3, r2
 8003958:	2b04      	cmp	r3, #4
 800395a:	d10d      	bne.n	8003978 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2202      	movs	r2, #2
 8003964:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003966:	d107      	bne.n	8003978 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2110      	movs	r1, #16
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003978:	f7ff fb80 	bl	800307c <HAL_GetTick>
 800397c:	0003      	movs	r3, r0
 800397e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003980:	e01a      	b.n	80039b8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003982:	f7ff fb7b 	bl	800307c <HAL_GetTick>
 8003986:	0002      	movs	r2, r0
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d913      	bls.n	80039b8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2204      	movs	r2, #4
 8003998:	4013      	ands	r3, r2
 800399a:	d00d      	beq.n	80039b8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	2210      	movs	r2, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	2201      	movs	r2, #1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e006      	b.n	80039c6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2204      	movs	r2, #4
 80039c0:	4013      	ands	r3, r2
 80039c2:	d1de      	bne.n	8003982 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	2250      	movs	r2, #80	@ 0x50
 80039e4:	4013      	ands	r3, r2
 80039e6:	d140      	bne.n	8003a6a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	23c0      	movs	r3, #192	@ 0xc0
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4013      	ands	r3, r2
 8003a02:	d12d      	bne.n	8003a60 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d129      	bne.n	8003a60 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2208      	movs	r2, #8
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d122      	bne.n	8003a60 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2204      	movs	r2, #4
 8003a22:	4013      	ands	r3, r2
 8003a24:	d110      	bne.n	8003a48 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	210c      	movs	r1, #12
 8003a32:	438a      	bics	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	4a11      	ldr	r2, [pc, #68]	@ (8003a80 <ADC_DMAConvCplt+0xb0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2201      	movs	r2, #1
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a46:	e00b      	b.n	8003a60 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7ff fd4c 	bl	8003500 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003a68:	e005      	b.n	8003a76 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	0010      	movs	r0, r2
 8003a74:	4798      	blx	r3
}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	fffffefe 	.word	0xfffffefe

08003a84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff fd3b 	bl	8003510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	2240      	movs	r2, #64	@ 0x40
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7ff fd28 	bl	8003520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b004      	add	sp, #16
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2317      	movs	r3, #23
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2234      	movs	r2, #52	@ 0x34
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_ADCEx_Calibration_Start+0x26>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e08d      	b.n	8003c1a <HAL_ADCEx_Calibration_Start+0x142>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2234      	movs	r2, #52	@ 0x34
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d112      	bne.n	8003b3a <HAL_ADCEx_Calibration_Start+0x62>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d009      	beq.n	8003b36 <HAL_ADCEx_Calibration_Start+0x5e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d101      	bne.n	8003b3a <HAL_ADCEx_Calibration_Start+0x62>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_ADCEx_Calibration_Start+0x64>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d15b      	bne.n	8003bf8 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	4a37      	ldr	r2, [pc, #220]	@ (8003c24 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	2202      	movs	r2, #2
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2103      	movs	r1, #3
 8003b68:	438a      	bics	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	0609      	lsls	r1, r1, #24
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003b7e:	f7ff fa7d 	bl	800307c <HAL_GetTick>
 8003b82:	0003      	movs	r3, r0
 8003b84:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b86:	e01d      	b.n	8003bc4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b88:	f7ff fa78 	bl	800307c <HAL_GetTick>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d916      	bls.n	8003bc4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	0fdb      	lsrs	r3, r3, #31
 8003b9e:	07da      	lsls	r2, r3, #31
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	2212      	movs	r2, #18
 8003bae:	4393      	bics	r3, r2
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2234      	movs	r2, #52	@ 0x34
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e02a      	b.n	8003c1a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0fdb      	lsrs	r3, r3, #31
 8003bcc:	07da      	lsls	r2, r3, #31
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d0d8      	beq.n	8003b88 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68d9      	ldr	r1, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	2203      	movs	r2, #3
 8003bec:	4393      	bics	r3, r2
 8003bee:	2201      	movs	r2, #1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bf6:	e009      	b.n	8003c0c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003c04:	2317      	movs	r3, #23
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2234      	movs	r2, #52	@ 0x34
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c14:	2317      	movs	r3, #23
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	781b      	ldrb	r3, [r3, #0]
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	fffffefd 	.word	0xfffffefd

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	0002      	movs	r2, r0
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c34:	1dfb      	adds	r3, r7, #7
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c3a:	d809      	bhi.n	8003c50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	001a      	movs	r2, r3
 8003c42:	231f      	movs	r3, #31
 8003c44:	401a      	ands	r2, r3
 8003c46:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <__NVIC_EnableIRQ+0x30>)
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4091      	lsls	r1, r2
 8003c4c:	000a      	movs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
  }
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c70:	d828      	bhi.n	8003cc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c72:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <__NVIC_SetPriority+0xd4>)
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	33c0      	adds	r3, #192	@ 0xc0
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	589b      	ldr	r3, [r3, r2]
 8003c82:	1dfa      	adds	r2, r7, #7
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	0011      	movs	r1, r2
 8003c88:	2203      	movs	r2, #3
 8003c8a:	400a      	ands	r2, r1
 8003c8c:	00d2      	lsls	r2, r2, #3
 8003c8e:	21ff      	movs	r1, #255	@ 0xff
 8003c90:	4091      	lsls	r1, r2
 8003c92:	000a      	movs	r2, r1
 8003c94:	43d2      	mvns	r2, r2
 8003c96:	401a      	ands	r2, r3
 8003c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	22ff      	movs	r2, #255	@ 0xff
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	1dfb      	adds	r3, r7, #7
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	2303      	movs	r3, #3
 8003caa:	4003      	ands	r3, r0
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cb0:	481f      	ldr	r0, [pc, #124]	@ (8003d30 <__NVIC_SetPriority+0xd4>)
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	33c0      	adds	r3, #192	@ 0xc0
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cc2:	e031      	b.n	8003d28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <__NVIC_SetPriority+0xd8>)
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0019      	movs	r1, r3
 8003ccc:	230f      	movs	r3, #15
 8003cce:	400b      	ands	r3, r1
 8003cd0:	3b08      	subs	r3, #8
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3306      	adds	r3, #6
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	3304      	adds	r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	1dfa      	adds	r2, r7, #7
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	00d2      	lsls	r2, r2, #3
 8003cea:	21ff      	movs	r1, #255	@ 0xff
 8003cec:	4091      	lsls	r1, r2
 8003cee:	000a      	movs	r2, r1
 8003cf0:	43d2      	mvns	r2, r2
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	22ff      	movs	r2, #255	@ 0xff
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0018      	movs	r0, r3
 8003d04:	2303      	movs	r3, #3
 8003d06:	4003      	ands	r3, r0
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d0c:	4809      	ldr	r0, [pc, #36]	@ (8003d34 <__NVIC_SetPriority+0xd8>)
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	001c      	movs	r4, r3
 8003d14:	230f      	movs	r3, #15
 8003d16:	4023      	ands	r3, r4
 8003d18:	3b08      	subs	r3, #8
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	3306      	adds	r3, #6
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	18c3      	adds	r3, r0, r3
 8003d24:	3304      	adds	r3, #4
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	46c0      	nop			@ (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b003      	add	sp, #12
 8003d2e:	bd90      	pop	{r4, r7, pc}
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	1e5a      	subs	r2, r3, #1
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	045b      	lsls	r3, r3, #17
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d301      	bcc.n	8003d50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e010      	b.n	8003d72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <SysTick_Config+0x44>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	3a01      	subs	r2, #1
 8003d56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d58:	2301      	movs	r3, #1
 8003d5a:	425b      	negs	r3, r3
 8003d5c:	2103      	movs	r1, #3
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff ff7c 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <SysTick_Config+0x44>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6a:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <SysTick_Config+0x44>)
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b002      	add	sp, #8
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	1c02      	adds	r2, r0, #0
 8003d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff ff5d 	bl	8003c5c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	0002      	movs	r2, r0
 8003db2:	1dfb      	adds	r3, r7, #7
 8003db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff ff33 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff ffaf 	bl	8003d38 <SysTick_Config>
 8003dda:	0003      	movs	r3, r0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e036      	b.n	8003e68 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2221      	movs	r2, #33	@ 0x21
 8003dfe:	2102      	movs	r1, #2
 8003e00:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_DMA_Init+0x8c>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 f9c4 	bl	80041d8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2221      	movs	r2, #33	@ 0x21
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	2100      	movs	r1, #0
 8003e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b004      	add	sp, #16
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	ffffc00f 	.word	0xffffc00f

08003e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2317      	movs	r3, #23
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	5c9b      	ldrb	r3, [r3, r2]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_DMA_Start_IT+0x24>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e04f      	b.n	8003f38 <HAL_DMA_Start_IT+0xc4>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	@ 0x21
 8003ea4:	5c9b      	ldrb	r3, [r3, r2]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d13a      	bne.n	8003f22 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2221      	movs	r2, #33	@ 0x21
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f954 	bl	800417e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	210e      	movs	r1, #14
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e00f      	b.n	8003f10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	210a      	movs	r1, #10
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e007      	b.n	8003f32 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f2a:	2317      	movs	r3, #23
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003f32:	2317      	movs	r3, #23
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	781b      	ldrb	r3, [r3, #0]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2221      	movs	r2, #33	@ 0x21
 8003f4c:	5c9b      	ldrb	r3, [r3, r2]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d008      	beq.n	8003f66 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2204      	movs	r2, #4
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e020      	b.n	8003fa8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	210e      	movs	r1, #14
 8003f72:	438a      	bics	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	438a      	bics	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4091      	lsls	r1, r2
 8003f92:	000a      	movs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2221      	movs	r2, #33	@ 0x21
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	210f      	movs	r1, #15
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2221      	movs	r2, #33	@ 0x21
 8003fc4:	5c9b      	ldrb	r3, [r3, r2]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d006      	beq.n	8003fda <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e028      	b.n	800402c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	210e      	movs	r1, #14
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	2101      	movs	r1, #1
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2221      	movs	r2, #33	@ 0x21
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	0010      	movs	r0, r2
 800402a:	4798      	blx	r3
    }
  }
  return status;
 800402c:	230f      	movs	r3, #15
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	781b      	ldrb	r3, [r3, #0]
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2204      	movs	r2, #4
 8004058:	409a      	lsls	r2, r3
 800405a:	0013      	movs	r3, r2
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	d024      	beq.n	80040ac <HAL_DMA_IRQHandler+0x72>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2204      	movs	r2, #4
 8004066:	4013      	ands	r3, r2
 8004068:	d020      	beq.n	80040ac <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2220      	movs	r2, #32
 8004072:	4013      	ands	r3, r2
 8004074:	d107      	bne.n	8004086 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2104      	movs	r1, #4
 8004082:	438a      	bics	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408e:	2104      	movs	r1, #4
 8004090:	4091      	lsls	r1, r2
 8004092:	000a      	movs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d100      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x66>
 800409e:	e06a      	b.n	8004176 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	0010      	movs	r0, r2
 80040a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040aa:	e064      	b.n	8004176 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	2202      	movs	r2, #2
 80040b2:	409a      	lsls	r2, r3
 80040b4:	0013      	movs	r3, r2
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4013      	ands	r3, r2
 80040ba:	d02b      	beq.n	8004114 <HAL_DMA_IRQHandler+0xda>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2202      	movs	r2, #2
 80040c0:	4013      	ands	r3, r2
 80040c2:	d027      	beq.n	8004114 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2220      	movs	r2, #32
 80040cc:	4013      	ands	r3, r2
 80040ce:	d10b      	bne.n	80040e8 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	210a      	movs	r1, #10
 80040dc:	438a      	bics	r2, r1
 80040de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2221      	movs	r2, #33	@ 0x21
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	2102      	movs	r1, #2
 80040f2:	4091      	lsls	r1, r2
 80040f4:	000a      	movs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d036      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	0010      	movs	r0, r2
 8004110:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004112:	e030      	b.n	8004176 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	2208      	movs	r2, #8
 800411a:	409a      	lsls	r2, r3
 800411c:	0013      	movs	r3, r2
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4013      	ands	r3, r2
 8004122:	d028      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13c>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2208      	movs	r2, #8
 8004128:	4013      	ands	r3, r2
 800412a:	d024      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	210e      	movs	r1, #14
 8004138:	438a      	bics	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	2101      	movs	r1, #1
 8004146:	4091      	lsls	r1, r2
 8004148:	000a      	movs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2221      	movs	r2, #33	@ 0x21
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	0010      	movs	r0, r2
 8004172:	4798      	blx	r3
    }
  }
}
 8004174:	e7ff      	b.n	8004176 <HAL_DMA_IRQHandler+0x13c>
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}

0800417e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	2101      	movs	r1, #1
 8004196:	4091      	lsls	r1, r2
 8004198:	000a      	movs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d108      	bne.n	80041be <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041bc:	e007      	b.n	80041ce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b004      	add	sp, #16
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a08      	ldr	r2, [pc, #32]	@ (8004208 <DMA_CalcBaseAndBitshift+0x30>)
 80041e6:	4694      	mov	ip, r2
 80041e8:	4463      	add	r3, ip
 80041ea:	2114      	movs	r1, #20
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fb ff8b 	bl	8000108 <__udivsi3>
 80041f2:	0003      	movs	r3, r0
 80041f4:	009a      	lsls	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a03      	ldr	r2, [pc, #12]	@ (800420c <DMA_CalcBaseAndBitshift+0x34>)
 80041fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004200:	46c0      	nop			@ (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}
 8004208:	bffdfff8 	.word	0xbffdfff8
 800420c:	40020000 	.word	0x40020000

08004210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800421e:	e149      	b.n	80044b4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2101      	movs	r1, #1
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4091      	lsls	r1, r2
 800422a:	000a      	movs	r2, r1
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d100      	bne.n	8004238 <HAL_GPIO_Init+0x28>
 8004236:	e13a      	b.n	80044ae <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	4013      	ands	r3, r2
 8004240:	2b01      	cmp	r3, #1
 8004242:	d005      	beq.n	8004250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2203      	movs	r2, #3
 800424a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800424c:	2b02      	cmp	r3, #2
 800424e:	d130      	bne.n	80042b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	409a      	lsls	r2, r3
 800425e:	0013      	movs	r3, r2
 8004260:	43da      	mvns	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	409a      	lsls	r2, r3
 8004272:	0013      	movs	r3, r2
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004286:	2201      	movs	r2, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	409a      	lsls	r2, r3
 800428c:	0013      	movs	r3, r2
 800428e:	43da      	mvns	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	2201      	movs	r2, #1
 800429e:	401a      	ands	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	409a      	lsls	r2, r3
 80042a4:	0013      	movs	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2203      	movs	r2, #3
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d017      	beq.n	80042ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	409a      	lsls	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	43da      	mvns	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	0013      	movs	r3, r2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2203      	movs	r2, #3
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d123      	bne.n	8004342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	08da      	lsrs	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	58d3      	ldr	r3, [r2, r3]
 8004306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2207      	movs	r2, #7
 800430c:	4013      	ands	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	220f      	movs	r2, #15
 8004312:	409a      	lsls	r2, r3
 8004314:	0013      	movs	r3, r2
 8004316:	43da      	mvns	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2107      	movs	r1, #7
 8004326:	400b      	ands	r3, r1
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	409a      	lsls	r2, r3
 800432c:	0013      	movs	r3, r2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	08da      	lsrs	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3208      	adds	r2, #8
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	6939      	ldr	r1, [r7, #16]
 8004340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	409a      	lsls	r2, r3
 8004350:	0013      	movs	r3, r2
 8004352:	43da      	mvns	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2203      	movs	r2, #3
 8004360:	401a      	ands	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	0013      	movs	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	23c0      	movs	r3, #192	@ 0xc0
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	4013      	ands	r3, r2
 8004380:	d100      	bne.n	8004384 <HAL_GPIO_Init+0x174>
 8004382:	e094      	b.n	80044ae <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004384:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <HAL_GPIO_Init+0x2bc>)
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	4b50      	ldr	r3, [pc, #320]	@ (80044cc <HAL_GPIO_Init+0x2bc>)
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
 8004390:	4b4e      	ldr	r3, [pc, #312]	@ (80044cc <HAL_GPIO_Init+0x2bc>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800439c:	4a4c      	ldr	r2, [pc, #304]	@ (80044d0 <HAL_GPIO_Init+0x2c0>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	3302      	adds	r3, #2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	589b      	ldr	r3, [r3, r2]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2203      	movs	r2, #3
 80043ae:	4013      	ands	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	220f      	movs	r2, #15
 80043b4:	409a      	lsls	r2, r3
 80043b6:	0013      	movs	r3, r2
 80043b8:	43da      	mvns	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	2390      	movs	r3, #144	@ 0x90
 80043c4:	05db      	lsls	r3, r3, #23
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d00d      	beq.n	80043e6 <HAL_GPIO_Init+0x1d6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a41      	ldr	r2, [pc, #260]	@ (80044d4 <HAL_GPIO_Init+0x2c4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d007      	beq.n	80043e2 <HAL_GPIO_Init+0x1d2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a40      	ldr	r2, [pc, #256]	@ (80044d8 <HAL_GPIO_Init+0x2c8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_GPIO_Init+0x1ce>
 80043da:	2302      	movs	r3, #2
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x1d8>
 80043de:	2305      	movs	r3, #5
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x1d8>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x1d8>
 80043e6:	2300      	movs	r3, #0
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	2103      	movs	r1, #3
 80043ec:	400a      	ands	r2, r1
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043f8:	4935      	ldr	r1, [pc, #212]	@ (80044d0 <HAL_GPIO_Init+0x2c0>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004406:	4b35      	ldr	r3, [pc, #212]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	43da      	mvns	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	035b      	lsls	r3, r3, #13
 800441e:	4013      	ands	r3, r2
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800442a:	4b2c      	ldr	r3, [pc, #176]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004430:	4b2a      	ldr	r3, [pc, #168]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43da      	mvns	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	2380      	movs	r3, #128	@ 0x80
 8004446:	039b      	lsls	r3, r3, #14
 8004448:	4013      	ands	r3, r2
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004454:	4b21      	ldr	r3, [pc, #132]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800445a:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	43da      	mvns	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	029b      	lsls	r3, r3, #10
 8004472:	4013      	ands	r3, r2
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800447e:	4b17      	ldr	r3, [pc, #92]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004484:	4b15      	ldr	r3, [pc, #84]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	43da      	mvns	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	025b      	lsls	r3, r3, #9
 800449c:	4013      	ands	r3, r2
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <HAL_GPIO_Init+0x2cc>)
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	40da      	lsrs	r2, r3
 80044bc:	1e13      	subs	r3, r2, #0
 80044be:	d000      	beq.n	80044c2 <HAL_GPIO_Init+0x2b2>
 80044c0:	e6ae      	b.n	8004220 <HAL_GPIO_Init+0x10>
  } 
}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b006      	add	sp, #24
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40010000 	.word	0x40010000
 80044d4:	48000400 	.word	0x48000400
 80044d8:	48000800 	.word	0x48000800
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	000a      	movs	r2, r1
 80044ea:	1cbb      	adds	r3, r7, #2
 80044ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	1cba      	adds	r2, r7, #2
 80044f4:	8812      	ldrh	r2, [r2, #0]
 80044f6:	4013      	ands	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80044fa:	230f      	movs	r3, #15
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e003      	b.n	800450c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004504:	230f      	movs	r3, #15
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800450c:	230f      	movs	r3, #15
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	781b      	ldrb	r3, [r3, #0]
  }
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	0008      	movs	r0, r1
 8004524:	0011      	movs	r1, r2
 8004526:	1cbb      	adds	r3, r7, #2
 8004528:	1c02      	adds	r2, r0, #0
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	1c7b      	adds	r3, r7, #1
 800452e:	1c0a      	adds	r2, r1, #0
 8004530:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004532:	1c7b      	adds	r3, r7, #1
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800453a:	1cbb      	adds	r3, r7, #2
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004542:	e003      	b.n	800454c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004544:	1cbb      	adds	r3, r7, #2
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800454c:	46c0      	nop			@ (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	b002      	add	sp, #8
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e08f      	b.n	8004686 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2241      	movs	r2, #65	@ 0x41
 800456a:	5c9b      	ldrb	r3, [r3, r2]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	2100      	movs	r1, #0
 8004578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f7fd f9bd 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2241      	movs	r2, #65	@ 0x41
 8004586:	2124      	movs	r1, #36	@ 0x24
 8004588:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2101      	movs	r1, #1
 8004596:	438a      	bics	r2, r1
 8004598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	493b      	ldr	r1, [pc, #236]	@ (8004690 <HAL_I2C_Init+0x13c>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4938      	ldr	r1, [pc, #224]	@ (8004694 <HAL_I2C_Init+0x140>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d108      	bne.n	80045d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2180      	movs	r1, #128	@ 0x80
 80045ca:	0209      	lsls	r1, r1, #8
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	e007      	b.n	80045e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2184      	movs	r1, #132	@ 0x84
 80045dc:	0209      	lsls	r1, r1, #8
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d109      	bne.n	80045fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2180      	movs	r1, #128	@ 0x80
 80045f6:	0109      	lsls	r1, r1, #4
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	e007      	b.n	800460e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4923      	ldr	r1, [pc, #140]	@ (8004698 <HAL_I2C_Init+0x144>)
 800460a:	400a      	ands	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4920      	ldr	r1, [pc, #128]	@ (800469c <HAL_I2C_Init+0x148>)
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	491a      	ldr	r1, [pc, #104]	@ (8004694 <HAL_I2C_Init+0x140>)
 800462a:	400a      	ands	r2, r1
 800462c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	431a      	orrs	r2, r3
 8004638:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2101      	movs	r1, #1
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2241      	movs	r2, #65	@ 0x41
 8004672:	2120      	movs	r1, #32
 8004674:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2242      	movs	r2, #66	@ 0x42
 8004680:	2100      	movs	r1, #0
 8004682:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b002      	add	sp, #8
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	f0ffffff 	.word	0xf0ffffff
 8004694:	ffff7fff 	.word	0xffff7fff
 8004698:	fffff7ff 	.word	0xfffff7ff
 800469c:	02008000 	.word	0x02008000

080046a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2241      	movs	r2, #65	@ 0x41
 80046ae:	5c9b      	ldrb	r3, [r3, r2]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d138      	bne.n	8004728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2240      	movs	r2, #64	@ 0x40
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e032      	b.n	800472a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2240      	movs	r2, #64	@ 0x40
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2241      	movs	r2, #65	@ 0x41
 80046d0:	2124      	movs	r1, #36	@ 0x24
 80046d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4911      	ldr	r1, [pc, #68]	@ (8004734 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2241      	movs	r2, #65	@ 0x41
 8004718:	2120      	movs	r1, #32
 800471a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2240      	movs	r2, #64	@ 0x40
 8004720:	2100      	movs	r1, #0
 8004722:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	ffffefff 	.word	0xffffefff

08004738 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2241      	movs	r2, #65	@ 0x41
 8004746:	5c9b      	ldrb	r3, [r3, r2]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d139      	bne.n	80047c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2240      	movs	r2, #64	@ 0x40
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004758:	2302      	movs	r3, #2
 800475a:	e033      	b.n	80047c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2240      	movs	r2, #64	@ 0x40
 8004760:	2101      	movs	r1, #1
 8004762:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2241      	movs	r2, #65	@ 0x41
 8004768:	2124      	movs	r1, #36	@ 0x24
 800476a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	438a      	bics	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a11      	ldr	r2, [pc, #68]	@ (80047cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2101      	movs	r1, #1
 80047aa:	430a      	orrs	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2241      	movs	r2, #65	@ 0x41
 80047b2:	2120      	movs	r1, #32
 80047b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2240      	movs	r2, #64	@ 0x40
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e000      	b.n	80047c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
  }
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	fffff0ff 	.word	0xfffff0ff

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e301      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2201      	movs	r2, #1
 80047e8:	4013      	ands	r3, r2
 80047ea:	d100      	bne.n	80047ee <HAL_RCC_OscConfig+0x1e>
 80047ec:	e08d      	b.n	800490a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047ee:	4bc3      	ldr	r3, [pc, #780]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	220c      	movs	r2, #12
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d00e      	beq.n	8004818 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047fa:	4bc0      	ldr	r3, [pc, #768]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	220c      	movs	r2, #12
 8004800:	4013      	ands	r3, r2
 8004802:	2b08      	cmp	r3, #8
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x64>
 8004806:	4bbd      	ldr	r3, [pc, #756]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	025b      	lsls	r3, r3, #9
 800480e:	401a      	ands	r2, r3
 8004810:	2380      	movs	r3, #128	@ 0x80
 8004812:	025b      	lsls	r3, r3, #9
 8004814:	429a      	cmp	r2, r3
 8004816:	d10d      	bne.n	8004834 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	4bb8      	ldr	r3, [pc, #736]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	4013      	ands	r3, r2
 8004822:	d100      	bne.n	8004826 <HAL_RCC_OscConfig+0x56>
 8004824:	e070      	b.n	8004908 <HAL_RCC_OscConfig+0x138>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d000      	beq.n	8004830 <HAL_RCC_OscConfig+0x60>
 800482e:	e06b      	b.n	8004908 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e2d8      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <HAL_RCC_OscConfig+0x7c>
 800483c:	4baf      	ldr	r3, [pc, #700]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4bae      	ldr	r3, [pc, #696]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004842:	2180      	movs	r1, #128	@ 0x80
 8004844:	0249      	lsls	r1, r1, #9
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e02f      	b.n	80048ac <HAL_RCC_OscConfig+0xdc>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x9e>
 8004854:	4ba9      	ldr	r3, [pc, #676]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4ba8      	ldr	r3, [pc, #672]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800485a:	49a9      	ldr	r1, [pc, #676]	@ (8004b00 <HAL_RCC_OscConfig+0x330>)
 800485c:	400a      	ands	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	4ba6      	ldr	r3, [pc, #664]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4ba5      	ldr	r3, [pc, #660]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004866:	49a7      	ldr	r1, [pc, #668]	@ (8004b04 <HAL_RCC_OscConfig+0x334>)
 8004868:	400a      	ands	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e01e      	b.n	80048ac <HAL_RCC_OscConfig+0xdc>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d10e      	bne.n	8004894 <HAL_RCC_OscConfig+0xc4>
 8004876:	4ba1      	ldr	r3, [pc, #644]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4ba0      	ldr	r3, [pc, #640]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	02c9      	lsls	r1, r1, #11
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	4b9d      	ldr	r3, [pc, #628]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b9c      	ldr	r3, [pc, #624]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800488a:	2180      	movs	r1, #128	@ 0x80
 800488c:	0249      	lsls	r1, r1, #9
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0xdc>
 8004894:	4b99      	ldr	r3, [pc, #612]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b98      	ldr	r3, [pc, #608]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800489a:	4999      	ldr	r1, [pc, #612]	@ (8004b00 <HAL_RCC_OscConfig+0x330>)
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	4b96      	ldr	r3, [pc, #600]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b95      	ldr	r3, [pc, #596]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80048a6:	4997      	ldr	r1, [pc, #604]	@ (8004b04 <HAL_RCC_OscConfig+0x334>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d014      	beq.n	80048de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fe fbe2 	bl	800307c <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048be:	f7fe fbdd 	bl	800307c <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b64      	cmp	r3, #100	@ 0x64
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e28a      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d0:	4b8a      	ldr	r3, [pc, #552]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	@ 0x80
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	4013      	ands	r3, r2
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0xee>
 80048dc:	e015      	b.n	800490a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fe fbcd 	bl	800307c <HAL_GetTick>
 80048e2:	0003      	movs	r3, r0
 80048e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fe fbc8 	bl	800307c <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	@ 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e275      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fa:	4b80      	ldr	r3, [pc, #512]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	@ 0x80
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	4013      	ands	r3, r2
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x118>
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2202      	movs	r2, #2
 8004910:	4013      	ands	r3, r2
 8004912:	d100      	bne.n	8004916 <HAL_RCC_OscConfig+0x146>
 8004914:	e069      	b.n	80049ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004916:	4b79      	ldr	r3, [pc, #484]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	220c      	movs	r2, #12
 800491c:	4013      	ands	r3, r2
 800491e:	d00b      	beq.n	8004938 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004920:	4b76      	ldr	r3, [pc, #472]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	220c      	movs	r2, #12
 8004926:	4013      	ands	r3, r2
 8004928:	2b08      	cmp	r3, #8
 800492a:	d11c      	bne.n	8004966 <HAL_RCC_OscConfig+0x196>
 800492c:	4b73      	ldr	r3, [pc, #460]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	025b      	lsls	r3, r3, #9
 8004934:	4013      	ands	r3, r2
 8004936:	d116      	bne.n	8004966 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004938:	4b70      	ldr	r3, [pc, #448]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	4013      	ands	r3, r2
 8004940:	d005      	beq.n	800494e <HAL_RCC_OscConfig+0x17e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e24b      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4b6b      	ldr	r3, [pc, #428]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	22f8      	movs	r2, #248	@ 0xf8
 8004954:	4393      	bics	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	00da      	lsls	r2, r3, #3
 800495e:	4b67      	ldr	r3, [pc, #412]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004964:	e041      	b.n	80049ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d024      	beq.n	80049b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800496e:	4b63      	ldr	r3, [pc, #396]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b62      	ldr	r3, [pc, #392]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004974:	2101      	movs	r1, #1
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fe fb7f 	bl	800307c <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004984:	f7fe fb7a 	bl	800307c <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e227      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004996:	4b59      	ldr	r3, [pc, #356]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2202      	movs	r2, #2
 800499c:	4013      	ands	r3, r2
 800499e:	d0f1      	beq.n	8004984 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b56      	ldr	r3, [pc, #344]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	22f8      	movs	r2, #248	@ 0xf8
 80049a6:	4393      	bics	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00da      	lsls	r2, r3, #3
 80049b0:	4b52      	ldr	r3, [pc, #328]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e018      	b.n	80049ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b8:	4b50      	ldr	r3, [pc, #320]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b4f      	ldr	r3, [pc, #316]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80049be:	2101      	movs	r1, #1
 80049c0:	438a      	bics	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe fb5a 	bl	800307c <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ce:	f7fe fb55 	bl	800307c <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e202      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e0:	4b46      	ldr	r3, [pc, #280]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2202      	movs	r2, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	d1f1      	bne.n	80049ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2208      	movs	r2, #8
 80049f0:	4013      	ands	r3, r2
 80049f2:	d036      	beq.n	8004a62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d019      	beq.n	8004a30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fc:	4b3f      	ldr	r3, [pc, #252]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 80049fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a00:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a02:	2101      	movs	r1, #1
 8004a04:	430a      	orrs	r2, r1
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a08:	f7fe fb38 	bl	800307c <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fe fb33 	bl	800307c <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1e0      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a24:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	2202      	movs	r2, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d0f1      	beq.n	8004a12 <HAL_RCC_OscConfig+0x242>
 8004a2e:	e018      	b.n	8004a62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a30:	4b32      	ldr	r3, [pc, #200]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a34:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	438a      	bics	r2, r1
 8004a3a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3c:	f7fe fb1e 	bl	800307c <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a46:	f7fe fb19 	bl	800307c <HAL_GetTick>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1c6      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d1f1      	bne.n	8004a46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2204      	movs	r2, #4
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <HAL_RCC_OscConfig+0x29e>
 8004a6c:	e0b4      	b.n	8004bd8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6e:	201f      	movs	r0, #31
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a76:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	2380      	movs	r3, #128	@ 0x80
 8004a7c:	055b      	lsls	r3, r3, #21
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d110      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	4b1d      	ldr	r3, [pc, #116]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	0549      	lsls	r1, r1, #21
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	055b      	lsls	r3, r3, #21
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a9e:	183b      	adds	r3, r7, r0
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	4b18      	ldr	r3, [pc, #96]	@ (8004b08 <HAL_RCC_OscConfig+0x338>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	@ 0x80
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	d11a      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab0:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <HAL_RCC_OscConfig+0x338>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <HAL_RCC_OscConfig+0x338>)
 8004ab6:	2180      	movs	r1, #128	@ 0x80
 8004ab8:	0049      	lsls	r1, r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fadd 	bl	800307c <HAL_GetTick>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac8:	f7fe fad8 	bl	800307c <HAL_GetTick>
 8004acc:	0002      	movs	r2, r0
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e185      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_OscConfig+0x338>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10e      	bne.n	8004b0c <HAL_RCC_OscConfig+0x33c>
 8004aee:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	4b02      	ldr	r3, [pc, #8]	@ (8004afc <HAL_RCC_OscConfig+0x32c>)
 8004af4:	2101      	movs	r1, #1
 8004af6:	430a      	orrs	r2, r1
 8004af8:	621a      	str	r2, [r3, #32]
 8004afa:	e035      	b.n	8004b68 <HAL_RCC_OscConfig+0x398>
 8004afc:	40021000 	.word	0x40021000
 8004b00:	fffeffff 	.word	0xfffeffff
 8004b04:	fffbffff 	.word	0xfffbffff
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10c      	bne.n	8004b2e <HAL_RCC_OscConfig+0x35e>
 8004b14:	4bb6      	ldr	r3, [pc, #728]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	4bb5      	ldr	r3, [pc, #724]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	4bb3      	ldr	r3, [pc, #716]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b22:	6a1a      	ldr	r2, [r3, #32]
 8004b24:	4bb2      	ldr	r3, [pc, #712]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b26:	2104      	movs	r1, #4
 8004b28:	438a      	bics	r2, r1
 8004b2a:	621a      	str	r2, [r3, #32]
 8004b2c:	e01c      	b.n	8004b68 <HAL_RCC_OscConfig+0x398>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x380>
 8004b36:	4bae      	ldr	r3, [pc, #696]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	4bad      	ldr	r3, [pc, #692]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b3c:	2104      	movs	r1, #4
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	621a      	str	r2, [r3, #32]
 8004b42:	4bab      	ldr	r3, [pc, #684]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	4baa      	ldr	r3, [pc, #680]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b48:	2101      	movs	r1, #1
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	621a      	str	r2, [r3, #32]
 8004b4e:	e00b      	b.n	8004b68 <HAL_RCC_OscConfig+0x398>
 8004b50:	4ba7      	ldr	r3, [pc, #668]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	4ba6      	ldr	r3, [pc, #664]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b56:	2101      	movs	r1, #1
 8004b58:	438a      	bics	r2, r1
 8004b5a:	621a      	str	r2, [r3, #32]
 8004b5c:	4ba4      	ldr	r3, [pc, #656]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	4ba3      	ldr	r3, [pc, #652]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b62:	2104      	movs	r1, #4
 8004b64:	438a      	bics	r2, r1
 8004b66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d014      	beq.n	8004b9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b70:	f7fe fa84 	bl	800307c <HAL_GetTick>
 8004b74:	0003      	movs	r3, r0
 8004b76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b78:	e009      	b.n	8004b8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fe fa7f 	bl	800307c <HAL_GetTick>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	4a9b      	ldr	r2, [pc, #620]	@ (8004df4 <HAL_RCC_OscConfig+0x624>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e12b      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	4b98      	ldr	r3, [pc, #608]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	2202      	movs	r2, #2
 8004b94:	4013      	ands	r3, r2
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x3aa>
 8004b98:	e013      	b.n	8004bc2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fe fa6f 	bl	800307c <HAL_GetTick>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba2:	e009      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fe fa6a 	bl	800307c <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	4a91      	ldr	r2, [pc, #580]	@ (8004df4 <HAL_RCC_OscConfig+0x624>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e116      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bcc:	4b88      	ldr	r3, [pc, #544]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	4b87      	ldr	r3, [pc, #540]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bd2:	4989      	ldr	r1, [pc, #548]	@ (8004df8 <HAL_RCC_OscConfig+0x628>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2210      	movs	r2, #16
 8004bde:	4013      	ands	r3, r2
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d12a      	bne.n	8004c40 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004bea:	4b81      	ldr	r3, [pc, #516]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bee:	4b80      	ldr	r3, [pc, #512]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c02:	f7fe fa3b 	bl	800307c <HAL_GetTick>
 8004c06:	0003      	movs	r3, r0
 8004c08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c0c:	f7fe fa36 	bl	800307c <HAL_GetTick>
 8004c10:	0002      	movs	r2, r0
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0e3      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c1e:	4b74      	ldr	r3, [pc, #464]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c22:	2202      	movs	r2, #2
 8004c24:	4013      	ands	r3, r2
 8004c26:	d0f1      	beq.n	8004c0c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c28:	4b71      	ldr	r3, [pc, #452]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2c:	22f8      	movs	r2, #248	@ 0xf8
 8004c2e:	4393      	bics	r3, r2
 8004c30:	0019      	movs	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	00da      	lsls	r2, r3, #3
 8004c38:	4b6d      	ldr	r3, [pc, #436]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c3e:	e034      	b.n	8004caa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	3305      	adds	r3, #5
 8004c46:	d111      	bne.n	8004c6c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004c48:	4b69      	ldr	r3, [pc, #420]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4c:	4b68      	ldr	r3, [pc, #416]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c4e:	2104      	movs	r1, #4
 8004c50:	438a      	bics	r2, r1
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c54:	4b66      	ldr	r3, [pc, #408]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c58:	22f8      	movs	r2, #248	@ 0xf8
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	00da      	lsls	r2, r3, #3
 8004c64:	4b62      	ldr	r3, [pc, #392]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c66:	430a      	orrs	r2, r1
 8004c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c6a:	e01e      	b.n	8004caa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c6c:	4b60      	ldr	r3, [pc, #384]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c70:	4b5f      	ldr	r3, [pc, #380]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c72:	2104      	movs	r1, #4
 8004c74:	430a      	orrs	r2, r1
 8004c76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004c78:	4b5d      	ldr	r3, [pc, #372]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004c7e:	2101      	movs	r1, #1
 8004c80:	438a      	bics	r2, r1
 8004c82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c84:	f7fe f9fa 	bl	800307c <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c8e:	f7fe f9f5 	bl	800307c <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0a2      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ca0:	4b53      	ldr	r3, [pc, #332]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d1f1      	bne.n	8004c8e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4e4>
 8004cb2:	e097      	b.n	8004de4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	220c      	movs	r2, #12
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d100      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x4f2>
 8004cc0:	e06b      	b.n	8004d9a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d14c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b49      	ldr	r3, [pc, #292]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004cd0:	494a      	ldr	r1, [pc, #296]	@ (8004dfc <HAL_RCC_OscConfig+0x62c>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fe f9d1 	bl	800307c <HAL_GetTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fe f9cc 	bl	800307c <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e079      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	@ 0x80
 8004cf8:	049b      	lsls	r3, r3, #18
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	220f      	movs	r2, #15
 8004d04:	4393      	bics	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0c:	4b38      	ldr	r3, [pc, #224]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d12:	4b37      	ldr	r3, [pc, #220]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4a3a      	ldr	r2, [pc, #232]	@ (8004e00 <HAL_RCC_OscConfig+0x630>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	431a      	orrs	r2, r3
 8004d26:	4b32      	ldr	r3, [pc, #200]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b30      	ldr	r3, [pc, #192]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b2f      	ldr	r3, [pc, #188]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d32:	2180      	movs	r1, #128	@ 0x80
 8004d34:	0449      	lsls	r1, r1, #17
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fe f99f 	bl	800307c <HAL_GetTick>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fe f99a 	bl	800307c <HAL_GetTick>
 8004d48:	0002      	movs	r2, r0
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e047      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d56:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	049b      	lsls	r3, r3, #18
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x574>
 8004d62:	e03f      	b.n	8004de4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b22      	ldr	r3, [pc, #136]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d6a:	4924      	ldr	r1, [pc, #144]	@ (8004dfc <HAL_RCC_OscConfig+0x62c>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fe f984 	bl	800307c <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fe f97f 	bl	800307c <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e02c      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d8c:	4b18      	ldr	r3, [pc, #96]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	049b      	lsls	r3, r3, #18
 8004d94:	4013      	ands	r3, r2
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x5aa>
 8004d98:	e024      	b.n	8004de4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e01f      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004da6:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004dac:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <HAL_RCC_OscConfig+0x620>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	025b      	lsls	r3, r3, #9
 8004db8:	401a      	ands	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10e      	bne.n	8004de0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	23f0      	movs	r3, #240	@ 0xf0
 8004dd4:	039b      	lsls	r3, r3, #14
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b008      	add	sp, #32
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	40021000 	.word	0x40021000
 8004df4:	00001388 	.word	0x00001388
 8004df8:	efffffff 	.word	0xefffffff
 8004dfc:	feffffff 	.word	0xfeffffff
 8004e00:	ffc2ffff 	.word	0xffc2ffff

08004e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b3      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e18:	4b5b      	ldr	r3, [pc, #364]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	4013      	ands	r3, r2
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d911      	bls.n	8004e4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b58      	ldr	r3, [pc, #352]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	0019      	movs	r1, r3
 8004e30:	4b55      	ldr	r3, [pc, #340]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e38:	4b53      	ldr	r3, [pc, #332]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e09a      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d015      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d006      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	4b4a      	ldr	r3, [pc, #296]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004e64:	21e0      	movs	r1, #224	@ 0xe0
 8004e66:	00c9      	lsls	r1, r1, #3
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b47      	ldr	r3, [pc, #284]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	22f0      	movs	r2, #240	@ 0xf0
 8004e72:	4393      	bics	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4b44      	ldr	r3, [pc, #272]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	4013      	ands	r3, r2
 8004e88:	d040      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	029b      	lsls	r3, r3, #10
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d114      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06e      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b38      	ldr	r3, [pc, #224]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	@ 0x80
 8004eb0:	049b      	lsls	r3, r3, #18
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e062      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b34      	ldr	r3, [pc, #208]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e05b      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ec8:	4b30      	ldr	r3, [pc, #192]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2203      	movs	r2, #3
 8004ece:	4393      	bics	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fe f8ce 	bl	800307c <HAL_GetTick>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee4:	e009      	b.n	8004efa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee6:	f7fe f8c9 	bl	800307c <HAL_GetTick>
 8004eea:	0002      	movs	r2, r0
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	4a27      	ldr	r2, [pc, #156]	@ (8004f90 <HAL_RCC_ClockConfig+0x18c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e042      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b24      	ldr	r3, [pc, #144]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	220c      	movs	r2, #12
 8004f00:	401a      	ands	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1ec      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	4013      	ands	r3, r2
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d211      	bcs.n	8004f3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4393      	bics	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	4b18      	ldr	r3, [pc, #96]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2c:	4b16      	ldr	r3, [pc, #88]	@ (8004f88 <HAL_RCC_ClockConfig+0x184>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e020      	b.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f48:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a11      	ldr	r2, [pc, #68]	@ (8004f94 <HAL_RCC_ClockConfig+0x190>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f5c:	f000 f820 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004f60:	0001      	movs	r1, r0
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <HAL_RCC_ClockConfig+0x188>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	220f      	movs	r2, #15
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f98 <HAL_RCC_ClockConfig+0x194>)
 8004f6e:	5cd3      	ldrb	r3, [r2, r3]
 8004f70:	000a      	movs	r2, r1
 8004f72:	40da      	lsrs	r2, r3
 8004f74:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCC_ClockConfig+0x198>)
 8004f76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7fe f839 	bl	8002ff0 <HAL_InitTick>
  
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b004      	add	sp, #16
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	00001388 	.word	0x00001388
 8004f94:	fffff8ff 	.word	0xfffff8ff
 8004f98:	08007d08 	.word	0x08007d08
 8004f9c:	20000010 	.word	0x20000010

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004fba:	4b20      	ldr	r3, [pc, #128]	@ (800503c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	220c      	movs	r2, #12
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8004fce:	e02c      	b.n	800502a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fd2:	613b      	str	r3, [r7, #16]
      break;
 8004fd4:	e02c      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	220f      	movs	r2, #15
 8004fdc:	4013      	ands	r3, r2
 8004fde:	4a19      	ldr	r2, [pc, #100]	@ (8005044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe0:	5cd3      	ldrb	r3, [r2, r3]
 8004fe2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004fe4:	4b15      	ldr	r3, [pc, #84]	@ (800503c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	220f      	movs	r2, #15
 8004fea:	4013      	ands	r3, r2
 8004fec:	4a16      	ldr	r2, [pc, #88]	@ (8005048 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004fee:	5cd3      	ldrb	r3, [r2, r3]
 8004ff0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	025b      	lsls	r3, r3, #9
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4810      	ldr	r0, [pc, #64]	@ (8005040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005000:	f7fb f882 	bl	8000108 <__udivsi3>
 8005004:	0003      	movs	r3, r0
 8005006:	001a      	movs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4353      	muls	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e009      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	000a      	movs	r2, r1
 8005014:	0152      	lsls	r2, r2, #5
 8005016:	1a52      	subs	r2, r2, r1
 8005018:	0193      	lsls	r3, r2, #6
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	185b      	adds	r3, r3, r1
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	613b      	str	r3, [r7, #16]
      break;
 8005028:	e002      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800502a:	4b08      	ldr	r3, [pc, #32]	@ (800504c <HAL_RCC_GetSysClockFreq+0xac>)
 800502c:	613b      	str	r3, [r7, #16]
      break;
 800502e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005030:	693b      	ldr	r3, [r7, #16]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b006      	add	sp, #24
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	40021000 	.word	0x40021000
 8005040:	016e3600 	.word	0x016e3600
 8005044:	08007d20 	.word	0x08007d20
 8005048:	08007d30 	.word	0x08007d30
 800504c:	007a1200 	.word	0x007a1200

08005050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005054:	4b02      	ldr	r3, [pc, #8]	@ (8005060 <HAL_RCC_GetHCLKFreq+0x10>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	20000010 	.word	0x20000010

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005068:	f7ff fff2 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 800506c:	0001      	movs	r1, r0
 800506e:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	2207      	movs	r2, #7
 8005076:	4013      	ands	r3, r2
 8005078:	4a04      	ldr	r2, [pc, #16]	@ (800508c <HAL_RCC_GetPCLK1Freq+0x28>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	40d9      	lsrs	r1, r3
 800507e:	000b      	movs	r3, r1
}    
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	40021000 	.word	0x40021000
 800508c:	08007d18 	.word	0x08007d18

08005090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	025b      	lsls	r3, r3, #9
 80050a8:	4013      	ands	r3, r2
 80050aa:	d100      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80050ac:	e08e      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2017      	movs	r0, #23
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b6:	4b57      	ldr	r3, [pc, #348]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	055b      	lsls	r3, r3, #21
 80050be:	4013      	ands	r3, r2
 80050c0:	d110      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	4b54      	ldr	r3, [pc, #336]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	4b53      	ldr	r3, [pc, #332]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c8:	2180      	movs	r1, #128	@ 0x80
 80050ca:	0549      	lsls	r1, r1, #21
 80050cc:	430a      	orrs	r2, r1
 80050ce:	61da      	str	r2, [r3, #28]
 80050d0:	4b50      	ldr	r3, [pc, #320]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	055b      	lsls	r3, r3, #21
 80050d8:	4013      	ands	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050de:	183b      	adds	r3, r7, r0
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4013      	ands	r3, r2
 80050ee:	d11a      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f0:	4b49      	ldr	r3, [pc, #292]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b48      	ldr	r3, [pc, #288]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80050f6:	2180      	movs	r1, #128	@ 0x80
 80050f8:	0049      	lsls	r1, r1, #1
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fe:	f7fd ffbd 	bl	800307c <HAL_GetTick>
 8005102:	0003      	movs	r3, r0
 8005104:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	e008      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005108:	f7fd ffb8 	bl	800307c <HAL_GetTick>
 800510c:	0002      	movs	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	@ 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e077      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b3f      	ldr	r3, [pc, #252]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2380      	movs	r3, #128	@ 0x80
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4013      	ands	r3, r2
 8005124:	d0f0      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005126:	4b3b      	ldr	r3, [pc, #236]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	23c0      	movs	r3, #192	@ 0xc0
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4013      	ands	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d034      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	23c0      	movs	r3, #192	@ 0xc0
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4013      	ands	r3, r2
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	429a      	cmp	r2, r3
 8005146:	d02c      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005148:	4b32      	ldr	r3, [pc, #200]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	4a33      	ldr	r2, [pc, #204]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800514e:	4013      	ands	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005152:	4b30      	ldr	r3, [pc, #192]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	4b2f      	ldr	r3, [pc, #188]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	0249      	lsls	r1, r1, #9
 800515c:	430a      	orrs	r2, r1
 800515e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005160:	4b2c      	ldr	r3, [pc, #176]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	4b2b      	ldr	r3, [pc, #172]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005166:	492e      	ldr	r1, [pc, #184]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005168:	400a      	ands	r2, r1
 800516a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800516c:	4b29      	ldr	r3, [pc, #164]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	4013      	ands	r3, r2
 8005178:	d013      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517a:	f7fd ff7f 	bl	800307c <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005182:	e009      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fd ff7a 	bl	800307c <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	4a25      	ldr	r2, [pc, #148]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e038      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	4b1e      	ldr	r3, [pc, #120]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	2202      	movs	r2, #2
 800519e:	4013      	ands	r3, r2
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	0019      	movs	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	4b18      	ldr	r3, [pc, #96]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051b2:	430a      	orrs	r2, r1
 80051b4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051b6:	2317      	movs	r3, #23
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b14      	ldr	r3, [pc, #80]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	4b13      	ldr	r3, [pc, #76]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051c6:	4918      	ldr	r1, [pc, #96]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	4013      	ands	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	2203      	movs	r2, #3
 80051dc:	4393      	bics	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051e6:	430a      	orrs	r2, r1
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2220      	movs	r2, #32
 80051f0:	4013      	ands	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051f4:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	2210      	movs	r2, #16
 80051fa:	4393      	bics	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	4b04      	ldr	r3, [pc, #16]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005204:	430a      	orrs	r2, r1
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b006      	add	sp, #24
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
 800521c:	fffffcff 	.word	0xfffffcff
 8005220:	fffeffff 	.word	0xfffeffff
 8005224:	00001388 	.word	0x00001388
 8005228:	efffffff 	.word	0xefffffff

0800522c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e042      	b.n	80052c4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	223d      	movs	r2, #61	@ 0x3d
 8005242:	5c9b      	ldrb	r3, [r3, r2]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d107      	bne.n	800525a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	223c      	movs	r2, #60	@ 0x3c
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0018      	movs	r0, r3
 8005256:	f7fd fcdb 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	223d      	movs	r2, #61	@ 0x3d
 800525e:	2102      	movs	r1, #2
 8005260:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	0019      	movs	r1, r3
 800526c:	0010      	movs	r0, r2
 800526e:	f000 fe01 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2246      	movs	r2, #70	@ 0x46
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	223e      	movs	r2, #62	@ 0x3e
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	223f      	movs	r2, #63	@ 0x3f
 8005286:	2101      	movs	r1, #1
 8005288:	5499      	strb	r1, [r3, r2]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2240      	movs	r2, #64	@ 0x40
 800528e:	2101      	movs	r1, #1
 8005290:	5499      	strb	r1, [r3, r2]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2241      	movs	r2, #65	@ 0x41
 8005296:	2101      	movs	r1, #1
 8005298:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2242      	movs	r2, #66	@ 0x42
 800529e:	2101      	movs	r1, #1
 80052a0:	5499      	strb	r1, [r3, r2]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2243      	movs	r2, #67	@ 0x43
 80052a6:	2101      	movs	r1, #1
 80052a8:	5499      	strb	r1, [r3, r2]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2244      	movs	r2, #68	@ 0x44
 80052ae:	2101      	movs	r1, #1
 80052b0:	5499      	strb	r1, [r3, r2]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2245      	movs	r2, #69	@ 0x45
 80052b6:	2101      	movs	r1, #1
 80052b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	223d      	movs	r2, #61	@ 0x3d
 80052be:	2101      	movs	r1, #1
 80052c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b002      	add	sp, #8
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e042      	b.n	8005364 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	223d      	movs	r2, #61	@ 0x3d
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	223c      	movs	r2, #60	@ 0x3c
 80052ee:	2100      	movs	r1, #0
 80052f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f000 f839 	bl	800536c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	223d      	movs	r2, #61	@ 0x3d
 80052fe:	2102      	movs	r1, #2
 8005300:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3304      	adds	r3, #4
 800530a:	0019      	movs	r1, r3
 800530c:	0010      	movs	r0, r2
 800530e:	f000 fdb1 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2246      	movs	r2, #70	@ 0x46
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	223e      	movs	r2, #62	@ 0x3e
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	223f      	movs	r2, #63	@ 0x3f
 8005326:	2101      	movs	r1, #1
 8005328:	5499      	strb	r1, [r3, r2]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2240      	movs	r2, #64	@ 0x40
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2241      	movs	r2, #65	@ 0x41
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2242      	movs	r2, #66	@ 0x42
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2243      	movs	r2, #67	@ 0x43
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2244      	movs	r2, #68	@ 0x44
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2245      	movs	r2, #69	@ 0x45
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223d      	movs	r2, #61	@ 0x3d
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <HAL_TIM_PWM_Start+0x22>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	223e      	movs	r2, #62	@ 0x3e
 8005390:	5c9b      	ldrb	r3, [r3, r2]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	1e5a      	subs	r2, r3, #1
 8005398:	4193      	sbcs	r3, r2
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e01f      	b.n	80053de <HAL_TIM_PWM_Start+0x62>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d108      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x3a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	223f      	movs	r2, #63	@ 0x3f
 80053a8:	5c9b      	ldrb	r3, [r3, r2]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	4193      	sbcs	r3, r2
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e013      	b.n	80053de <HAL_TIM_PWM_Start+0x62>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d108      	bne.n	80053ce <HAL_TIM_PWM_Start+0x52>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2240      	movs	r2, #64	@ 0x40
 80053c0:	5c9b      	ldrb	r3, [r3, r2]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	4193      	sbcs	r3, r2
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e007      	b.n	80053de <HAL_TIM_PWM_Start+0x62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2241      	movs	r2, #65	@ 0x41
 80053d2:	5c9b      	ldrb	r3, [r3, r2]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	1e5a      	subs	r2, r3, #1
 80053da:	4193      	sbcs	r3, r2
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06a      	b.n	80054bc <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x7a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	223e      	movs	r2, #62	@ 0x3e
 80053f0:	2102      	movs	r1, #2
 80053f2:	5499      	strb	r1, [r3, r2]
 80053f4:	e013      	b.n	800541e <HAL_TIM_PWM_Start+0xa2>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start+0x8a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	223f      	movs	r2, #63	@ 0x3f
 8005400:	2102      	movs	r1, #2
 8005402:	5499      	strb	r1, [r3, r2]
 8005404:	e00b      	b.n	800541e <HAL_TIM_PWM_Start+0xa2>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d104      	bne.n	8005416 <HAL_TIM_PWM_Start+0x9a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	2102      	movs	r1, #2
 8005412:	5499      	strb	r1, [r3, r2]
 8005414:	e003      	b.n	800541e <HAL_TIM_PWM_Start+0xa2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2241      	movs	r2, #65	@ 0x41
 800541a:	2102      	movs	r1, #2
 800541c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	0018      	movs	r0, r3
 8005428:	f001 f940 	bl	80066ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a24      	ldr	r2, [pc, #144]	@ (80054c4 <HAL_TIM_PWM_Start+0x148>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_TIM_PWM_Start+0xce>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a23      	ldr	r2, [pc, #140]	@ (80054c8 <HAL_TIM_PWM_Start+0x14c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_TIM_PWM_Start+0xce>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a21      	ldr	r2, [pc, #132]	@ (80054cc <HAL_TIM_PWM_Start+0x150>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_Start+0xd2>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_TIM_PWM_Start+0xd4>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2180      	movs	r1, #128	@ 0x80
 8005460:	0209      	lsls	r1, r1, #8
 8005462:	430a      	orrs	r2, r1
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a16      	ldr	r2, [pc, #88]	@ (80054c4 <HAL_TIM_PWM_Start+0x148>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00a      	beq.n	8005486 <HAL_TIM_PWM_Start+0x10a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	2380      	movs	r3, #128	@ 0x80
 8005476:	05db      	lsls	r3, r3, #23
 8005478:	429a      	cmp	r2, r3
 800547a:	d004      	beq.n	8005486 <HAL_TIM_PWM_Start+0x10a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <HAL_TIM_PWM_Start+0x154>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2207      	movs	r2, #7
 800548e:	4013      	ands	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d010      	beq.n	80054ba <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	430a      	orrs	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	e007      	b.n	80054ba <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2101      	movs	r1, #1
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b004      	add	sp, #16
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	40000400 	.word	0x40000400

080054d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e042      	b.n	800556c <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	223d      	movs	r2, #61	@ 0x3d
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	223c      	movs	r2, #60	@ 0x3c
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fd fba7 	bl	8002c50 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223d      	movs	r2, #61	@ 0x3d
 8005506:	2102      	movs	r1, #2
 8005508:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	0019      	movs	r1, r3
 8005514:	0010      	movs	r0, r2
 8005516:	f000 fcad 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2246      	movs	r2, #70	@ 0x46
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223e      	movs	r2, #62	@ 0x3e
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223f      	movs	r2, #63	@ 0x3f
 800552e:	2101      	movs	r1, #1
 8005530:	5499      	strb	r1, [r3, r2]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2240      	movs	r2, #64	@ 0x40
 8005536:	2101      	movs	r1, #1
 8005538:	5499      	strb	r1, [r3, r2]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2241      	movs	r2, #65	@ 0x41
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2242      	movs	r2, #66	@ 0x42
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2243      	movs	r2, #67	@ 0x43
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2244      	movs	r2, #68	@ 0x44
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2245      	movs	r2, #69	@ 0x45
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223d      	movs	r2, #61	@ 0x3d
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	230f      	movs	r3, #15
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <HAL_TIM_IC_Start_IT+0x22>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	223e      	movs	r2, #62	@ 0x3e
 8005590:	5c9b      	ldrb	r3, [r3, r2]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e013      	b.n	80055be <HAL_TIM_IC_Start_IT+0x4a>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b04      	cmp	r3, #4
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_IC_Start_IT+0x32>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	223f      	movs	r2, #63	@ 0x3f
 80055a0:	5c9b      	ldrb	r3, [r3, r2]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e00b      	b.n	80055be <HAL_TIM_IC_Start_IT+0x4a>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_IC_Start_IT+0x42>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2240      	movs	r2, #64	@ 0x40
 80055b0:	5c9b      	ldrb	r3, [r3, r2]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e003      	b.n	80055be <HAL_TIM_IC_Start_IT+0x4a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2241      	movs	r2, #65	@ 0x41
 80055ba:	5c9b      	ldrb	r3, [r3, r2]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	220e      	movs	r2, #14
 80055c0:	18ba      	adds	r2, r7, r2
 80055c2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <HAL_TIM_IC_Start_IT+0x60>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2242      	movs	r2, #66	@ 0x42
 80055ce:	5c9b      	ldrb	r3, [r3, r2]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e013      	b.n	80055fc <HAL_TIM_IC_Start_IT+0x88>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d104      	bne.n	80055e4 <HAL_TIM_IC_Start_IT+0x70>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2243      	movs	r2, #67	@ 0x43
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e00b      	b.n	80055fc <HAL_TIM_IC_Start_IT+0x88>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d104      	bne.n	80055f4 <HAL_TIM_IC_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2244      	movs	r2, #68	@ 0x44
 80055ee:	5c9b      	ldrb	r3, [r3, r2]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e003      	b.n	80055fc <HAL_TIM_IC_Start_IT+0x88>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2245      	movs	r2, #69	@ 0x45
 80055f8:	5c9b      	ldrb	r3, [r3, r2]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	210d      	movs	r1, #13
 80055fe:	187a      	adds	r2, r7, r1
 8005600:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005602:	230e      	movs	r3, #14
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d103      	bne.n	8005614 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800560c:	187b      	adds	r3, r7, r1
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d001      	beq.n	8005618 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0ac      	b.n	8005772 <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_TIM_IC_Start_IT+0xb4>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	223e      	movs	r2, #62	@ 0x3e
 8005622:	2102      	movs	r1, #2
 8005624:	5499      	strb	r1, [r3, r2]
 8005626:	e013      	b.n	8005650 <HAL_TIM_IC_Start_IT+0xdc>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b04      	cmp	r3, #4
 800562c:	d104      	bne.n	8005638 <HAL_TIM_IC_Start_IT+0xc4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	223f      	movs	r2, #63	@ 0x3f
 8005632:	2102      	movs	r1, #2
 8005634:	5499      	strb	r1, [r3, r2]
 8005636:	e00b      	b.n	8005650 <HAL_TIM_IC_Start_IT+0xdc>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d104      	bne.n	8005648 <HAL_TIM_IC_Start_IT+0xd4>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2240      	movs	r2, #64	@ 0x40
 8005642:	2102      	movs	r1, #2
 8005644:	5499      	strb	r1, [r3, r2]
 8005646:	e003      	b.n	8005650 <HAL_TIM_IC_Start_IT+0xdc>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2241      	movs	r2, #65	@ 0x41
 800564c:	2102      	movs	r1, #2
 800564e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_TIM_IC_Start_IT+0xec>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2242      	movs	r2, #66	@ 0x42
 800565a:	2102      	movs	r1, #2
 800565c:	5499      	strb	r1, [r3, r2]
 800565e:	e013      	b.n	8005688 <HAL_TIM_IC_Start_IT+0x114>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d104      	bne.n	8005670 <HAL_TIM_IC_Start_IT+0xfc>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2243      	movs	r2, #67	@ 0x43
 800566a:	2102      	movs	r1, #2
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	e00b      	b.n	8005688 <HAL_TIM_IC_Start_IT+0x114>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b08      	cmp	r3, #8
 8005674:	d104      	bne.n	8005680 <HAL_TIM_IC_Start_IT+0x10c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2244      	movs	r2, #68	@ 0x44
 800567a:	2102      	movs	r1, #2
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	e003      	b.n	8005688 <HAL_TIM_IC_Start_IT+0x114>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2245      	movs	r2, #69	@ 0x45
 8005684:	2102      	movs	r1, #2
 8005686:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b0c      	cmp	r3, #12
 800568c:	d02a      	beq.n	80056e4 <HAL_TIM_IC_Start_IT+0x170>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d830      	bhi.n	80056f6 <HAL_TIM_IC_Start_IT+0x182>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d01b      	beq.n	80056d2 <HAL_TIM_IC_Start_IT+0x15e>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b08      	cmp	r3, #8
 800569e:	d82a      	bhi.n	80056f6 <HAL_TIM_IC_Start_IT+0x182>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IC_Start_IT+0x13a>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d009      	beq.n	80056c0 <HAL_TIM_IC_Start_IT+0x14c>
 80056ac:	e023      	b.n	80056f6 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2102      	movs	r1, #2
 80056ba:	430a      	orrs	r2, r1
 80056bc:	60da      	str	r2, [r3, #12]
      break;
 80056be:	e01f      	b.n	8005700 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2104      	movs	r1, #4
 80056cc:	430a      	orrs	r2, r1
 80056ce:	60da      	str	r2, [r3, #12]
      break;
 80056d0:	e016      	b.n	8005700 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2108      	movs	r1, #8
 80056de:	430a      	orrs	r2, r1
 80056e0:	60da      	str	r2, [r3, #12]
      break;
 80056e2:	e00d      	b.n	8005700 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2110      	movs	r1, #16
 80056f0:	430a      	orrs	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]
      break;
 80056f4:	e004      	b.n	8005700 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80056f6:	230f      	movs	r3, #15
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
      break;
 80056fe:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8005700:	230f      	movs	r3, #15
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d130      	bne.n	800576c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	0018      	movs	r0, r3
 8005714:	f000 ffca 	bl	80066ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a17      	ldr	r2, [pc, #92]	@ (800577c <HAL_TIM_IC_Start_IT+0x208>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00a      	beq.n	8005738 <HAL_TIM_IC_Start_IT+0x1c4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	2380      	movs	r3, #128	@ 0x80
 8005728:	05db      	lsls	r3, r3, #23
 800572a:	429a      	cmp	r2, r3
 800572c:	d004      	beq.n	8005738 <HAL_TIM_IC_Start_IT+0x1c4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a13      	ldr	r2, [pc, #76]	@ (8005780 <HAL_TIM_IC_Start_IT+0x20c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d111      	bne.n	800575c <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2207      	movs	r2, #7
 8005740:	4013      	ands	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b06      	cmp	r3, #6
 8005748:	d010      	beq.n	800576c <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2101      	movs	r1, #1
 8005756:	430a      	orrs	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	e007      	b.n	800576c <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2101      	movs	r1, #1
 8005768:	430a      	orrs	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	781b      	ldrb	r3, [r3, #0]
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b004      	add	sp, #16
 8005778:	bd80      	pop	{r7, pc}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40000400 	.word	0x40000400

08005784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2202      	movs	r2, #2
 80057a0:	4013      	ands	r3, r2
 80057a2:	d021      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2202      	movs	r2, #2
 80057a8:	4013      	ands	r3, r2
 80057aa:	d01d      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2203      	movs	r2, #3
 80057b2:	4252      	negs	r2, r2
 80057b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2203      	movs	r2, #3
 80057c4:	4013      	ands	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7fc ff1c 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 80057d0:	e007      	b.n	80057e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 fb35 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 fb39 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2204      	movs	r2, #4
 80057ec:	4013      	ands	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2204      	movs	r2, #4
 80057f4:	4013      	ands	r3, r2
 80057f6:	d01e      	beq.n	8005836 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2205      	movs	r2, #5
 80057fe:	4252      	negs	r2, r2
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	23c0      	movs	r3, #192	@ 0xc0
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4013      	ands	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f7fc fef5 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 800581e:	e007      	b.n	8005830 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	0018      	movs	r0, r3
 8005824:	f000 fb0e 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	0018      	movs	r0, r3
 800582c:	f000 fb12 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2208      	movs	r2, #8
 800583a:	4013      	ands	r3, r2
 800583c:	d021      	beq.n	8005882 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2208      	movs	r2, #8
 8005842:	4013      	ands	r3, r2
 8005844:	d01d      	beq.n	8005882 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2209      	movs	r2, #9
 800584c:	4252      	negs	r2, r2
 800584e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2204      	movs	r2, #4
 8005854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2203      	movs	r2, #3
 800585e:	4013      	ands	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f7fc fecf 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 800586a:	e007      	b.n	800587c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 fae8 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 faec 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2210      	movs	r2, #16
 8005886:	4013      	ands	r3, r2
 8005888:	d022      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2210      	movs	r2, #16
 800588e:	4013      	ands	r3, r2
 8005890:	d01e      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2211      	movs	r2, #17
 8005898:	4252      	negs	r2, r2
 800589a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2208      	movs	r2, #8
 80058a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	23c0      	movs	r3, #192	@ 0xc0
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7fc fea8 	bl	8002608 <HAL_TIM_IC_CaptureCallback>
 80058b8:	e007      	b.n	80058ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0018      	movs	r0, r3
 80058be:	f000 fac1 	bl	8005e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fac5 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2201      	movs	r2, #1
 80058d4:	4013      	ands	r3, r2
 80058d6:	d00c      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	4013      	ands	r3, r2
 80058de:	d008      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2202      	movs	r2, #2
 80058e6:	4252      	negs	r2, r2
 80058e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7fc ff19 	bl	8002724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2280      	movs	r2, #128	@ 0x80
 80058f6:	4013      	ands	r3, r2
 80058f8:	d00c      	beq.n	8005914 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2280      	movs	r2, #128	@ 0x80
 80058fe:	4013      	ands	r3, r2
 8005900:	d008      	beq.n	8005914 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2281      	movs	r2, #129	@ 0x81
 8005908:	4252      	negs	r2, r2
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 ffae 	bl	8006870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2240      	movs	r2, #64	@ 0x40
 8005918:	4013      	ands	r3, r2
 800591a:	d00c      	beq.n	8005936 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2240      	movs	r2, #64	@ 0x40
 8005920:	4013      	ands	r3, r2
 8005922:	d008      	beq.n	8005936 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2241      	movs	r2, #65	@ 0x41
 800592a:	4252      	negs	r2, r2
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0018      	movs	r0, r3
 8005932:	f000 fa97 	bl	8005e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2220      	movs	r2, #32
 800593a:	4013      	ands	r3, r2
 800593c:	d00c      	beq.n	8005958 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	4013      	ands	r3, r2
 8005944:	d008      	beq.n	8005958 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2221      	movs	r2, #33	@ 0x21
 800594c:	4252      	negs	r2, r2
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 ff84 	bl	8006860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005958:	46c0      	nop			@ (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	b004      	add	sp, #16
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596c:	2317      	movs	r3, #23
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	223c      	movs	r2, #60	@ 0x3c
 8005978:	5c9b      	ldrb	r3, [r3, r2]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_TIM_IC_ConfigChannel+0x22>
 800597e:	2302      	movs	r3, #2
 8005980:	e08c      	b.n	8005a9c <HAL_TIM_IC_ConfigChannel+0x13c>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	223c      	movs	r2, #60	@ 0x3c
 8005986:	2101      	movs	r1, #1
 8005988:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059a0:	f000 fccc 	bl	800633c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	210c      	movs	r1, #12
 80059b0:	438a      	bics	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6999      	ldr	r1, [r3, #24]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	e062      	b.n	8005a8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d11c      	bne.n	8005a08 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059de:	f000 fd31 	bl	8006444 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	492d      	ldr	r1, [pc, #180]	@ (8005aa4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80059ee:	400a      	ands	r2, r1
 80059f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6999      	ldr	r1, [r3, #24]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	021a      	lsls	r2, r3, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	619a      	str	r2, [r3, #24]
 8005a06:	e042      	b.n	8005a8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d11b      	bne.n	8005a46 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a1e:	f000 fd85 	bl	800652c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	210c      	movs	r1, #12
 8005a2e:	438a      	bics	r2, r1
 8005a30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69d9      	ldr	r1, [r3, #28]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	61da      	str	r2, [r3, #28]
 8005a44:	e023      	b.n	8005a8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d11c      	bne.n	8005a86 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a5c:	f000 fda6 	bl	80065ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	490e      	ldr	r1, [pc, #56]	@ (8005aa4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69d9      	ldr	r1, [r3, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	021a      	lsls	r2, r3, #8
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	61da      	str	r2, [r3, #28]
 8005a84:	e003      	b.n	8005a8e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005a86:	2317      	movs	r3, #23
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	223c      	movs	r2, #60	@ 0x3c
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]

  return status;
 8005a96:	2317      	movs	r3, #23
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	781b      	ldrb	r3, [r3, #0]
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b006      	add	sp, #24
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	fffff3ff 	.word	0xfffff3ff

08005aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab4:	2317      	movs	r3, #23
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	223c      	movs	r2, #60	@ 0x3c
 8005ac0:	5c9b      	ldrb	r3, [r3, r2]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_ConfigChannel+0x22>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0ad      	b.n	8005c26 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	223c      	movs	r2, #60	@ 0x3c
 8005ace:	2101      	movs	r1, #1
 8005ad0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d100      	bne.n	8005ada <HAL_TIM_PWM_ConfigChannel+0x32>
 8005ad8:	e076      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b0c      	cmp	r3, #12
 8005ade:	d900      	bls.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005ae0:	e095      	b.n	8005c0e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d04e      	beq.n	8005b86 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d900      	bls.n	8005af0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005aee:	e08e      	b.n	8005c0e <HAL_TIM_PWM_ConfigChannel+0x166>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x56>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d021      	beq.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005afc:	e087      	b.n	8005c0e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	0011      	movs	r1, r2
 8005b06:	0018      	movs	r0, r3
 8005b08:	f000 fa38 	bl	8005f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2108      	movs	r1, #8
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2104      	movs	r1, #4
 8005b28:	438a      	bics	r2, r1
 8005b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6999      	ldr	r1, [r3, #24]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	619a      	str	r2, [r3, #24]
      break;
 8005b3e:	e06b      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	0011      	movs	r1, r2
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 fa95 	bl	8006078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2180      	movs	r1, #128	@ 0x80
 8005b5a:	0109      	lsls	r1, r1, #4
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4931      	ldr	r1, [pc, #196]	@ (8005c30 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6999      	ldr	r1, [r3, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	021a      	lsls	r2, r3, #8
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	619a      	str	r2, [r3, #24]
      break;
 8005b84:	e048      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	0011      	movs	r1, r2
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f000 faf0 	bl	8006174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69da      	ldr	r2, [r3, #28]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2108      	movs	r1, #8
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2104      	movs	r1, #4
 8005bb0:	438a      	bics	r2, r1
 8005bb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69d9      	ldr	r1, [r3, #28]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	61da      	str	r2, [r3, #28]
      break;
 8005bc6:	e027      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	0011      	movs	r1, r2
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f000 fb4f 	bl	8006274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2180      	movs	r1, #128	@ 0x80
 8005be2:	0109      	lsls	r1, r1, #4
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	490f      	ldr	r1, [pc, #60]	@ (8005c30 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005bf4:	400a      	ands	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69d9      	ldr	r1, [r3, #28]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	61da      	str	r2, [r3, #28]
      break;
 8005c0c:	e004      	b.n	8005c18 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005c0e:	2317      	movs	r3, #23
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2201      	movs	r2, #1
 8005c14:	701a      	strb	r2, [r3, #0]
      break;
 8005c16:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	223c      	movs	r2, #60	@ 0x3c
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]

  return status;
 8005c20:	2317      	movs	r3, #23
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	781b      	ldrb	r3, [r3, #0]
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b006      	add	sp, #24
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	46c0      	nop			@ (mov r8, r8)
 8005c30:	fffffbff 	.word	0xfffffbff

08005c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	230f      	movs	r3, #15
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	223c      	movs	r2, #60	@ 0x3c
 8005c4a:	5c9b      	ldrb	r3, [r3, r2]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIM_ConfigClockSource+0x20>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0bc      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x19a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	223c      	movs	r2, #60	@ 0x3c
 8005c58:	2101      	movs	r1, #1
 8005c5a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	223d      	movs	r2, #61	@ 0x3d
 8005c60:	2102      	movs	r1, #2
 8005c62:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2277      	movs	r2, #119	@ 0x77
 8005c70:	4393      	bics	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a58      	ldr	r2, [pc, #352]	@ (8005dd8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2280      	movs	r2, #128	@ 0x80
 8005c8a:	0192      	lsls	r2, r2, #6
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d040      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xde>
 8005c90:	2280      	movs	r2, #128	@ 0x80
 8005c92:	0192      	lsls	r2, r2, #6
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d900      	bls.n	8005c9a <HAL_TIM_ConfigClockSource+0x66>
 8005c98:	e088      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005c9a:	2280      	movs	r2, #128	@ 0x80
 8005c9c:	0152      	lsls	r2, r2, #5
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d100      	bne.n	8005ca4 <HAL_TIM_ConfigClockSource+0x70>
 8005ca2:	e088      	b.n	8005db6 <HAL_TIM_ConfigClockSource+0x182>
 8005ca4:	2280      	movs	r2, #128	@ 0x80
 8005ca6:	0152      	lsls	r2, r2, #5
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d900      	bls.n	8005cae <HAL_TIM_ConfigClockSource+0x7a>
 8005cac:	e07e      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cae:	2b70      	cmp	r3, #112	@ 0x70
 8005cb0:	d018      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xb0>
 8005cb2:	d900      	bls.n	8005cb6 <HAL_TIM_ConfigClockSource+0x82>
 8005cb4:	e07a      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cb6:	2b60      	cmp	r3, #96	@ 0x60
 8005cb8:	d04f      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x126>
 8005cba:	d900      	bls.n	8005cbe <HAL_TIM_ConfigClockSource+0x8a>
 8005cbc:	e076      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cbe:	2b50      	cmp	r3, #80	@ 0x50
 8005cc0:	d03b      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x106>
 8005cc2:	d900      	bls.n	8005cc6 <HAL_TIM_ConfigClockSource+0x92>
 8005cc4:	e072      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cc6:	2b40      	cmp	r3, #64	@ 0x40
 8005cc8:	d057      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x146>
 8005cca:	d900      	bls.n	8005cce <HAL_TIM_ConfigClockSource+0x9a>
 8005ccc:	e06e      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cce:	2b30      	cmp	r3, #48	@ 0x30
 8005cd0:	d063      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x166>
 8005cd2:	d86b      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d060      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x166>
 8005cd8:	d868      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d05d      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x166>
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d05b      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x166>
 8005ce2:	e063      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf4:	f000 fcba 	bl	800666c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2277      	movs	r2, #119	@ 0x77
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e052      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d22:	f000 fca3 	bl	800666c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2180      	movs	r1, #128	@ 0x80
 8005d32:	01c9      	lsls	r1, r1, #7
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]
      break;
 8005d38:	e03e      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	001a      	movs	r2, r3
 8005d48:	f000 fb4e 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2150      	movs	r1, #80	@ 0x50
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 fc70 	bl	8006638 <TIM_ITRx_SetConfig>
      break;
 8005d58:	e02e      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d66:	001a      	movs	r2, r3
 8005d68:	f000 fbae 	bl	80064c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2160      	movs	r1, #96	@ 0x60
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 fc60 	bl	8006638 <TIM_ITRx_SetConfig>
      break;
 8005d78:	e01e      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	001a      	movs	r2, r3
 8005d88:	f000 fb2e 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2140      	movs	r1, #64	@ 0x40
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fc50 	bl	8006638 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e00e      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	0019      	movs	r1, r3
 8005da4:	0010      	movs	r0, r2
 8005da6:	f000 fc47 	bl	8006638 <TIM_ITRx_SetConfig>
      break;
 8005daa:	e005      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005dac:	230f      	movs	r3, #15
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005db6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	223d      	movs	r2, #61	@ 0x3d
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	223c      	movs	r2, #60	@ 0x3c
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]

  return status;
 8005dc8:	230f      	movs	r3, #15
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	ffff00ff 	.word	0xffff00ff

08005ddc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b0c      	cmp	r3, #12
 8005dee:	d01e      	beq.n	8005e2e <HAL_TIM_ReadCapturedValue+0x52>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b0c      	cmp	r3, #12
 8005df4:	d820      	bhi.n	8005e38 <HAL_TIM_ReadCapturedValue+0x5c>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIM_ReadCapturedValue+0x48>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d81a      	bhi.n	8005e38 <HAL_TIM_ReadCapturedValue+0x5c>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_TIM_ReadCapturedValue+0x34>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d005      	beq.n	8005e1a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005e0e:	e013      	b.n	8005e38 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e16:	60fb      	str	r3, [r7, #12]
      break;
 8005e18:	e00f      	b.n	8005e3a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	60fb      	str	r3, [r7, #12]
      break;
 8005e22:	e00a      	b.n	8005e3a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2a:	60fb      	str	r3, [r7, #12]
      break;
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	60fb      	str	r3, [r7, #12]
      break;
 8005e36:	e000      	b.n	8005e3a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005e38:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b004      	add	sp, #16
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b002      	add	sp, #8
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e5c:	46c0      	nop			@ (mov r8, r8)
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b002      	add	sp, #8
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a37      	ldr	r2, [pc, #220]	@ (8005f64 <TIM_Base_SetConfig+0xf0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d008      	beq.n	8005e9e <TIM_Base_SetConfig+0x2a>
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	05db      	lsls	r3, r3, #23
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d003      	beq.n	8005e9e <TIM_Base_SetConfig+0x2a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a33      	ldr	r2, [pc, #204]	@ (8005f68 <TIM_Base_SetConfig+0xf4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d108      	bne.n	8005eb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2270      	movs	r2, #112	@ 0x70
 8005ea2:	4393      	bics	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f64 <TIM_Base_SetConfig+0xf0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d014      	beq.n	8005ee2 <TIM_Base_SetConfig+0x6e>
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	05db      	lsls	r3, r3, #23
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d00f      	beq.n	8005ee2 <TIM_Base_SetConfig+0x6e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a28      	ldr	r2, [pc, #160]	@ (8005f68 <TIM_Base_SetConfig+0xf4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_Base_SetConfig+0x6e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a27      	ldr	r2, [pc, #156]	@ (8005f6c <TIM_Base_SetConfig+0xf8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_Base_SetConfig+0x6e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a26      	ldr	r2, [pc, #152]	@ (8005f70 <TIM_Base_SetConfig+0xfc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_Base_SetConfig+0x6e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a25      	ldr	r2, [pc, #148]	@ (8005f74 <TIM_Base_SetConfig+0x100>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a24      	ldr	r2, [pc, #144]	@ (8005f78 <TIM_Base_SetConfig+0x104>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2280      	movs	r2, #128	@ 0x80
 8005ef8:	4393      	bics	r3, r2
 8005efa:	001a      	movs	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a11      	ldr	r2, [pc, #68]	@ (8005f64 <TIM_Base_SetConfig+0xf0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_Base_SetConfig+0xbe>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a12      	ldr	r2, [pc, #72]	@ (8005f70 <TIM_Base_SetConfig+0xfc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_Base_SetConfig+0xbe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	@ (8005f74 <TIM_Base_SetConfig+0x100>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d103      	bne.n	8005f3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2201      	movs	r2, #1
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4393      	bics	r3, r2
 8005f54:	001a      	movs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	611a      	str	r2, [r3, #16]
  }
}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b004      	add	sp, #16
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40002000 	.word	0x40002000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	fffffcff 	.word	0xfffffcff

08005f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	2201      	movs	r2, #1
 8005f92:	4393      	bics	r3, r2
 8005f94:	001a      	movs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2270      	movs	r2, #112	@ 0x70
 8005faa:	4393      	bics	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	4393      	bics	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	4393      	bics	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a23      	ldr	r2, [pc, #140]	@ (8006064 <TIM_OC1_SetConfig+0xe8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_OC1_SetConfig+0x6e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	@ (8006068 <TIM_OC1_SetConfig+0xec>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC1_SetConfig+0x6e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a21      	ldr	r2, [pc, #132]	@ (800606c <TIM_OC1_SetConfig+0xf0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10c      	bne.n	8006004 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2208      	movs	r2, #8
 8005fee:	4393      	bics	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2204      	movs	r2, #4
 8006000:	4393      	bics	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a17      	ldr	r2, [pc, #92]	@ (8006064 <TIM_OC1_SetConfig+0xe8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_OC1_SetConfig+0xa0>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a16      	ldr	r2, [pc, #88]	@ (8006068 <TIM_OC1_SetConfig+0xec>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC1_SetConfig+0xa0>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a15      	ldr	r2, [pc, #84]	@ (800606c <TIM_OC1_SetConfig+0xf0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d111      	bne.n	8006040 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4a14      	ldr	r2, [pc, #80]	@ (8006070 <TIM_OC1_SetConfig+0xf4>)
 8006020:	4013      	ands	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4a13      	ldr	r2, [pc, #76]	@ (8006074 <TIM_OC1_SetConfig+0xf8>)
 8006028:	4013      	ands	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	46c0      	nop			@ (mov r8, r8)
 800605c:	46bd      	mov	sp, r7
 800605e:	b006      	add	sp, #24
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800
 8006070:	fffffeff 	.word	0xfffffeff
 8006074:	fffffdff 	.word	0xfffffdff

08006078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	2210      	movs	r2, #16
 800608e:	4393      	bics	r3, r2
 8006090:	001a      	movs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006158 <TIM_OC2_SetConfig+0xe0>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a2b      	ldr	r2, [pc, #172]	@ (800615c <TIM_OC2_SetConfig+0xe4>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2220      	movs	r2, #32
 80060c2:	4393      	bics	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <TIM_OC2_SetConfig+0xe8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10d      	bne.n	80060f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2280      	movs	r2, #128	@ 0x80
 80060de:	4393      	bics	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2240      	movs	r2, #64	@ 0x40
 80060f2:	4393      	bics	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <TIM_OC2_SetConfig+0xe8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_OC2_SetConfig+0x96>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <TIM_OC2_SetConfig+0xec>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_OC2_SetConfig+0x96>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <TIM_OC2_SetConfig+0xf0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d113      	bne.n	8006136 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4a16      	ldr	r2, [pc, #88]	@ (800616c <TIM_OC2_SetConfig+0xf4>)
 8006112:	4013      	ands	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <TIM_OC2_SetConfig+0xf8>)
 800611a:	4013      	ands	r3, r2
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	46c0      	nop			@ (mov r8, r8)
 8006152:	46bd      	mov	sp, r7
 8006154:	b006      	add	sp, #24
 8006156:	bd80      	pop	{r7, pc}
 8006158:	ffff8fff 	.word	0xffff8fff
 800615c:	fffffcff 	.word	0xfffffcff
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800
 800616c:	fffffbff 	.word	0xfffffbff
 8006170:	fffff7ff 	.word	0xfffff7ff

08006174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	4a31      	ldr	r2, [pc, #196]	@ (8006250 <TIM_OC3_SetConfig+0xdc>)
 800618a:	401a      	ands	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2270      	movs	r2, #112	@ 0x70
 80061a0:	4393      	bics	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2203      	movs	r2, #3
 80061a8:	4393      	bics	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4a26      	ldr	r2, [pc, #152]	@ (8006254 <TIM_OC3_SetConfig+0xe0>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a22      	ldr	r2, [pc, #136]	@ (8006258 <TIM_OC3_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10d      	bne.n	80061ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4a21      	ldr	r2, [pc, #132]	@ (800625c <TIM_OC3_SetConfig+0xe8>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006260 <TIM_OC3_SetConfig+0xec>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <TIM_OC3_SetConfig+0xe4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_OC3_SetConfig+0x92>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006264 <TIM_OC3_SetConfig+0xf0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_OC3_SetConfig+0x92>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <TIM_OC3_SetConfig+0xf4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d113      	bne.n	800622e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4a18      	ldr	r2, [pc, #96]	@ (800626c <TIM_OC3_SetConfig+0xf8>)
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4a17      	ldr	r2, [pc, #92]	@ (8006270 <TIM_OC3_SetConfig+0xfc>)
 8006212:	4013      	ands	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	46c0      	nop			@ (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b006      	add	sp, #24
 800624e:	bd80      	pop	{r7, pc}
 8006250:	fffffeff 	.word	0xfffffeff
 8006254:	fffffdff 	.word	0xfffffdff
 8006258:	40012c00 	.word	0x40012c00
 800625c:	fffff7ff 	.word	0xfffff7ff
 8006260:	fffffbff 	.word	0xfffffbff
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800
 800626c:	ffffefff 	.word	0xffffefff
 8006270:	ffffdfff 	.word	0xffffdfff

08006274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	4a24      	ldr	r2, [pc, #144]	@ (800631c <TIM_OC4_SetConfig+0xa8>)
 800628a:	401a      	ands	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a20      	ldr	r2, [pc, #128]	@ (8006320 <TIM_OC4_SetConfig+0xac>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006324 <TIM_OC4_SetConfig+0xb0>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <TIM_OC4_SetConfig+0xb4>)
 80062bc:	4013      	ands	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	031b      	lsls	r3, r3, #12
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a17      	ldr	r2, [pc, #92]	@ (800632c <TIM_OC4_SetConfig+0xb8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_OC4_SetConfig+0x70>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <TIM_OC4_SetConfig+0xbc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC4_SetConfig+0x70>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a15      	ldr	r2, [pc, #84]	@ (8006334 <TIM_OC4_SetConfig+0xc0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d109      	bne.n	80062f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4a14      	ldr	r2, [pc, #80]	@ (8006338 <TIM_OC4_SetConfig+0xc4>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	019b      	lsls	r3, r3, #6
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	46bd      	mov	sp, r7
 8006316:	b006      	add	sp, #24
 8006318:	bd80      	pop	{r7, pc}
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	ffffefff 	.word	0xffffefff
 8006320:	ffff8fff 	.word	0xffff8fff
 8006324:	fffffcff 	.word	0xfffffcff
 8006328:	ffffdfff 	.word	0xffffdfff
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800
 8006338:	ffffbfff 	.word	0xffffbfff

0800633c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	2201      	movs	r2, #1
 8006356:	4393      	bics	r3, r2
 8006358:	001a      	movs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a1e      	ldr	r2, [pc, #120]	@ (80063e0 <TIM_TI1_SetConfig+0xa4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d008      	beq.n	800637e <TIM_TI1_SetConfig+0x42>
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	05db      	lsls	r3, r3, #23
 8006372:	429a      	cmp	r2, r3
 8006374:	d003      	beq.n	800637e <TIM_TI1_SetConfig+0x42>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a1a      	ldr	r2, [pc, #104]	@ (80063e4 <TIM_TI1_SetConfig+0xa8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d101      	bne.n	8006382 <TIM_TI1_SetConfig+0x46>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <TIM_TI1_SetConfig+0x48>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2203      	movs	r2, #3
 800638c:	4393      	bics	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e003      	b.n	80063a2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2201      	movs	r2, #1
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	22f0      	movs	r2, #240	@ 0xf0
 80063a6:	4393      	bics	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	4013      	ands	r3, r2
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	220a      	movs	r2, #10
 80063bc:	4393      	bics	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	220a      	movs	r2, #10
 80063c4:	4013      	ands	r3, r2
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	46c0      	nop			@ (mov r8, r8)
 80063da:	46bd      	mov	sp, r7
 80063dc:	b006      	add	sp, #24
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40000400 	.word	0x40000400

080063e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	2201      	movs	r2, #1
 8006400:	4393      	bics	r3, r2
 8006402:	001a      	movs	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	22f0      	movs	r2, #240	@ 0xf0
 8006412:	4393      	bics	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	220a      	movs	r2, #10
 8006424:	4393      	bics	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	b006      	add	sp, #24
 8006442:	bd80      	pop	{r7, pc}

08006444 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	2210      	movs	r2, #16
 800645e:	4393      	bics	r3, r2
 8006460:	001a      	movs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4a14      	ldr	r2, [pc, #80]	@ (80064c0 <TIM_TI2_SetConfig+0x7c>)
 8006470:	4013      	ands	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4a10      	ldr	r2, [pc, #64]	@ (80064c4 <TIM_TI2_SetConfig+0x80>)
 8006482:	4013      	ands	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	031b      	lsls	r3, r3, #12
 800648a:	041b      	lsls	r3, r3, #16
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	22a0      	movs	r2, #160	@ 0xa0
 8006498:	4393      	bics	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	22a0      	movs	r2, #160	@ 0xa0
 80064a2:	4013      	ands	r3, r2
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b006      	add	sp, #24
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	fffffcff 	.word	0xfffffcff
 80064c4:	ffff0fff 	.word	0xffff0fff

080064c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2210      	movs	r2, #16
 80064e0:	4393      	bics	r3, r2
 80064e2:	001a      	movs	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006528 <TIM_TI2_ConfigInputStage+0x60>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	031b      	lsls	r3, r3, #12
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	22a0      	movs	r2, #160	@ 0xa0
 8006504:	4393      	bics	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	46c0      	nop			@ (mov r8, r8)
 8006520:	46bd      	mov	sp, r7
 8006522:	b006      	add	sp, #24
 8006524:	bd80      	pop	{r7, pc}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	ffff0fff 	.word	0xffff0fff

0800652c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <TIM_TI3_SetConfig+0x78>)
 8006546:	401a      	ands	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2203      	movs	r2, #3
 8006556:	4393      	bics	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	22f0      	movs	r2, #240	@ 0xf0
 8006566:	4393      	bics	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	22ff      	movs	r2, #255	@ 0xff
 8006570:	4013      	ands	r3, r2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4a0b      	ldr	r2, [pc, #44]	@ (80065a8 <TIM_TI3_SetConfig+0x7c>)
 800657c:	4013      	ands	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	021a      	lsls	r2, r3, #8
 8006584:	23a0      	movs	r3, #160	@ 0xa0
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	4013      	ands	r3, r2
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	46c0      	nop			@ (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b006      	add	sp, #24
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	fffffeff 	.word	0xfffffeff
 80065a8:	fffff5ff 	.word	0xfffff5ff

080065ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	4a18      	ldr	r2, [pc, #96]	@ (8006628 <TIM_TI4_SetConfig+0x7c>)
 80065c6:	401a      	ands	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4a15      	ldr	r2, [pc, #84]	@ (800662c <TIM_TI4_SetConfig+0x80>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4a12      	ldr	r2, [pc, #72]	@ (8006630 <TIM_TI4_SetConfig+0x84>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	031b      	lsls	r3, r3, #12
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	0c1b      	lsrs	r3, r3, #16
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006634 <TIM_TI4_SetConfig+0x88>)
 80065fe:	4013      	ands	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	031a      	lsls	r2, r3, #12
 8006606:	23a0      	movs	r3, #160	@ 0xa0
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	4013      	ands	r3, r2
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b006      	add	sp, #24
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	ffffefff 	.word	0xffffefff
 800662c:	fffffcff 	.word	0xfffffcff
 8006630:	ffff0fff 	.word	0xffff0fff
 8006634:	ffff5fff 	.word	0xffff5fff

08006638 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2270      	movs	r2, #112	@ 0x70
 800664c:	4393      	bics	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	2207      	movs	r2, #7
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	609a      	str	r2, [r3, #8]
}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	46bd      	mov	sp, r7
 8006666:	b004      	add	sp, #16
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4a09      	ldr	r2, [pc, #36]	@ (80066a8 <TIM_ETR_SetConfig+0x3c>)
 8006684:	4013      	ands	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	021a      	lsls	r2, r3, #8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	431a      	orrs	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4313      	orrs	r3, r2
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	609a      	str	r2, [r3, #8]
}
 80066a0:	46c0      	nop			@ (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b006      	add	sp, #24
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	ffff00ff 	.word	0xffff00ff

080066ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	221f      	movs	r2, #31
 80066bc:	4013      	ands	r3, r2
 80066be:	2201      	movs	r2, #1
 80066c0:	409a      	lsls	r2, r3
 80066c2:	0013      	movs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	43d2      	mvns	r2, r2
 80066ce:	401a      	ands	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	211f      	movs	r1, #31
 80066dc:	400b      	ands	r3, r1
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4099      	lsls	r1, r3
 80066e2:	000b      	movs	r3, r1
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b006      	add	sp, #24
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	223c      	movs	r2, #60	@ 0x3c
 8006702:	5c9b      	ldrb	r3, [r3, r2]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e042      	b.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	223c      	movs	r2, #60	@ 0x3c
 8006710:	2101      	movs	r1, #1
 8006712:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	223d      	movs	r2, #61	@ 0x3d
 8006718:	2102      	movs	r1, #2
 800671a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2270      	movs	r2, #112	@ 0x70
 8006730:	4393      	bics	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a14      	ldr	r2, [pc, #80]	@ (800679c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00a      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	2380      	movs	r3, #128	@ 0x80
 8006756:	05db      	lsls	r3, r3, #23
 8006758:	429a      	cmp	r2, r3
 800675a:	d004      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0f      	ldr	r2, [pc, #60]	@ (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10c      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2280      	movs	r2, #128	@ 0x80
 800676a:	4393      	bics	r3, r2
 800676c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4313      	orrs	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	223d      	movs	r2, #61	@ 0x3d
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	223c      	movs	r2, #60	@ 0x3c
 800678c:	2100      	movs	r1, #0
 800678e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	0018      	movs	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	b004      	add	sp, #16
 8006798:	bd80      	pop	{r7, pc}
 800679a:	46c0      	nop			@ (mov r8, r8)
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40000400 	.word	0x40000400

080067a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	223c      	movs	r2, #60	@ 0x3c
 80067b6:	5c9b      	ldrb	r3, [r3, r2]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067bc:	2302      	movs	r3, #2
 80067be:	e03e      	b.n	800683e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	223c      	movs	r2, #60	@ 0x3c
 80067c4:	2101      	movs	r1, #1
 80067c6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	22ff      	movs	r2, #255	@ 0xff
 80067cc:	4393      	bics	r3, r2
 80067ce:	001a      	movs	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80067dc:	401a      	ands	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4a18      	ldr	r2, [pc, #96]	@ (800684c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80067ea:	401a      	ands	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80067f8:	401a      	ands	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a13      	ldr	r2, [pc, #76]	@ (8006854 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006806:	401a      	ands	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a11      	ldr	r2, [pc, #68]	@ (8006858 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006814:	401a      	ands	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a0e      	ldr	r2, [pc, #56]	@ (800685c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006822:	401a      	ands	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	223c      	movs	r2, #60	@ 0x3c
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b004      	add	sp, #16
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			@ (mov r8, r8)
 8006848:	fffffcff 	.word	0xfffffcff
 800684c:	fffffbff 	.word	0xfffffbff
 8006850:	fffff7ff 	.word	0xfffff7ff
 8006854:	ffffefff 	.word	0xffffefff
 8006858:	ffffdfff 	.word	0xffffdfff
 800685c:	ffffbfff 	.word	0xffffbfff

08006860 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006868:	46c0      	nop			@ (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b002      	add	sp, #8
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006878:	46c0      	nop			@ (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b002      	add	sp, #8
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e044      	b.n	800691c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d107      	bne.n	80068aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2278      	movs	r2, #120	@ 0x78
 800689e:	2100      	movs	r1, #0
 80068a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7fc fab9 	bl	8002e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2224      	movs	r2, #36	@ 0x24
 80068ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2101      	movs	r1, #1
 80068bc:	438a      	bics	r2, r1
 80068be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 fd48 	bl	8007360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 fc1c 	bl	8007110 <UART_SetConfig>
 80068d8:	0003      	movs	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e01c      	b.n	800691c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	490d      	ldr	r1, [pc, #52]	@ (8006924 <HAL_UART_Init+0xa4>)
 80068ee:	400a      	ands	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	212a      	movs	r1, #42	@ 0x2a
 80068fe:	438a      	bics	r2, r1
 8006900:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2101      	movs	r1, #1
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	0018      	movs	r0, r3
 8006916:	f000 fdd7 	bl	80074c8 <UART_CheckIdleState>
 800691a:	0003      	movs	r3, r0
}
 800691c:	0018      	movs	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	b002      	add	sp, #8
 8006922:	bd80      	pop	{r7, pc}
 8006924:	ffffb7ff 	.word	0xffffb7ff

08006928 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	1dbb      	adds	r3, r7, #6
 8006934:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800693a:	2b20      	cmp	r3, #32
 800693c:	d000      	beq.n	8006940 <HAL_UART_Transmit_DMA+0x18>
 800693e:	e077      	b.n	8006a30 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_UART_Transmit_DMA+0x26>
 8006946:	1dbb      	adds	r3, r7, #6
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e06f      	b.n	8006a32 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	2380      	movs	r3, #128	@ 0x80
 8006958:	015b      	lsls	r3, r3, #5
 800695a:	429a      	cmp	r2, r3
 800695c:	d109      	bne.n	8006972 <HAL_UART_Transmit_DMA+0x4a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d105      	bne.n	8006972 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2201      	movs	r2, #1
 800696a:	4013      	ands	r3, r2
 800696c:	d001      	beq.n	8006972 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e05f      	b.n	8006a32 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	1dba      	adds	r2, r7, #6
 800697c:	2150      	movs	r1, #80	@ 0x50
 800697e:	8812      	ldrh	r2, [r2, #0]
 8006980:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1dba      	adds	r2, r7, #6
 8006986:	2152      	movs	r1, #82	@ 0x52
 8006988:	8812      	ldrh	r2, [r2, #0]
 800698a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2284      	movs	r2, #132	@ 0x84
 8006990:	2100      	movs	r1, #0
 8006992:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2221      	movs	r2, #33	@ 0x21
 8006998:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d027      	beq.n	80069f2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a6:	4a25      	ldr	r2, [pc, #148]	@ (8006a3c <HAL_UART_Transmit_DMA+0x114>)
 80069a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	4a24      	ldr	r2, [pc, #144]	@ (8006a40 <HAL_UART_Transmit_DMA+0x118>)
 80069b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	4a23      	ldr	r2, [pc, #140]	@ (8006a44 <HAL_UART_Transmit_DMA+0x11c>)
 80069b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	2200      	movs	r2, #0
 80069c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ca:	0019      	movs	r1, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3328      	adds	r3, #40	@ 0x28
 80069d2:	001a      	movs	r2, r3
 80069d4:	1dbb      	adds	r3, r7, #6
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	f7fd fa4c 	bl	8003e74 <HAL_DMA_Start_IT>
 80069dc:	1e03      	subs	r3, r0, #0
 80069de:	d008      	beq.n	80069f2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2284      	movs	r2, #132	@ 0x84
 80069e4:	2110      	movs	r1, #16
 80069e6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e01f      	b.n	8006a32 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2240      	movs	r2, #64	@ 0x40
 80069f8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069fa:	f3ef 8310 	mrs	r3, PRIMASK
 80069fe:	613b      	str	r3, [r7, #16]
  return(result);
 8006a00:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	2301      	movs	r3, #1
 8006a06:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f383 8810 	msr	PRIMASK, r3
}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2180      	movs	r1, #128	@ 0x80
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f383 8810 	msr	PRIMASK, r3
}
 8006a2a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	0018      	movs	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b008      	add	sp, #32
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	08007949 	.word	0x08007949
 8006a40:	080079dd 	.word	0x080079dd
 8006a44:	08007b6b 	.word	0x08007b6b

08006a48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	1dbb      	adds	r3, r7, #6
 8006a54:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2280      	movs	r2, #128	@ 0x80
 8006a5a:	589b      	ldr	r3, [r3, r2]
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d145      	bne.n	8006aec <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_UART_Receive_DMA+0x26>
 8006a66:	1dbb      	adds	r3, r7, #6
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e03d      	b.n	8006aee <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	2380      	movs	r3, #128	@ 0x80
 8006a78:	015b      	lsls	r3, r3, #5
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d109      	bne.n	8006a92 <HAL_UART_Receive_DMA+0x4a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d001      	beq.n	8006a92 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e02d      	b.n	8006aee <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	2380      	movs	r3, #128	@ 0x80
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d019      	beq.n	8006ada <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aaa:	613b      	str	r3, [r7, #16]
  return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f383 8810 	msr	PRIMASK, r3
}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2180      	movs	r1, #128	@ 0x80
 8006ac8:	04c9      	lsls	r1, r1, #19
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ada:	1dbb      	adds	r3, r7, #6
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f000 fe08 	bl	80076f8 <UART_Start_Receive_DMA>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	e000      	b.n	8006aee <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b008      	add	sp, #32
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af8:	b590      	push	{r4, r7, lr}
 8006afa:	b0ab      	sub	sp, #172	@ 0xac
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	22a4      	movs	r2, #164	@ 0xa4
 8006b08:	18b9      	adds	r1, r7, r2
 8006b0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	20a0      	movs	r0, #160	@ 0xa0
 8006b14:	1839      	adds	r1, r7, r0
 8006b16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	219c      	movs	r1, #156	@ 0x9c
 8006b20:	1879      	adds	r1, r7, r1
 8006b22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b24:	0011      	movs	r1, r2
 8006b26:	18bb      	adds	r3, r7, r2
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a99      	ldr	r2, [pc, #612]	@ (8006d90 <HAL_UART_IRQHandler+0x298>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2298      	movs	r2, #152	@ 0x98
 8006b30:	18bc      	adds	r4, r7, r2
 8006b32:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006b34:	18bb      	adds	r3, r7, r2
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d114      	bne.n	8006b66 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b3c:	187b      	adds	r3, r7, r1
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2220      	movs	r2, #32
 8006b42:	4013      	ands	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b46:	183b      	adds	r3, r7, r0
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d00a      	beq.n	8006b66 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d100      	bne.n	8006b5a <HAL_UART_IRQHandler+0x62>
 8006b58:	e29e      	b.n	8007098 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	0010      	movs	r0, r2
 8006b62:	4798      	blx	r3
      }
      return;
 8006b64:	e298      	b.n	8007098 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b66:	2398      	movs	r3, #152	@ 0x98
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d100      	bne.n	8006b72 <HAL_UART_IRQHandler+0x7a>
 8006b70:	e114      	b.n	8006d9c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b72:	239c      	movs	r3, #156	@ 0x9c
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d106      	bne.n	8006b8c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b7e:	23a0      	movs	r3, #160	@ 0xa0
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a83      	ldr	r2, [pc, #524]	@ (8006d94 <HAL_UART_IRQHandler+0x29c>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	d100      	bne.n	8006b8c <HAL_UART_IRQHandler+0x94>
 8006b8a:	e107      	b.n	8006d9c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b8c:	23a4      	movs	r3, #164	@ 0xa4
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4013      	ands	r3, r2
 8006b96:	d012      	beq.n	8006bbe <HAL_UART_IRQHandler+0xc6>
 8006b98:	23a0      	movs	r3, #160	@ 0xa0
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	2380      	movs	r3, #128	@ 0x80
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	d00b      	beq.n	8006bbe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2201      	movs	r2, #1
 8006bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2284      	movs	r2, #132	@ 0x84
 8006bb2:	589b      	ldr	r3, [r3, r2]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2184      	movs	r1, #132	@ 0x84
 8006bbc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bbe:	23a4      	movs	r3, #164	@ 0xa4
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d011      	beq.n	8006bee <HAL_UART_IRQHandler+0xf6>
 8006bca:	239c      	movs	r3, #156	@ 0x9c
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2284      	movs	r2, #132	@ 0x84
 8006be2:	589b      	ldr	r3, [r3, r2]
 8006be4:	2204      	movs	r2, #4
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2184      	movs	r1, #132	@ 0x84
 8006bec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bee:	23a4      	movs	r3, #164	@ 0xa4
 8006bf0:	18fb      	adds	r3, r7, r3
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d011      	beq.n	8006c1e <HAL_UART_IRQHandler+0x126>
 8006bfa:	239c      	movs	r3, #156	@ 0x9c
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2201      	movs	r2, #1
 8006c02:	4013      	ands	r3, r2
 8006c04:	d00b      	beq.n	8006c1e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2204      	movs	r2, #4
 8006c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2284      	movs	r2, #132	@ 0x84
 8006c12:	589b      	ldr	r3, [r3, r2]
 8006c14:	2202      	movs	r2, #2
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2184      	movs	r1, #132	@ 0x84
 8006c1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c1e:	23a4      	movs	r3, #164	@ 0xa4
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2208      	movs	r2, #8
 8006c26:	4013      	ands	r3, r2
 8006c28:	d017      	beq.n	8006c5a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c2a:	23a0      	movs	r3, #160	@ 0xa0
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2220      	movs	r2, #32
 8006c32:	4013      	ands	r3, r2
 8006c34:	d105      	bne.n	8006c42 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c36:	239c      	movs	r3, #156	@ 0x9c
 8006c38:	18fb      	adds	r3, r7, r3
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c40:	d00b      	beq.n	8006c5a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2208      	movs	r2, #8
 8006c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2284      	movs	r2, #132	@ 0x84
 8006c4e:	589b      	ldr	r3, [r3, r2]
 8006c50:	2208      	movs	r2, #8
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2184      	movs	r1, #132	@ 0x84
 8006c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c5a:	23a4      	movs	r3, #164	@ 0xa4
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	2380      	movs	r3, #128	@ 0x80
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	4013      	ands	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_UART_IRQHandler+0x198>
 8006c68:	23a0      	movs	r3, #160	@ 0xa0
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	2380      	movs	r3, #128	@ 0x80
 8006c70:	04db      	lsls	r3, r3, #19
 8006c72:	4013      	ands	r3, r2
 8006c74:	d00c      	beq.n	8006c90 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2280      	movs	r2, #128	@ 0x80
 8006c7c:	0112      	lsls	r2, r2, #4
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2284      	movs	r2, #132	@ 0x84
 8006c84:	589b      	ldr	r3, [r3, r2]
 8006c86:	2220      	movs	r2, #32
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2184      	movs	r1, #132	@ 0x84
 8006c8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2284      	movs	r2, #132	@ 0x84
 8006c94:	589b      	ldr	r3, [r3, r2]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d100      	bne.n	8006c9c <HAL_UART_IRQHandler+0x1a4>
 8006c9a:	e1ff      	b.n	800709c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c9c:	23a4      	movs	r3, #164	@ 0xa4
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ca8:	23a0      	movs	r3, #160	@ 0xa0
 8006caa:	18fb      	adds	r3, r7, r3
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d008      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	0010      	movs	r0, r2
 8006cc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2284      	movs	r2, #132	@ 0x84
 8006cca:	589b      	ldr	r3, [r3, r2]
 8006ccc:	2194      	movs	r1, #148	@ 0x94
 8006cce:	187a      	adds	r2, r7, r1
 8006cd0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2240      	movs	r2, #64	@ 0x40
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b40      	cmp	r3, #64	@ 0x40
 8006cde:	d004      	beq.n	8006cea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2228      	movs	r2, #40	@ 0x28
 8006ce6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ce8:	d047      	beq.n	8006d7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f000 fdc7 	bl	8007880 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2240      	movs	r2, #64	@ 0x40
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b40      	cmp	r3, #64	@ 0x40
 8006cfe:	d137      	bne.n	8006d70 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d00:	f3ef 8310 	mrs	r3, PRIMASK
 8006d04:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d08:	2090      	movs	r0, #144	@ 0x90
 8006d0a:	183a      	adds	r2, r7, r0
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d14:	f383 8810 	msr	PRIMASK, r3
}
 8006d18:	46c0      	nop			@ (mov r8, r8)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2140      	movs	r1, #64	@ 0x40
 8006d26:	438a      	bics	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d32:	f383 8810 	msr	PRIMASK, r3
}
 8006d36:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d44:	4a14      	ldr	r2, [pc, #80]	@ (8006d98 <HAL_UART_IRQHandler+0x2a0>)
 8006d46:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7fd f92f 	bl	8003fb0 <HAL_DMA_Abort_IT>
 8006d52:	1e03      	subs	r3, r0, #0
 8006d54:	d01a      	beq.n	8006d8c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d60:	0018      	movs	r0, r3
 8006d62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	e012      	b.n	8006d8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 f9bd 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	e00d      	b.n	8006d8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f000 f9b8 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d78:	e008      	b.n	8006d8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f000 f9b3 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2284      	movs	r2, #132	@ 0x84
 8006d86:	2100      	movs	r1, #0
 8006d88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006d8a:	e187      	b.n	800709c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	46c0      	nop			@ (mov r8, r8)
    return;
 8006d8e:	e185      	b.n	800709c <HAL_UART_IRQHandler+0x5a4>
 8006d90:	0000080f 	.word	0x0000080f
 8006d94:	04000120 	.word	0x04000120
 8006d98:	08007bef 	.word	0x08007bef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d000      	beq.n	8006da6 <HAL_UART_IRQHandler+0x2ae>
 8006da4:	e139      	b.n	800701a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006da6:	23a4      	movs	r3, #164	@ 0xa4
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2210      	movs	r2, #16
 8006dae:	4013      	ands	r3, r2
 8006db0:	d100      	bne.n	8006db4 <HAL_UART_IRQHandler+0x2bc>
 8006db2:	e132      	b.n	800701a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006db4:	23a0      	movs	r3, #160	@ 0xa0
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d100      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x2ca>
 8006dc0:	e12b      	b.n	800701a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2240      	movs	r2, #64	@ 0x40
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d000      	beq.n	8006dda <HAL_UART_IRQHandler+0x2e2>
 8006dd8:	e09f      	b.n	8006f1a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	217e      	movs	r1, #126	@ 0x7e
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006de8:	187b      	adds	r3, r7, r1
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d100      	bne.n	8006df2 <HAL_UART_IRQHandler+0x2fa>
 8006df0:	e156      	b.n	80070a0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2258      	movs	r2, #88	@ 0x58
 8006df6:	5a9b      	ldrh	r3, [r3, r2]
 8006df8:	187a      	adds	r2, r7, r1
 8006dfa:	8812      	ldrh	r2, [r2, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d300      	bcc.n	8006e02 <HAL_UART_IRQHandler+0x30a>
 8006e00:	e14e      	b.n	80070a0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	187a      	adds	r2, r7, r1
 8006e06:	215a      	movs	r1, #90	@ 0x5a
 8006e08:	8812      	ldrh	r2, [r2, #0]
 8006e0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d06f      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e16:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e20:	2301      	movs	r3, #1
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	f383 8810 	msr	PRIMASK, r3
}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	499e      	ldr	r1, [pc, #632]	@ (80070b0 <HAL_UART_IRQHandler+0x5b8>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	f383 8810 	msr	PRIMASK, r3
}
 8006e46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e48:	f3ef 8310 	mrs	r3, PRIMASK
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e50:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e52:	2301      	movs	r3, #1
 8006e54:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e58:	f383 8810 	msr	PRIMASK, r3
}
 8006e5c:	46c0      	nop			@ (mov r8, r8)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	438a      	bics	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
 8006e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e70:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e74:	f383 8810 	msr	PRIMASK, r3
}
 8006e78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e84:	2301      	movs	r3, #1
 8006e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e8a:	f383 8810 	msr	PRIMASK, r3
}
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2140      	movs	r1, #64	@ 0x40
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
 8006ea0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ea2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea6:	f383 8810 	msr	PRIMASK, r3
}
 8006eaa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2280      	movs	r2, #128	@ 0x80
 8006eb0:	2120      	movs	r1, #32
 8006eb2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eba:	f3ef 8310 	mrs	r3, PRIMASK
 8006ebe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eca:	f383 8810 	msr	PRIMASK, r3
}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2110      	movs	r1, #16
 8006edc:	438a      	bics	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee6:	f383 8810 	msr	PRIMASK, r3
}
 8006eea:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f7fd f825 	bl	8003f40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2258      	movs	r2, #88	@ 0x58
 8006f00:	5a9a      	ldrh	r2, [r3, r2]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	215a      	movs	r1, #90	@ 0x5a
 8006f06:	5a5b      	ldrh	r3, [r3, r1]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	0011      	movs	r1, r2
 8006f12:	0018      	movs	r0, r3
 8006f14:	f000 f8f0 	bl	80070f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f18:	e0c2      	b.n	80070a0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2258      	movs	r2, #88	@ 0x58
 8006f1e:	5a99      	ldrh	r1, [r3, r2]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	225a      	movs	r2, #90	@ 0x5a
 8006f24:	5a9b      	ldrh	r3, [r3, r2]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	208e      	movs	r0, #142	@ 0x8e
 8006f2a:	183b      	adds	r3, r7, r0
 8006f2c:	1a8a      	subs	r2, r1, r2
 8006f2e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	225a      	movs	r2, #90	@ 0x5a
 8006f34:	5a9b      	ldrh	r3, [r3, r2]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d100      	bne.n	8006f3e <HAL_UART_IRQHandler+0x446>
 8006f3c:	e0b2      	b.n	80070a4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8006f3e:	183b      	adds	r3, r7, r0
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d100      	bne.n	8006f48 <HAL_UART_IRQHandler+0x450>
 8006f46:	e0ad      	b.n	80070a4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f50:	2488      	movs	r4, #136	@ 0x88
 8006f52:	193a      	adds	r2, r7, r4
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	2301      	movs	r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f383 8810 	msr	PRIMASK, r3
}
 8006f60:	46c0      	nop			@ (mov r8, r8)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4951      	ldr	r1, [pc, #324]	@ (80070b4 <HAL_UART_IRQHandler+0x5bc>)
 8006f6e:	400a      	ands	r2, r1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	193b      	adds	r3, r7, r4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f383 8810 	msr	PRIMASK, r3
}
 8006f7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f86:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f88:	2484      	movs	r4, #132	@ 0x84
 8006f8a:	193a      	adds	r2, r7, r4
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	2301      	movs	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f383 8810 	msr	PRIMASK, r3
}
 8006f98:	46c0      	nop			@ (mov r8, r8)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	438a      	bics	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	f383 8810 	msr	PRIMASK, r3
}
 8006fb6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2280      	movs	r2, #128	@ 0x80
 8006fbc:	2120      	movs	r1, #32
 8006fbe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	2480      	movs	r4, #128	@ 0x80
 8006fd6:	193a      	adds	r2, r7, r4
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	2301      	movs	r3, #1
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			@ (mov r8, r8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	438a      	bics	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	193b      	adds	r3, r7, r4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800700a:	183b      	adds	r3, r7, r0
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0011      	movs	r1, r2
 8007012:	0018      	movs	r0, r3
 8007014:	f000 f870 	bl	80070f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007018:	e044      	b.n	80070a4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800701a:	23a4      	movs	r3, #164	@ 0xa4
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	2380      	movs	r3, #128	@ 0x80
 8007022:	035b      	lsls	r3, r3, #13
 8007024:	4013      	ands	r3, r2
 8007026:	d010      	beq.n	800704a <HAL_UART_IRQHandler+0x552>
 8007028:	239c      	movs	r3, #156	@ 0x9c
 800702a:	18fb      	adds	r3, r7, r3
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	2380      	movs	r3, #128	@ 0x80
 8007030:	03db      	lsls	r3, r3, #15
 8007032:	4013      	ands	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2280      	movs	r2, #128	@ 0x80
 800703c:	0352      	lsls	r2, r2, #13
 800703e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 fe15 	bl	8007c72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007048:	e02f      	b.n	80070aa <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800704a:	23a4      	movs	r3, #164	@ 0xa4
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2280      	movs	r2, #128	@ 0x80
 8007052:	4013      	ands	r3, r2
 8007054:	d00f      	beq.n	8007076 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007056:	23a0      	movs	r3, #160	@ 0xa0
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2280      	movs	r2, #128	@ 0x80
 800705e:	4013      	ands	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01e      	beq.n	80070a8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	0010      	movs	r0, r2
 8007072:	4798      	blx	r3
    }
    return;
 8007074:	e018      	b.n	80070a8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007076:	23a4      	movs	r3, #164	@ 0xa4
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2240      	movs	r2, #64	@ 0x40
 800707e:	4013      	ands	r3, r2
 8007080:	d013      	beq.n	80070aa <HAL_UART_IRQHandler+0x5b2>
 8007082:	23a0      	movs	r3, #160	@ 0xa0
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2240      	movs	r2, #64	@ 0x40
 800708a:	4013      	ands	r3, r2
 800708c:	d00d      	beq.n	80070aa <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	0018      	movs	r0, r3
 8007092:	f000 fdc3 	bl	8007c1c <UART_EndTransmit_IT>
    return;
 8007096:	e008      	b.n	80070aa <HAL_UART_IRQHandler+0x5b2>
      return;
 8007098:	46c0      	nop			@ (mov r8, r8)
 800709a:	e006      	b.n	80070aa <HAL_UART_IRQHandler+0x5b2>
    return;
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	e004      	b.n	80070aa <HAL_UART_IRQHandler+0x5b2>
      return;
 80070a0:	46c0      	nop			@ (mov r8, r8)
 80070a2:	e002      	b.n	80070aa <HAL_UART_IRQHandler+0x5b2>
      return;
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	e000      	b.n	80070aa <HAL_UART_IRQHandler+0x5b2>
    return;
 80070a8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b02b      	add	sp, #172	@ 0xac
 80070ae:	bd90      	pop	{r4, r7, pc}
 80070b0:	fffffeff 	.word	0xfffffeff
 80070b4:	fffffedf 	.word	0xfffffedf

080070b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070c0:	46c0      	nop			@ (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b002      	add	sp, #8
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80070d0:	46c0      	nop			@ (mov r8, r8)
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b002      	add	sp, #8
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070e0:	46c0      	nop			@ (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b002      	add	sp, #8
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070f0:	46c0      	nop			@ (mov r8, r8)
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b002      	add	sp, #8
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	000a      	movs	r2, r1
 8007102:	1cbb      	adds	r3, r7, #2
 8007104:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	46bd      	mov	sp, r7
 800710a:	b002      	add	sp, #8
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007118:	231e      	movs	r3, #30
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a83      	ldr	r2, [pc, #524]	@ (800734c <UART_SetConfig+0x23c>)
 8007140:	4013      	ands	r3, r2
 8007142:	0019      	movs	r1, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	430a      	orrs	r2, r1
 800714c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4a7e      	ldr	r2, [pc, #504]	@ (8007350 <UART_SetConfig+0x240>)
 8007156:	4013      	ands	r3, r2
 8007158:	0019      	movs	r1, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a75      	ldr	r2, [pc, #468]	@ (8007354 <UART_SetConfig+0x244>)
 800717e:	4013      	ands	r3, r2
 8007180:	0019      	movs	r1, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800718c:	4b72      	ldr	r3, [pc, #456]	@ (8007358 <UART_SetConfig+0x248>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	2203      	movs	r2, #3
 8007192:	4013      	ands	r3, r2
 8007194:	2b03      	cmp	r3, #3
 8007196:	d00d      	beq.n	80071b4 <UART_SetConfig+0xa4>
 8007198:	d81b      	bhi.n	80071d2 <UART_SetConfig+0xc2>
 800719a:	2b02      	cmp	r3, #2
 800719c:	d014      	beq.n	80071c8 <UART_SetConfig+0xb8>
 800719e:	d818      	bhi.n	80071d2 <UART_SetConfig+0xc2>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <UART_SetConfig+0x9a>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d00a      	beq.n	80071be <UART_SetConfig+0xae>
 80071a8:	e013      	b.n	80071d2 <UART_SetConfig+0xc2>
 80071aa:	231f      	movs	r3, #31
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	e012      	b.n	80071da <UART_SetConfig+0xca>
 80071b4:	231f      	movs	r3, #31
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	2202      	movs	r2, #2
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	e00d      	b.n	80071da <UART_SetConfig+0xca>
 80071be:	231f      	movs	r3, #31
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	2204      	movs	r2, #4
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e008      	b.n	80071da <UART_SetConfig+0xca>
 80071c8:	231f      	movs	r3, #31
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	2208      	movs	r2, #8
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e003      	b.n	80071da <UART_SetConfig+0xca>
 80071d2:	231f      	movs	r3, #31
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	2210      	movs	r2, #16
 80071d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69da      	ldr	r2, [r3, #28]
 80071de:	2380      	movs	r3, #128	@ 0x80
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d15c      	bne.n	80072a0 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 80071e6:	231f      	movs	r3, #31
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d015      	beq.n	800721c <UART_SetConfig+0x10c>
 80071f0:	dc18      	bgt.n	8007224 <UART_SetConfig+0x114>
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d00d      	beq.n	8007212 <UART_SetConfig+0x102>
 80071f6:	dc15      	bgt.n	8007224 <UART_SetConfig+0x114>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <UART_SetConfig+0xf2>
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d005      	beq.n	800720c <UART_SetConfig+0xfc>
 8007200:	e010      	b.n	8007224 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007202:	f7fd ff2f 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8007206:	0003      	movs	r3, r0
 8007208:	61bb      	str	r3, [r7, #24]
        break;
 800720a:	e012      	b.n	8007232 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800720c:	4b53      	ldr	r3, [pc, #332]	@ (800735c <UART_SetConfig+0x24c>)
 800720e:	61bb      	str	r3, [r7, #24]
        break;
 8007210:	e00f      	b.n	8007232 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007212:	f7fd fec5 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8007216:	0003      	movs	r3, r0
 8007218:	61bb      	str	r3, [r7, #24]
        break;
 800721a:	e00a      	b.n	8007232 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721c:	2380      	movs	r3, #128	@ 0x80
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	61bb      	str	r3, [r7, #24]
        break;
 8007222:	e006      	b.n	8007232 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007228:	231e      	movs	r3, #30
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	2201      	movs	r2, #1
 800722e:	701a      	strb	r2, [r3, #0]
        break;
 8007230:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d100      	bne.n	800723a <UART_SetConfig+0x12a>
 8007238:	e07a      	b.n	8007330 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	005a      	lsls	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	18d2      	adds	r2, r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	0019      	movs	r1, r3
 800724c:	0010      	movs	r0, r2
 800724e:	f7f8 ff5b 	bl	8000108 <__udivsi3>
 8007252:	0003      	movs	r3, r0
 8007254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b0f      	cmp	r3, #15
 800725a:	d91c      	bls.n	8007296 <UART_SetConfig+0x186>
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	2380      	movs	r3, #128	@ 0x80
 8007260:	025b      	lsls	r3, r3, #9
 8007262:	429a      	cmp	r2, r3
 8007264:	d217      	bcs.n	8007296 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	b29a      	uxth	r2, r3
 800726a:	200e      	movs	r0, #14
 800726c:	183b      	adds	r3, r7, r0
 800726e:	210f      	movs	r1, #15
 8007270:	438a      	bics	r2, r1
 8007272:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	b29b      	uxth	r3, r3
 800727a:	2207      	movs	r2, #7
 800727c:	4013      	ands	r3, r2
 800727e:	b299      	uxth	r1, r3
 8007280:	183b      	adds	r3, r7, r0
 8007282:	183a      	adds	r2, r7, r0
 8007284:	8812      	ldrh	r2, [r2, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	183a      	adds	r2, r7, r0
 8007290:	8812      	ldrh	r2, [r2, #0]
 8007292:	60da      	str	r2, [r3, #12]
 8007294:	e04c      	b.n	8007330 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8007296:	231e      	movs	r3, #30
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	2201      	movs	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e047      	b.n	8007330 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072a0:	231f      	movs	r3, #31
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d015      	beq.n	80072d6 <UART_SetConfig+0x1c6>
 80072aa:	dc18      	bgt.n	80072de <UART_SetConfig+0x1ce>
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d00d      	beq.n	80072cc <UART_SetConfig+0x1bc>
 80072b0:	dc15      	bgt.n	80072de <UART_SetConfig+0x1ce>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <UART_SetConfig+0x1ac>
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d005      	beq.n	80072c6 <UART_SetConfig+0x1b6>
 80072ba:	e010      	b.n	80072de <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072bc:	f7fd fed2 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 80072c0:	0003      	movs	r3, r0
 80072c2:	61bb      	str	r3, [r7, #24]
        break;
 80072c4:	e012      	b.n	80072ec <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c6:	4b25      	ldr	r3, [pc, #148]	@ (800735c <UART_SetConfig+0x24c>)
 80072c8:	61bb      	str	r3, [r7, #24]
        break;
 80072ca:	e00f      	b.n	80072ec <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072cc:	f7fd fe68 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 80072d0:	0003      	movs	r3, r0
 80072d2:	61bb      	str	r3, [r7, #24]
        break;
 80072d4:	e00a      	b.n	80072ec <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072d6:	2380      	movs	r3, #128	@ 0x80
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	61bb      	str	r3, [r7, #24]
        break;
 80072dc:	e006      	b.n	80072ec <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072e2:	231e      	movs	r3, #30
 80072e4:	18fb      	adds	r3, r7, r3
 80072e6:	2201      	movs	r2, #1
 80072e8:	701a      	strb	r2, [r3, #0]
        break;
 80072ea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01e      	beq.n	8007330 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	085a      	lsrs	r2, r3, #1
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	18d2      	adds	r2, r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	0019      	movs	r1, r3
 8007302:	0010      	movs	r0, r2
 8007304:	f7f8 ff00 	bl	8000108 <__udivsi3>
 8007308:	0003      	movs	r3, r0
 800730a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d90a      	bls.n	8007328 <UART_SetConfig+0x218>
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	2380      	movs	r3, #128	@ 0x80
 8007316:	025b      	lsls	r3, r3, #9
 8007318:	429a      	cmp	r2, r3
 800731a:	d205      	bcs.n	8007328 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	b29a      	uxth	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	e003      	b.n	8007330 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8007328:	231e      	movs	r3, #30
 800732a:	18fb      	adds	r3, r7, r3
 800732c:	2201      	movs	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800733c:	231e      	movs	r3, #30
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	781b      	ldrb	r3, [r3, #0]
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b008      	add	sp, #32
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	ffff69f3 	.word	0xffff69f3
 8007350:	ffffcfff 	.word	0xffffcfff
 8007354:	fffff4ff 	.word	0xfffff4ff
 8007358:	40021000 	.word	0x40021000
 800735c:	007a1200 	.word	0x007a1200

08007360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	2208      	movs	r2, #8
 800736e:	4013      	ands	r3, r2
 8007370:	d00b      	beq.n	800738a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	4a4a      	ldr	r2, [pc, #296]	@ (80074a4 <UART_AdvFeatureConfig+0x144>)
 800737a:	4013      	ands	r3, r2
 800737c:	0019      	movs	r1, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	2201      	movs	r2, #1
 8007390:	4013      	ands	r3, r2
 8007392:	d00b      	beq.n	80073ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	4a43      	ldr	r2, [pc, #268]	@ (80074a8 <UART_AdvFeatureConfig+0x148>)
 800739c:	4013      	ands	r3, r2
 800739e:	0019      	movs	r1, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	2202      	movs	r2, #2
 80073b2:	4013      	ands	r3, r2
 80073b4:	d00b      	beq.n	80073ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	4a3b      	ldr	r2, [pc, #236]	@ (80074ac <UART_AdvFeatureConfig+0x14c>)
 80073be:	4013      	ands	r3, r2
 80073c0:	0019      	movs	r1, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	2204      	movs	r2, #4
 80073d4:	4013      	ands	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4a34      	ldr	r2, [pc, #208]	@ (80074b0 <UART_AdvFeatureConfig+0x150>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	0019      	movs	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f4:	2210      	movs	r2, #16
 80073f6:	4013      	ands	r3, r2
 80073f8:	d00b      	beq.n	8007412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	4a2c      	ldr	r2, [pc, #176]	@ (80074b4 <UART_AdvFeatureConfig+0x154>)
 8007402:	4013      	ands	r3, r2
 8007404:	0019      	movs	r1, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	2220      	movs	r2, #32
 8007418:	4013      	ands	r3, r2
 800741a:	d00b      	beq.n	8007434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a25      	ldr	r2, [pc, #148]	@ (80074b8 <UART_AdvFeatureConfig+0x158>)
 8007424:	4013      	ands	r3, r2
 8007426:	0019      	movs	r1, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	2240      	movs	r2, #64	@ 0x40
 800743a:	4013      	ands	r3, r2
 800743c:	d01d      	beq.n	800747a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4a1d      	ldr	r2, [pc, #116]	@ (80074bc <UART_AdvFeatureConfig+0x15c>)
 8007446:	4013      	ands	r3, r2
 8007448:	0019      	movs	r1, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800745a:	2380      	movs	r3, #128	@ 0x80
 800745c:	035b      	lsls	r3, r3, #13
 800745e:	429a      	cmp	r2, r3
 8007460:	d10b      	bne.n	800747a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a15      	ldr	r2, [pc, #84]	@ (80074c0 <UART_AdvFeatureConfig+0x160>)
 800746a:	4013      	ands	r3, r2
 800746c:	0019      	movs	r1, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747e:	2280      	movs	r2, #128	@ 0x80
 8007480:	4013      	ands	r3, r2
 8007482:	d00b      	beq.n	800749c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4a0e      	ldr	r2, [pc, #56]	@ (80074c4 <UART_AdvFeatureConfig+0x164>)
 800748c:	4013      	ands	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }
}
 800749c:	46c0      	nop			@ (mov r8, r8)
 800749e:	46bd      	mov	sp, r7
 80074a0:	b002      	add	sp, #8
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	ffff7fff 	.word	0xffff7fff
 80074a8:	fffdffff 	.word	0xfffdffff
 80074ac:	fffeffff 	.word	0xfffeffff
 80074b0:	fffbffff 	.word	0xfffbffff
 80074b4:	ffffefff 	.word	0xffffefff
 80074b8:	ffffdfff 	.word	0xffffdfff
 80074bc:	ffefffff 	.word	0xffefffff
 80074c0:	ff9fffff 	.word	0xff9fffff
 80074c4:	fff7ffff 	.word	0xfff7ffff

080074c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b092      	sub	sp, #72	@ 0x48
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2284      	movs	r2, #132	@ 0x84
 80074d4:	2100      	movs	r1, #0
 80074d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074d8:	f7fb fdd0 	bl	800307c <HAL_GetTick>
 80074dc:	0003      	movs	r3, r0
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2208      	movs	r2, #8
 80074e8:	4013      	ands	r3, r2
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d12c      	bne.n	8007548 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f0:	2280      	movs	r2, #128	@ 0x80
 80074f2:	0391      	lsls	r1, r2, #14
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4a46      	ldr	r2, [pc, #280]	@ (8007610 <UART_CheckIdleState+0x148>)
 80074f8:	9200      	str	r2, [sp, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f000 f88c 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 8007500:	1e03      	subs	r3, r0, #0
 8007502:	d021      	beq.n	8007548 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007504:	f3ef 8310 	mrs	r3, PRIMASK
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800750c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800750e:	2301      	movs	r3, #1
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			@ (mov r8, r8)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2180      	movs	r1, #128	@ 0x80
 8007526:	438a      	bics	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	f383 8810 	msr	PRIMASK, r3
}
 8007534:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2278      	movs	r2, #120	@ 0x78
 8007540:	2100      	movs	r1, #0
 8007542:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e05f      	b.n	8007608 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2204      	movs	r2, #4
 8007550:	4013      	ands	r3, r2
 8007552:	2b04      	cmp	r3, #4
 8007554:	d146      	bne.n	80075e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	2280      	movs	r2, #128	@ 0x80
 800755a:	03d1      	lsls	r1, r2, #15
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4a2c      	ldr	r2, [pc, #176]	@ (8007610 <UART_CheckIdleState+0x148>)
 8007560:	9200      	str	r2, [sp, #0]
 8007562:	2200      	movs	r2, #0
 8007564:	f000 f858 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 8007568:	1e03      	subs	r3, r0, #0
 800756a:	d03b      	beq.n	80075e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756c:	f3ef 8310 	mrs	r3, PRIMASK
 8007570:	60fb      	str	r3, [r7, #12]
  return(result);
 8007572:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
 8007576:	2301      	movs	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	46c0      	nop			@ (mov r8, r8)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4921      	ldr	r1, [pc, #132]	@ (8007614 <UART_CheckIdleState+0x14c>)
 800758e:	400a      	ands	r2, r1
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f383 8810 	msr	PRIMASK, r3
}
 800759c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759e:	f3ef 8310 	mrs	r3, PRIMASK
 80075a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80075a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a8:	2301      	movs	r3, #1
 80075aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f383 8810 	msr	PRIMASK, r3
}
 80075b2:	46c0      	nop			@ (mov r8, r8)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2101      	movs	r1, #1
 80075c0:	438a      	bics	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	f383 8810 	msr	PRIMASK, r3
}
 80075ce:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2280      	movs	r2, #128	@ 0x80
 80075d4:	2120      	movs	r1, #32
 80075d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2278      	movs	r2, #120	@ 0x78
 80075dc:	2100      	movs	r1, #0
 80075de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e011      	b.n	8007608 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2280      	movs	r2, #128	@ 0x80
 80075ee:	2120      	movs	r1, #32
 80075f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2278      	movs	r2, #120	@ 0x78
 8007602:	2100      	movs	r1, #0
 8007604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	0018      	movs	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	b010      	add	sp, #64	@ 0x40
 800760e:	bd80      	pop	{r7, pc}
 8007610:	01ffffff 	.word	0x01ffffff
 8007614:	fffffedf 	.word	0xfffffedf

08007618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	1dfb      	adds	r3, r7, #7
 8007626:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007628:	e051      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	3301      	adds	r3, #1
 800762e:	d04e      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007630:	f7fb fd24 	bl	800307c <HAL_GetTick>
 8007634:	0002      	movs	r2, r0
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	429a      	cmp	r2, r3
 800763e:	d302      	bcc.n	8007646 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e051      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2204      	movs	r2, #4
 8007652:	4013      	ands	r3, r2
 8007654:	d03b      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b80      	cmp	r3, #128	@ 0x80
 800765a:	d038      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b40      	cmp	r3, #64	@ 0x40
 8007660:	d035      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	2208      	movs	r2, #8
 800766a:	4013      	ands	r3, r2
 800766c:	2b08      	cmp	r3, #8
 800766e:	d111      	bne.n	8007694 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	0018      	movs	r0, r3
 800767c:	f000 f900 	bl	8007880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2284      	movs	r2, #132	@ 0x84
 8007684:	2108      	movs	r1, #8
 8007686:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2278      	movs	r2, #120	@ 0x78
 800768c:	2100      	movs	r1, #0
 800768e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e02c      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	2380      	movs	r3, #128	@ 0x80
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	401a      	ands	r2, r3
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d112      	bne.n	80076ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2280      	movs	r2, #128	@ 0x80
 80076ae:	0112      	lsls	r2, r2, #4
 80076b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	0018      	movs	r0, r3
 80076b6:	f000 f8e3 	bl	8007880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2284      	movs	r2, #132	@ 0x84
 80076be:	2120      	movs	r1, #32
 80076c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2278      	movs	r2, #120	@ 0x78
 80076c6:	2100      	movs	r1, #0
 80076c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e00f      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	425a      	negs	r2, r3
 80076de:	4153      	adcs	r3, r2
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	001a      	movs	r2, r3
 80076e4:	1dfb      	adds	r3, r7, #7
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d09e      	beq.n	800762a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	0018      	movs	r0, r3
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b004      	add	sp, #16
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b090      	sub	sp, #64	@ 0x40
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	1dbb      	adds	r3, r7, #6
 8007704:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1dba      	adds	r2, r7, #6
 8007710:	2158      	movs	r1, #88	@ 0x58
 8007712:	8812      	ldrh	r2, [r2, #0]
 8007714:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2284      	movs	r2, #132	@ 0x84
 800771a:	2100      	movs	r1, #0
 800771c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2280      	movs	r2, #128	@ 0x80
 8007722:	2122      	movs	r1, #34	@ 0x22
 8007724:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800772a:	2b00      	cmp	r3, #0
 800772c:	d028      	beq.n	8007780 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007732:	4a3e      	ldr	r2, [pc, #248]	@ (800782c <UART_Start_Receive_DMA+0x134>)
 8007734:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800773a:	4a3d      	ldr	r2, [pc, #244]	@ (8007830 <UART_Start_Receive_DMA+0x138>)
 800773c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007742:	4a3c      	ldr	r2, [pc, #240]	@ (8007834 <UART_Start_Receive_DMA+0x13c>)
 8007744:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	2200      	movs	r2, #0
 800774c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3324      	adds	r3, #36	@ 0x24
 8007758:	0019      	movs	r1, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775e:	001a      	movs	r2, r3
 8007760:	1dbb      	adds	r3, r7, #6
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	f7fc fb86 	bl	8003e74 <HAL_DMA_Start_IT>
 8007768:	1e03      	subs	r3, r0, #0
 800776a:	d009      	beq.n	8007780 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2284      	movs	r2, #132	@ 0x84
 8007770:	2110      	movs	r1, #16
 8007772:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2280      	movs	r2, #128	@ 0x80
 8007778:	2120      	movs	r1, #32
 800777a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e050      	b.n	8007822 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d019      	beq.n	80077bc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007788:	f3ef 8310 	mrs	r3, PRIMASK
 800778c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007792:	2301      	movs	r3, #1
 8007794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	f383 8810 	msr	PRIMASK, r3
}
 800779c:	46c0      	nop			@ (mov r8, r8)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2180      	movs	r1, #128	@ 0x80
 80077aa:	0049      	lsls	r1, r1, #1
 80077ac:	430a      	orrs	r2, r1
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b6:	f383 8810 	msr	PRIMASK, r3
}
 80077ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077bc:	f3ef 8310 	mrs	r3, PRIMASK
 80077c0:	613b      	str	r3, [r7, #16]
  return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077c6:	2301      	movs	r3, #1
 80077c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	46c0      	nop			@ (mov r8, r8)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2101      	movs	r1, #1
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]
 80077e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	f383 8810 	msr	PRIMASK, r3
}
 80077ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ee:	f3ef 8310 	mrs	r3, PRIMASK
 80077f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80077f4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f8:	2301      	movs	r3, #1
 80077fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f383 8810 	msr	PRIMASK, r3
}
 8007802:	46c0      	nop			@ (mov r8, r8)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2140      	movs	r1, #64	@ 0x40
 8007810:	430a      	orrs	r2, r1
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	f383 8810 	msr	PRIMASK, r3
}
 800781e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	0018      	movs	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	b010      	add	sp, #64	@ 0x40
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	080079fd 	.word	0x080079fd
 8007830:	08007b29 	.word	0x08007b29
 8007834:	08007b6b 	.word	0x08007b6b

08007838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007840:	f3ef 8310 	mrs	r3, PRIMASK
 8007844:	60bb      	str	r3, [r7, #8]
  return(result);
 8007846:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	2301      	movs	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	46c0      	nop			@ (mov r8, r8)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	21c0      	movs	r1, #192	@ 0xc0
 8007862:	438a      	bics	r2, r1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f383 8810 	msr	PRIMASK, r3
}
 8007870:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007878:	46c0      	nop			@ (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b006      	add	sp, #24
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08e      	sub	sp, #56	@ 0x38
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007888:	f3ef 8310 	mrs	r3, PRIMASK
 800788c:	617b      	str	r3, [r7, #20]
  return(result);
 800788e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007890:	637b      	str	r3, [r7, #52]	@ 0x34
 8007892:	2301      	movs	r3, #1
 8007894:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f383 8810 	msr	PRIMASK, r3
}
 800789c:	46c0      	nop			@ (mov r8, r8)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4926      	ldr	r1, [pc, #152]	@ (8007944 <UART_EndRxTransfer+0xc4>)
 80078aa:	400a      	ands	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f383 8810 	msr	PRIMASK, r3
}
 80078b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ba:	f3ef 8310 	mrs	r3, PRIMASK
 80078be:	623b      	str	r3, [r7, #32]
  return(result);
 80078c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80078c4:	2301      	movs	r3, #1
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	f383 8810 	msr	PRIMASK, r3
}
 80078ce:	46c0      	nop			@ (mov r8, r8)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2101      	movs	r1, #1
 80078dc:	438a      	bics	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	f383 8810 	msr	PRIMASK, r3
}
 80078ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d118      	bne.n	8007926 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f4:	f3ef 8310 	mrs	r3, PRIMASK
 80078f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80078fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078fe:	2301      	movs	r3, #1
 8007900:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f383 8810 	msr	PRIMASK, r3
}
 8007908:	46c0      	nop			@ (mov r8, r8)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2110      	movs	r1, #16
 8007916:	438a      	bics	r2, r1
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f383 8810 	msr	PRIMASK, r3
}
 8007924:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2280      	movs	r2, #128	@ 0x80
 800792a:	2120      	movs	r1, #32
 800792c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	46bd      	mov	sp, r7
 800793e:	b00e      	add	sp, #56	@ 0x38
 8007940:	bd80      	pop	{r7, pc}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	fffffedf 	.word	0xfffffedf

08007948 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	@ 0x30
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	2b20      	cmp	r3, #32
 800795c:	d035      	beq.n	80079ca <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 800795e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007960:	2252      	movs	r2, #82	@ 0x52
 8007962:	2100      	movs	r1, #0
 8007964:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007966:	f3ef 8310 	mrs	r3, PRIMASK
 800796a:	60fb      	str	r3, [r7, #12]
  return(result);
 800796c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800796e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007970:	2301      	movs	r3, #1
 8007972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f383 8810 	msr	PRIMASK, r3
}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2180      	movs	r1, #128	@ 0x80
 8007988:	438a      	bics	r2, r1
 800798a:	609a      	str	r2, [r3, #8]
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f383 8810 	msr	PRIMASK, r3
}
 8007996:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007998:	f3ef 8310 	mrs	r3, PRIMASK
 800799c:	61bb      	str	r3, [r7, #24]
  return(result);
 800799e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f383 8810 	msr	PRIMASK, r3
}
 80079ac:	46c0      	nop			@ (mov r8, r8)
 80079ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2140      	movs	r1, #64	@ 0x40
 80079ba:	430a      	orrs	r2, r1
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	f383 8810 	msr	PRIMASK, r3
}
 80079c8:	e004      	b.n	80079d4 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80079ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7f8 ffa3 	bl	8000918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	46c0      	nop			@ (mov r8, r8)
 80079d6:	46bd      	mov	sp, r7
 80079d8:	b00c      	add	sp, #48	@ 0x30
 80079da:	bd80      	pop	{r7, pc}

080079dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7ff fb63 	bl	80070b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079f2:	46c0      	nop			@ (mov r8, r8)
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b004      	add	sp, #16
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b094      	sub	sp, #80	@ 0x50
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d06f      	beq.n	8007af2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8007a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a14:	225a      	movs	r2, #90	@ 0x5a
 8007a16:	2100      	movs	r1, #0
 8007a18:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a20:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a24:	2301      	movs	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	f383 8810 	msr	PRIMASK, r3
}
 8007a2e:	46c0      	nop			@ (mov r8, r8)
 8007a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	493a      	ldr	r1, [pc, #232]	@ (8007b24 <UART_DMAReceiveCplt+0x128>)
 8007a3c:	400a      	ands	r2, r1
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	f383 8810 	msr	PRIMASK, r3
}
 8007a4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a56:	2301      	movs	r3, #1
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	f383 8810 	msr	PRIMASK, r3
}
 8007a60:	46c0      	nop			@ (mov r8, r8)
 8007a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	438a      	bics	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]
 8007a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	f383 8810 	msr	PRIMASK, r3
}
 8007a7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a88:	2301      	movs	r3, #1
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8e:	f383 8810 	msr	PRIMASK, r3
}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2140      	movs	r1, #64	@ 0x40
 8007aa0:	438a      	bics	r2, r1
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	f383 8810 	msr	PRIMASK, r3
}
 8007aae:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab2:	2280      	movs	r2, #128	@ 0x80
 8007ab4:	2120      	movs	r1, #32
 8007ab6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d118      	bne.n	8007af2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aca:	2301      	movs	r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f383 8810 	msr	PRIMASK, r3
}
 8007ad4:	46c0      	nop			@ (mov r8, r8)
 8007ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2110      	movs	r1, #16
 8007ae2:	438a      	bics	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f383 8810 	msr	PRIMASK, r3
}
 8007af0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af4:	2200      	movs	r2, #0
 8007af6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d108      	bne.n	8007b12 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b02:	2258      	movs	r2, #88	@ 0x58
 8007b04:	5a9a      	ldrh	r2, [r3, r2]
 8007b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b08:	0011      	movs	r1, r2
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff faf4 	bl	80070f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b10:	e003      	b.n	8007b1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b14:	0018      	movs	r0, r3
 8007b16:	f7ff fad7 	bl	80070c8 <HAL_UART_RxCpltCallback>
}
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b014      	add	sp, #80	@ 0x50
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	fffffeff 	.word	0xfffffeff

08007b28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d10a      	bne.n	8007b5a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2258      	movs	r2, #88	@ 0x58
 8007b48:	5a9b      	ldrh	r3, [r3, r2]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	0011      	movs	r1, r2
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff fad0 	bl	80070f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b58:	e003      	b.n	8007b62 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f7ff fabb 	bl	80070d8 <HAL_UART_RxHalfCpltCallback>
}
 8007b62:	46c0      	nop			@ (mov r8, r8)
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b004      	add	sp, #16
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b7c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2280      	movs	r2, #128	@ 0x80
 8007b82:	589b      	ldr	r3, [r3, r2]
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2280      	movs	r2, #128	@ 0x80
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b80      	cmp	r3, #128	@ 0x80
 8007b92:	d10a      	bne.n	8007baa <UART_DMAError+0x40>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b21      	cmp	r3, #33	@ 0x21
 8007b98:	d107      	bne.n	8007baa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2252      	movs	r2, #82	@ 0x52
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f7ff fe47 	bl	8007838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	2240      	movs	r2, #64	@ 0x40
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b40      	cmp	r3, #64	@ 0x40
 8007bb6:	d10a      	bne.n	8007bce <UART_DMAError+0x64>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b22      	cmp	r3, #34	@ 0x22
 8007bbc:	d107      	bne.n	8007bce <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	225a      	movs	r2, #90	@ 0x5a
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f7ff fe59 	bl	8007880 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2284      	movs	r2, #132	@ 0x84
 8007bd2:	589b      	ldr	r3, [r3, r2]
 8007bd4:	2210      	movs	r2, #16
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2184      	movs	r1, #132	@ 0x84
 8007bdc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	0018      	movs	r0, r3
 8007be2:	f7ff fa81 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be6:	46c0      	nop			@ (mov r8, r8)
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b006      	add	sp, #24
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	225a      	movs	r2, #90	@ 0x5a
 8007c00:	2100      	movs	r1, #0
 8007c02:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2252      	movs	r2, #82	@ 0x52
 8007c08:	2100      	movs	r1, #0
 8007c0a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f7ff fa6a 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c14:	46c0      	nop			@ (mov r8, r8)
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b004      	add	sp, #16
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c24:	f3ef 8310 	mrs	r3, PRIMASK
 8007c28:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f383 8810 	msr	PRIMASK, r3
}
 8007c38:	46c0      	nop			@ (mov r8, r8)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2140      	movs	r1, #64	@ 0x40
 8007c46:	438a      	bics	r2, r1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f383 8810 	msr	PRIMASK, r3
}
 8007c54:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	0018      	movs	r0, r3
 8007c66:	f7f8 fe57 	bl	8000918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b006      	add	sp, #24
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b002      	add	sp, #8
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <memset>:
 8007c82:	0003      	movs	r3, r0
 8007c84:	1882      	adds	r2, r0, r2
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d100      	bne.n	8007c8c <memset+0xa>
 8007c8a:	4770      	bx	lr
 8007c8c:	7019      	strb	r1, [r3, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	e7f9      	b.n	8007c86 <memset+0x4>
	...

08007c94 <__libc_init_array>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	2600      	movs	r6, #0
 8007c98:	4c0c      	ldr	r4, [pc, #48]	@ (8007ccc <__libc_init_array+0x38>)
 8007c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd0 <__libc_init_array+0x3c>)
 8007c9c:	1b64      	subs	r4, r4, r5
 8007c9e:	10a4      	asrs	r4, r4, #2
 8007ca0:	42a6      	cmp	r6, r4
 8007ca2:	d109      	bne.n	8007cb8 <__libc_init_array+0x24>
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	f000 f823 	bl	8007cf0 <_init>
 8007caa:	4c0a      	ldr	r4, [pc, #40]	@ (8007cd4 <__libc_init_array+0x40>)
 8007cac:	4d0a      	ldr	r5, [pc, #40]	@ (8007cd8 <__libc_init_array+0x44>)
 8007cae:	1b64      	subs	r4, r4, r5
 8007cb0:	10a4      	asrs	r4, r4, #2
 8007cb2:	42a6      	cmp	r6, r4
 8007cb4:	d105      	bne.n	8007cc2 <__libc_init_array+0x2e>
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	00b3      	lsls	r3, r6, #2
 8007cba:	58eb      	ldr	r3, [r5, r3]
 8007cbc:	4798      	blx	r3
 8007cbe:	3601      	adds	r6, #1
 8007cc0:	e7ee      	b.n	8007ca0 <__libc_init_array+0xc>
 8007cc2:	00b3      	lsls	r3, r6, #2
 8007cc4:	58eb      	ldr	r3, [r5, r3]
 8007cc6:	4798      	blx	r3
 8007cc8:	3601      	adds	r6, #1
 8007cca:	e7f2      	b.n	8007cb2 <__libc_init_array+0x1e>
 8007ccc:	08007d48 	.word	0x08007d48
 8007cd0:	08007d48 	.word	0x08007d48
 8007cd4:	08007d4c 	.word	0x08007d4c
 8007cd8:	08007d48 	.word	0x08007d48

08007cdc <memcpy>:
 8007cdc:	2300      	movs	r3, #0
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d100      	bne.n	8007ce6 <memcpy+0xa>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	5ccc      	ldrb	r4, [r1, r3]
 8007ce8:	54c4      	strb	r4, [r0, r3]
 8007cea:	3301      	adds	r3, #1
 8007cec:	e7f8      	b.n	8007ce0 <memcpy+0x4>
	...

08007cf0 <_init>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	46c0      	nop			@ (mov r8, r8)
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr

08007cfc <_fini>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	46c0      	nop			@ (mov r8, r8)
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr
